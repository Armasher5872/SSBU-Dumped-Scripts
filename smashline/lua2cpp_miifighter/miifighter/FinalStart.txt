unsafe extern "C" fn game_finalstart(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::CHECK_VALID_FINAL_START_CAMERA(agent, 0, 1, 20, 0, 0, 0);
        macros::SLOW_OPPONENT(agent, 5, 30);
    }
    WorkModule::is_flag(agent.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){
        frame(agent.lua_state_agent, 5.0);
        if macros::is_excute(agent) {
            macros::FT_SET_FINAL_FEAR_FACE(agent, 30);
            macros::REQ_FINAL_START_CAMERA(agent, Hash40::new("d04finalstart.nuanmb"), false);
            macros::FT_START_CUTIN(agent);
            SlowModule::set_whole(agent.module_accessor, 2, 0);
        }
    }
    frame(agent.lua_state_agent, 10.0);
    if macros::is_excute(agent) {
        SlowModule::clear_whole(agent.module_accessor);
        SlowModule::set_whole(agent.module_accessor, 3, 0);
    }
    frame(agent.lua_state_agent, 14.0);
    if macros::is_excute(agent) {
        SlowModule::clear_whole(agent.module_accessor);
        SlowModule::set_whole(agent.module_accessor, 5, 0);
    }
    frame(agent.lua_state_agent, 18.0);
    if macros::is_excute(agent) {
        SlowModule::clear_whole(agent.module_accessor);
        SlowModule::set_whole(agent.module_accessor, 2, 0);
    }
    else {
    if macros::is_excute(agent) {
        PostureModule::scale(agent.module_accessor, 3, 0);
        0x18bc20(-491178847, 2.4);
        CAM_ZOOM_IN_arg5(0, 0);
        macros::FT_START_CUTIN(agent);
    }
}
frame(agent.lua_state_agent, 20.0);
if macros::is_excute(agent) {
    SlowModule::clear_whole(agent.module_accessor);
}
frame(agent.lua_state_agent, 21.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 8.0, 0.0, 7.0, -8.0, Some(0.0), Some(7.0), Some(3.0), 2.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 23.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 9.0, 0.0, 8.0, 7.0, Some(0.0), Some(-4.0), Some(7.0), 2.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 24.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 16.5, 0.0, 13.5, 4.0, Some(0.0), Some(13.5), Some(11.5), 2.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
    AttackModule::set_attack_keep_rumble(agent.module_accessor, 0, true);
    WorkModule::on_flag(agent.module_accessor, *FIGHTER_MIIFIGHTER_STATUS_FINAL_FLAG_ATTACK_START);
    AttackModule::set_no_damage_orbit_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 25.0);
if macros::is_excute(agent) {
    macros::CAM_ZOOM_OUT(agent);
}
frame(agent.lua_state_agent, 31.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
    WorkModule::on_flag(agent.module_accessor, *FIGHTER_MIIFIGHTER_STATUS_FINAL_FLAG_DISABLE_GOLD_EYE);
}
}

unsafe extern "C" fn effect_finalstart(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::FT_REMOVE_FINAL_AURA(agent, true);
        EffectModule::req_screen(agent.module_accessor, Hash40::new("bg_miifighter_final"), false, false, false);
    }
    frame(agent.lua_state_agent, 20.0);
    if macros::is_excute(agent) {
        macros::EFFECT_FOLLOW_NO_STOP_FLIP(agent, Hash40::new("miifighter_final_start"), Hash40::new("miifighter_final_start"), Hash40::new("top"), 0, 7, 0, 0, -10, 70, 0.8, false, *EF_FLIP_YZ);
    }
    frame(agent.lua_state_agent, 21.0);
    if macros::is_excute(agent) {
        macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("sys_smash_flash"), Hash40::new("sys_smash_flash"), Hash40::new("top"), 0, 12, 10, 0, 20, 90, 1, false, *EF_FLIP_YZ);
        macros::LANDING_EFFECT(agent, Hash40::new("sys_dash_smoke"), Hash40::new("top"), -13, 0, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 0, 0, false);
    }
}

unsafe extern "C" fn sound_finalstart(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 1.0);
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("se_miifighter_final02"));
        macros::PLAY_SE(agent, Hash40::new("vc_mii_finalstart"));
    }
    frame(agent.lua_state_agent, 21.0);
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("se_miifighter_swing_ll"));
    }
}

unsafe extern "C" fn expression_finalstart(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::START_INFO_FLASH_EYE(agent);
        ItemModule::set_have_item_visibility(agent.module_accessor, false, 0);
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(agent.lua_state_agent, 22.0);
    if macros::is_excute(agent) {
        macros::RUMBLE_HIT(agent, Hash40::new("rbkind_attackl"), 0);
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_nohitll_l"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_NONE);
    }
    frame(agent.lua_state_agent, 33.0);
    if macros::is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 3);
    }
}