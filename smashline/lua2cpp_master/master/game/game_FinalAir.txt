#[acmd_script( agent = "master", script = "game_finalair", category = ACMD_GAME, low_priority )]
unsafe fn game_finalair(fighter: &mut L2CAgentBase) {
    frame(fighter.lua_state_agent, 1.0);
    if macros::is_excute(fighter) {
        macros::CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 7, 20, 0, 0, 0);
        macros::SLOW_OPPONENT(fighter, 14, 60);
    }
    WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){
        frame(fighter.lua_state_agent, 5.0);
        if macros::is_excute(fighter) {
            macros::FT_SET_FINAL_FEAR_FACE(fighter, 50);
        }
    }
    if get_value_float(fighter, *SO_VAR_FLOAT_LR) < 0.0 {
        if macros::is_excute(fighter) {
            macros::REQ_FINAL_START_CAMERA(fighter, Hash40::new("d04finalstart02.nuanmb"), false);
        }
        else{
        if macros::is_excute(fighter) {
            PostureModule::scale(fighter.module_accessor, 4, 0);
            0x333080(-335839065, 2.1);
            CAM_ZOOM_IN_arg5(0, 0);
        }
        else{
        if macros::is_excute(fighter) {
            macros::REQ_FINAL_START_CAMERA(fighter, Hash40::new("d04finalstart.nuanmb"), false);
        }
        if macros::is_excute(fighter) {
            macros::FT_START_CUTIN(fighter);
        }
    }
}
}
frame(fighter.lua_state_agent, 30.0);
if macros::is_excute(fighter) {
macros::CAM_ZOOM_OUT(fighter);
}
frame(fighter.lua_state_agent, 44.0);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 10.0, 0.0, 8.0, 11.0, Some(0.0), Some(8.0), Some(15.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 46.0);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 10.0, 0.0, 8.0, 11.0, Some(0.0), Some(8.0), Some(35.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 47.0);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 10.0, 0.0, 8.0, 11.0, Some(0.0), Some(8.0), Some(50.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 50.0);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 10.0, 0.0, 8.0, 11.0, Some(0.0), Some(8.0), Some(30.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 64.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 120.0);
if macros::is_excute(fighter) {
ArticleModule::remove_exist(fighter.module_accessor, *FIGHTER_MASTER_GENERATE_ARTICLE_SWORD, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
}
}