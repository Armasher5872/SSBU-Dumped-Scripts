#[acmd_script( agent = "buddy", script = "effect_specialairsdash", category = ACMD_EFFECT, low_priority )]
unsafe fn effect_specialairsdash(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("buddy_special_s_flash1"), Hash40::new("top"), 0, 15, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
        EFFECT_FLW_POS(agent, Hash40::new("buddy_special_s_flash2"), Hash40::new("k_head"), -4, 0, 0, 0, 0, 0, 1, true);
        EffectModule::enable_sync_init_pos_last(boma);
    }
    if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if is_excute(agent) {
            EFFECT_FOLLOW(agent, Hash40::new("buddy_special_s_impact"), Hash40::new("throw"), 2, 0, 3, 0, 0, 0, 1, true);
            EffectModule::enable_sync_init_pos_last(boma);
            EFFECT_FOLLOW(agent, Hash40::new("buddy_special_s_wind"), Hash40::new("top"), 2, 6, 0, 0, 0, 0, 1.1, true);
        }
        else{
        if is_excute(agent) {
            EFFECT_FOLLOW(agent, Hash40::new("buddy_special_s_impact"), Hash40::new("throw"), -2, 0, 3, 0, 0, 0, 1, true);
            EffectModule::enable_sync_init_pos_last(boma);
            EFFECT_FOLLOW(agent, Hash40::new("buddy_special_s_wind"), Hash40::new("top"), -2, 6, 0, 0, 0, 0, 1.1, true);
            EffectModule::enable_sync_init_pos_last(boma);
        }
    }
}
if is_excute(agent) {
    FLASH(agent, 1, 1, 0.6, 0.3);
}
frame(lua_state, 3.0);
if is_excute(agent) {
    EFFECT_FOLLOW(agent, Hash40::new("buddy_special_s_after_image"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1, true);
    EffectModule::enable_sync_init_pos_last(boma);
    FLASH(agent, 1, 0.3, 0, 0.4);
}
wait(lua_state, 2.0);
if is_excute(agent) {
    FLASH(agent, 1, 1, 0.6, 0.3);
}
wait(lua_state, 2.0);
if is_excute(agent) {
    FLASH(agent, 1, 0.4, 0, 0.05);
}
wait(lua_state, 2.0);
if is_excute(agent) {
    FLASH(agent, 1, 1, 0.6, 0.3);
}
wait(lua_state, 2.0);
if is_excute(agent) {
    FLASH(agent, 1, 1, 0.6, 0.3);
}
wait(lua_state, 2.0);
}