#[acmd_script( agent = "mewtwo", script = "expression_jumpfrontmini", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_jumpfrontmini(fighter: &mut L2CAgentBase) {
    macros::IS_FIGHTER_STATUS_KIND(fighter, *FIGHTER_STATUS_KIND_GIMMICK_SPRING_JUMP);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        if macros::is_excute(fighter) {
            methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_bounce"), 0, true);
            ControlModule::set_rumble(fighter.module_accessor);
        }
        else{
        macros::IS_FIGHTER_STATUS_KIND(fighter, *FIGHTER_STATUS_KIND_ICE_JUMP);
        if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
            if macros::is_excute(fighter) {
                methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_awaken"), 0, false);
                ControlModule::set_rumble(fighter.module_accessor);
            }
            else{
            macros::IS_FIGHTER_STATUS_KIND(fighter, *FIGHTER_STATUS_KIND_ITEM_ROCKETBELT_HOP);
            if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
                if macros::is_excute(fighter) {
                    methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_grapple"), 0, false);
                    ControlModule::set_rumble(fighter.module_accessor);
                }
                else{
                if macros::is_excute(fighter) {
                    methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_jump"), 0, false);
                    ControlModule::set_rumble(fighter.module_accessor);
                }
            }
        }
    }
}
}
}
}