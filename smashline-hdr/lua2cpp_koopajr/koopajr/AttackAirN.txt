unsafe extern "C" fn game_attackairn(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 7.0);
    if is_excute(agent) {
        WorkModule::on_flag(boma, *FIGHTER_STATUS_ATTACK_AIR_FLAG_ENABLE_LANDING);
        ATTACK(agent, 0, 0, Hash40::new("clownarmr1"), 6.5, 361, 83, 0, 50, 4.0, -3.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        ATTACK(agent, 1, 0, Hash40::new("clownarml1"), 6.5, 361, 83, 0, 50, 4.0, -3.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        ATTACK(agent, 2, 0, Hash40::new("clownarmr1"), 8.0, 361, 83, 0, 50, 6.0, 3.5, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        ATTACK(agent, 3, 0, Hash40::new("clownarml1"), 8.0, 361, 83, 0, 50, 6.0, 3.5, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
    }
    wait(lua_state, 2.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("clownarmr1"), 5.5, 361, 81, 0, 40, 3.5, -3.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        ATTACK(agent, 1, 0, Hash40::new("clownarml1"), 5.5, 361, 81, 0, 40, 3.5, -3.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        ATTACK(agent, 2, 0, Hash40::new("clownarmr1"), 7.0, 361, 81, 0, 40, 5.5, 4.5, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        ATTACK(agent, 3, 0, Hash40::new("clownarml1"), 7.0, 361, 81, 0, 40, 5.5, 4.5, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
    }
    wait(lua_state, 5.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("clownarmr1"), 3.5, 361, 80, 0, 30, 3.0, -3.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        ATTACK(agent, 1, 0, Hash40::new("clownarml1"), 3.5, 361, 80, 0, 30, 3.0, -3.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        ATTACK(agent, 2, 0, Hash40::new("clownarmr1"), 5.0, 361, 80, 0, 30, 5.0, 4.5, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        ATTACK(agent, 3, 0, Hash40::new("clownarml1"), 5.0, 361, 80, 0, 30, 5.0, 4.5, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
    }
    wait(lua_state, 6.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 42.0);
    if is_excute(agent) {
        WorkModule::off_flag(boma, *FIGHTER_STATUS_ATTACK_AIR_FLAG_ENABLE_LANDING);
    }
}

unsafe extern "C" fn effect_attackairn(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 5.0);
    if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if is_excute(agent) {
            EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind"), Hash40::new("rot"), 0, 1, -0.5, 180, 0, 0, 1.45, 0, 3, 0, 5, 0, 5, true);
            LAST_EFFECT_SET_ALPHA(agent, 0.4);
            EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind"), Hash40::new("rot"), 0, 1, -0.5, 180, 180, 0, 1.45, 0, 3, 0, 5, 0, 5, true);
            LAST_EFFECT_SET_ALPHA(agent, 0.4);
        }
    }
    wait(lua_state, 3.0);
    if is_excute(agent) {
        EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind_s"), Hash40::new("rot"), 0, 1, -0.5, 180, 0, 0, 1.4, 0, 3, 0, 5, 0, 5, true);
    }
    wait(lua_state, 3.0);
    if is_excute(agent) {
        EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind"), Hash40::new("rot"), 0, 1, -0.5, 180, 0, 0, 1.3, 0, 3, 0, 5, 0, 5, true);
        LAST_EFFECT_SET_ALPHA(agent, 0.4);
        EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind"), Hash40::new("rot"), 0, 1, -0.5, 180, 180, 0, 1.3, 0, 3, 0, 5, 0, 5, true);
        LAST_EFFECT_SET_ALPHA(agent, 0.4);
    }
    wait(lua_state, 3.0);
    if is_excute(agent) {
        EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind_s"), Hash40::new("rot"), 0, 1, -0.5, 180, 180, 0, 1.2, 0, 3, 0, 5, 0, 5, true);
    }
    else {
    if is_excute(agent) {
        EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind"), Hash40::new("rot"), 0, 1, -0.5, 0, 0, 0, 1.45, 0, 3, 0, 5, 0, 5, true);
        LAST_EFFECT_SET_ALPHA(agent, 0.4);
        EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind"), Hash40::new("rot"), 0, 1, -0.5, 0, 180, 0, 1.45, 0, 3, 0, 5, 0, 5, true);
        LAST_EFFECT_SET_ALPHA(agent, 0.4);
    }
}
wait(lua_state, 3.0);
if is_excute(agent) {
    EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind_s"), Hash40::new("rot"), 0, 1, -0.5, 0, 0, 0, 1.4, 0, 3, 0, 5, 0, 5, true);
}
wait(lua_state, 3.0);
if is_excute(agent) {
    EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind"), Hash40::new("rot"), 0, 1, -0.5, 0, 0, 0, 1.3, 0, 3, 0, 5, 0, 5, true);
    LAST_EFFECT_SET_ALPHA(agent, 0.4);
    EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind"), Hash40::new("rot"), 0, 1, -0.5, 0, 180, 0, 1.3, 0, 3, 0, 5, 0, 5, true);
    LAST_EFFECT_SET_ALPHA(agent, 0.4);
}
wait(lua_state, 3.0);
if is_excute(agent) {
    EFFECT_FOLLOW_RND(agent, Hash40::new("sys_spin_wind_s"), Hash40::new("rot"), 0, 1, -0.5, 0, 180, 0, 1.2, 0, 3, 0, 5, 0, 5, true);
}
}

unsafe extern "C" fn sound_attackairn(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 1.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_koopajr_open"));
    }
    frame(lua_state, 2.0);
    if is_excute(agent) {
        PLAY_STATUS(agent, Hash40::new("se_koopajr_attackair_n01"));
        PLAY_SEQUENCE(agent, Hash40::new("seq_koopajr_rnd_attack"));
    }
    frame(lua_state, 47.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_koopajr_close"));
    }
}

unsafe extern "C" fn expression_attackairn(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        ItemModule::set_have_item_visibility(boma, false, 0);
    }
    frame(lua_state, 0.0);
    if is_excute(agent) {
        VisibilityModule::set_int64(boma, hash40("sholder_l") as i64, hash40("sholder_l_on") as i64);
        VisibilityModule::set_int64(boma, hash40("sholder_r") as i64, hash40("sholder_r_on") as i64);
        VisibilityModule::set_int64(boma, hash40("item") as i64, hash40("item_glove") as i64);
    }
    frame(lua_state, 5.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitm"), 7, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 7.0);
    if is_excute(agent) {
        RUMBLE_HIT(agent, Hash40::new("rbkind_attackm"), 0);
    }
    frame(lua_state, 13.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitm"), 7, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 21.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitm"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}