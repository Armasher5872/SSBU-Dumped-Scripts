#[acmd_script( agent = "snake", script = "expression_appealsl" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_appealsl(fighter: &mut L2CAgentBase) {
    if macros::is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
        ItemModule::set_have_item_visibility(fighter.module_accessor, false);
    }
    frame(fighter.lua_state_agent, 22.0);
    if macros::is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 3);
    }
    frame(fighter.lua_state_agent, 25.0);
    if macros::is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 3, true);
    }
    frame(fighter.lua_state_agent, 28.0);
    macros::IS_EXIST_ARTICLE(fighter, *FIGHTER_SNAKE_GENERATE_ARTICLE_CBOX);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
        if macros::is_excute(fighter) {
            ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_SNAKE_GENERATE_ARTICLE_CBOX);
            methodlib::L2CValue::as_hash()const(*FIGHTER_SNAKE_GENERATE_ARTICLE_CBOX, Hash40::new("haver"));
            ArticleModule::have(fighter.module_accessor);
            ArticleModule::set_item_action(fighter.module_accessor, *FIGHTER_SNAKE_GENERATE_ARTICLE_CBOX, *ITEM_SNAKECBOX_ACTION_ENABLE_PICKUP);
        }
    }
    frame(0, 36);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 4, false);
        ControlModule::set_rumble(fighter.module_accessor);
    }
}