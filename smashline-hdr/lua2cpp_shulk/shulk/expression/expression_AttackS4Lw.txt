#[acmd_script( agent = "shulk", script = "expression_attacks4lw", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_attacks4lw(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    if is_excute(fighter) {
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(lua_state, 1.0);
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, Hash40::new("body"), Hash40::new("body_monad_hand"));
    }
    frame(lua_state, 9.0);
    execute(9);
    if is_excute(fighter) {
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(lua_state, 12.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitm"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 14.0);
    if is_excute(fighter) {
        RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
    }
    frame(lua_state, 21.0);
    if is_excute(fighter) {
        QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
        methodlib::L2CValue::as_hash()const(Hash40::new("swordr"), *ATTACK_DIRECTION_X);
        AttackModule::set_attack_reference_joint_id(boma);
    }
    frame(lua_state, 23.0);
    if is_excute(fighter) {
        RUMBLE_HIT(fighter, Hash40::new("rbkind_piercel"), 0);
    }
    frame(lua_state, 25.0);
    if is_excute(fighter) {
        AREA_WIND_2ND_arg10(0, 2, 180, 300, 1, -10, 8, 20, 20, 70);
    }
    frame(lua_state, 26.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitl"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 38.0);
    if is_excute(fighter) {
        AreaModule::erase_wind(boma, 0);
    }
}