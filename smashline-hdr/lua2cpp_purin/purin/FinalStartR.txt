unsafe extern "C" fn game_finalstartr(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        WHOLE_HIT(agent, *HIT_STATUS_XLU);
        CHECK_VALID_FINAL_START_CAMERA(agent, 0, 7, 20, 0, 0, 0);
        SLOW_OPPONENT(agent, 7, 120);
    }
    if !WorkModule::is_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
        if is_excute(agent) {
            FT_SET_FINAL_FEAR_FACE(agent, 60);
            REQ_FINAL_START_CAMERA(agent, Hash40::new("d04finalstartr.nuanmb"), false);
        }
        else{
        if is_excute(agent) {
            PostureModule::scale(boma, 5, 0);
            0xf85d0(-467097480, 2.1);
            CAM_ZOOM_IN_arg5(0, 0);
            FT_START_CUTIN(agent);
        }
    }
}
wait(lua_state, 30.0);
if is_excute(agent) {
    CAM_ZOOM_OUT(agent);
    WorkModule::on_flag(boma, *FIGHTER_PURIN_STATUS_FINAL_FLAG_COMMON);
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 3.0, 0.0, 0.0, 0.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
frame(lua_state, 50.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 3.5, 0.0, -1.0, -1.0, Some(0.0), Some(-1.0), Some(1.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
frame(lua_state, 57.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 4.4, 0.0, -1.0, 0.0, Some(0.0), Some(3.2), Some(0.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
frame(lua_state, 74.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 4.4, 0.0, 0.0, -1.0, Some(0.0), Some(0.0), Some(1.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
frame(lua_state, 92.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 5.4, 0.0, 0.0, 0.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
}

unsafe extern "C" fn effect_finalstartr(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 1.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("body"), 1.5, 0, 0, 0, 0, 0, 2, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("toel"), -0.5, 0, 0, 0, 0, 0, 1, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("earl"), 0, 0, 0, 0, 0, 0, 1, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("hair1"), 0, 0, 0, 0, 0, 0, 0.8, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("toer"), -0.5, 0, 0, 0, 0, 0, 1, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("earr"), 0, 0, 0, 0, 0, 0, 1, true);
        EffectModule::req_screen(boma, Hash40::new("bg_purin_final"), false, false, false);
    }
    frame(lua_state, 36.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, -6, 0, 0, 0, -90, 0.6, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 41.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.6, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 46.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.5, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 51.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.5, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 56.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.45, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 61.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 66.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 71.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 76.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 81.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 86.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 91.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 86.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 101.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 106.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 111.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 116.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 121.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
}

unsafe extern "C" fn sound_finalstartr(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 1.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_purin_final01"));
    }
}

unsafe extern "C" fn expression_finalstartr(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        ItemModule::set_have_item_visibility(boma, false, 0);
        WorkModule::on_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_BACKSHIELD_INVISIBLE);
        ItemModule::set_attach_item_visibility(boma, false);
        notify_event_msc_cmd!(agent, Hash40::new_raw(0x1f20a9d549), false);
        notify_event_msc_cmd!(agent, Hash40::new_raw(0x24772eddef), false);
        START_INFO_FLASH_EYE(agent);
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitll_l"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 42.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_elecattack"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 45.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 50.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 55.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 60.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 65.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 70.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 75.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 80.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 85.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_elecattacks"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 90.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 95.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 100.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 105.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 110.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 115.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}