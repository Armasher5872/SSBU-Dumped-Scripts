#[acmd_script( agent = "dedede", script = "expression_specialairlwmax" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_specialairlwmax(fighter: &mut L2CAgentBase) {
	if macros::is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("hammer"), Hash40::new("hammer_disp_off"));
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 9.0);
	if macros::is_excute(fighter) {
		macros::QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_NONE, 3);
		macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_attack_critical"), 0);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 40.0);
	if macros::is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 6);
	}
	frame(fighter.lua_state_agent, 46.0);
	if macros::is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_down"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 54.0);
	if macros::is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("hammer"), Hash40::new("hammer_normal"));
	}
	frame(fighter.lua_state_agent, 72.0);
	if macros::is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 10);
	}
