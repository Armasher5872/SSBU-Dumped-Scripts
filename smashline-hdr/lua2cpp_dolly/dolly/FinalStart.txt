unsafe extern "C" fn game_finalstart(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        FT_SET_FINAL_SMASH_LIGHT(agent, true);
        CHECK_VALID_FINAL_START_CAMERA(agent, 0, 7, 20, 0, 0, 0);
        SLOW_OPPONENT(agent, 15, 40);
    }
    if !WorkModule::is_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
        frame(lua_state, 5.0);
        if is_excute(agent) {
            FT_SET_FINAL_FEAR_FACE(agent, 40);
            REQ_FINAL_START_CAMERA(agent, Hash40::new("d04finalstart.nuanmb"), true);
        }
        else{
        if is_excute(agent) {
            PostureModule::scale(boma, 5, 0);
            0x2508e0(-986880942, 2.1);
            CAM_ZOOM_IN_arg5(0, 0);
            FT_START_CUTIN(agent);
        }
    }
}
frame(lua_state, 35.0);
if is_excute(agent) {
    CAM_ZOOM_OUT(agent);
}
frame(lua_state, 40.0);
if is_excute(agent) {
    camera!(agent, *MA_MSC_CMD_CAMERA_CAM_RESET);
    camera!(agent, *MA_MSC_CMD_CAMERA_CAM_RECT, 45, 0, 0, 0);
    ArticleModule::generate_article(boma, *FIGHTER_DOLLY_GENERATE_ARTICLE_BURST, false, -1);
    MotionModule::set_rate(boma, 1.5);
}
frame(lua_state, 60.0);
if is_excute(agent) {
    ATTACK_ABS(agent, *FIGHTER_DOLLY_ATTACK_ABSOLUTE_KIND_FINAL, 0, 6.0, 361, 80, 1, 0, 0.5, 1.0, *ATTACK_LR_CHECK_POS, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_DOLLY_PUNCH, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(boma, true, true);
    WorkModule::on_flag(boma, *FIGHTER_DOLLY_STATUS_FINAL_WORK_FLAG_ABS_HIT);
    ArticleModule::generate_article(boma, *FIGHTER_DOLLY_GENERATE_ARTICLE_BURST, false, -1);
}
frame(lua_state, 90.0);
if is_excute(agent) {
    ATTACK_ABS(agent, *FIGHTER_DOLLY_ATTACK_ABSOLUTE_KIND_FINAL, 0, 12.0, 361, 80, 1, 0, 0.3, 1.0, *ATTACK_LR_CHECK_POS, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_DOLLY_CRITICAL, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(boma, true, true);
    WorkModule::on_flag(boma, *FIGHTER_DOLLY_STATUS_FINAL_WORK_FLAG_ATTACK_ABS_FINAL3);
    WorkModule::on_flag(boma, *FIGHTER_DOLLY_STATUS_FINAL_WORK_FLAG_ABS_HIT);
    ArticleModule::generate_article(boma, *FIGHTER_DOLLY_GENERATE_ARTICLE_BURST, false, -1);
    MotionModule::set_rate(boma, 1);
}
frame(lua_state, 120.0);
if is_excute(agent) {
    CAM_ZOOM_OUT(agent);
}
}

unsafe extern "C" fn effect_finalstart(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EffectModule::req_screen(boma, Hash40::new("bg_dolly_final"), false, false, false);
        FILL_SCREEN_MODEL_COLOR(agent, 0, 0, 1, 0.95, 0.9, 0, 0, 0, 1, 1.2, EffectScreenLayer:*CHAR, *EFFECT_SCREEN_PRIO_FINAL);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura"), Hash40::new("hip"), 1, 0, 0, 0, 0, 0, 1.4, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura"), Hash40::new("handr"), 1, 0, 0, 0, 0, 0, 0.7, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura"), Hash40::new("handl"), 1, 0, 0, 0, 0, 0, 0.7, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura"), Hash40::new("footr"), 1, 0, 0, 0, 0, 0, 0.8, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura"), Hash40::new("footl"), 1, 0, 0, 0, 0, 0, 0.8, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura"), Hash40::new("head"), 1, 0, 0, 0, 0, 0, 0.9, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura"), Hash40::new("kneel"), 1, 0, 0, 0, 0, 0, 0.9, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura"), Hash40::new("kneer"), 1, 0, 0, 0, 0, 0, 0.9, true);
    }
    frame(lua_state, 12.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("dolly_wave_aura"), Hash40::new("handr"), 1, 0, 0, 0, 0, 0, 1, true);
    }
    frame(lua_state, 28.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("sys_final_aura"), false, true);
    }
    frame(lua_state, 38.0);
    if is_excute(agent) {
        EFFECT_FOLLOW_FLIP(agent, Hash40::new("dolly_wave_arc"), Hash40::new("dolly_wave_arc"), Hash40::new("top"), 0, 10, 4, 69, -46, -45, 1.2, true, *EF_FLIP_YZ);
    }
    frame(lua_state, 43.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("dolly_wave_aura"), false, true);
        LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
    }
    frame(lua_state, 46.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("dolly_wave_aura"), Hash40::new("handl"), 1, 0, 0, 0, 0, 0, 1, true);
    }
    frame(lua_state, 58.0);
    if is_excute(agent) {
        EFFECT_FOLLOW_FLIP(agent, Hash40::new("dolly_wave_arc"), Hash40::new("dolly_wave_arc"), Hash40::new("top"), 0, 10, 4, -55, -31, -137, 1.2, true, *EF_FLIP_YZ);
    }
    frame(lua_state, 63.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("dolly_wave_aura"), false, true);
        LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
    }
    frame(lua_state, 70.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("dolly_wave_aura"), Hash40::new("handr"), 1, 0, 0, 0, 0, 0, 1, true);
    }
    frame(lua_state, 88.0);
    if is_excute(agent) {
        EFFECT_FOLLOW_FLIP(agent, Hash40::new("dolly_wave_arc"), Hash40::new("dolly_wave_arc"), Hash40::new("top"), 0, 10, 4, 69, -46, -45, 1.2, true, *EF_FLIP_YZ);
    }
    frame(lua_state, 90.0);
    if is_excute(agent) {
        LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
    }
    frame(lua_state, 100.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("dolly_wave_aura"), false, true);
    }
}

unsafe extern "C" fn sound_finalstart(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 1.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_dolly_final01"));
    }
    frame(lua_state, 12.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("vc_dolly_final01"));
    }
    frame(lua_state, 37.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_dolly_final02"));
    }
    frame(lua_state, 56.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_dolly_final02"));
    }
    frame(lua_state, 85.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_dolly_final02"));
    }
}

unsafe extern "C" fn expression_finalstart(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        START_INFO_FLASH_EYE(agent);
        ItemModule::set_have_item_visibility(boma, false, 0);
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(lua_state, 26.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase_sp"), 1, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 38.0);
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 2);
    }
    frame(lua_state, 39.0);
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 2, true);
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_explosion"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
        RUMBLE_HIT(agent, Hash40::new("rbkind_attack_critical"), 0);
        QUAKE(agent, *CAMERA_QUAKE_KIND_L);
    }
    frame(lua_state, 59.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase_sp"), 1, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 60.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_explosion"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
        QUAKE(agent, *CAMERA_QUAKE_KIND_L);
    }
    frame(lua_state, 89.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase_sp"), 1, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 90.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_explosionm"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
        QUAKE(agent, *CAMERA_QUAKE_KIND_L);
    }
    frame(lua_state, 115.0);
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 10);
    }
}