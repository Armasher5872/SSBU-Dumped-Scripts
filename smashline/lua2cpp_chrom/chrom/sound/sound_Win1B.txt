#[acmd_script( agent = "chrom", script = "sound_win1b", category = ACMD_SOUND, low_priority )]
unsafe fn sound_win1b(fighter: &mut L2CAgentBase) {
    macros::GET_VOICE_REGION(fighter);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_DEFAULT)){
        frame(fighter.lua_state_agent, 16.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 36.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 50.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE_NO_3D(fighter, Hash40::new("vc_chrom_win_lucina"));
        }
        frame(fighter.lua_state_agent, 83.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_l01"));
        }
        frame(fighter.lua_state_agent, 107.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_win01"));
        }
    }
    else{
    macros::GET_VOICE_REGION(fighter);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_US_EN)){
        frame(fighter.lua_state_agent, 16.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 30.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE_NO_3D(fighter, Hash40::new("vc_chrom_win_lucina"));
        }
        frame(fighter.lua_state_agent, 36.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 83.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_l01"));
        }
        frame(fighter.lua_state_agent, 107.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_win01"));
        }
    }
    else{
    macros::GET_VOICE_REGION(fighter);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_US_FR)){
        frame(fighter.lua_state_agent, 16.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 30.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE_NO_3D(fighter, Hash40::new("vc_chrom_win_lucina"));
        }
        frame(fighter.lua_state_agent, 36.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 83.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_l01"));
        }
        frame(fighter.lua_state_agent, 107.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_win01"));
        }
    }
    else{
    macros::GET_VOICE_REGION(fighter);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_EU_EN)){
        frame(fighter.lua_state_agent, 16.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 30.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE_NO_3D(fighter, Hash40::new("vc_chrom_win_lucina"));
        }
        frame(fighter.lua_state_agent, 36.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 83.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_l01"));
        }
        frame(fighter.lua_state_agent, 107.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_win01"));
        }
    }
    else{
    macros::GET_VOICE_REGION(fighter);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_EU_FR)){
        frame(fighter.lua_state_agent, 16.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 30.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE_NO_3D(fighter, Hash40::new("vc_chrom_win_lucina"));
        }
        frame(fighter.lua_state_agent, 36.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 83.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_l01"));
        }
        frame(fighter.lua_state_agent, 107.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_win01"));
        }
    }
    else{
    macros::GET_VOICE_REGION(fighter);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_EU_IT)){
        frame(fighter.lua_state_agent, 16.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 30.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE_NO_3D(fighter, Hash40::new("vc_chrom_win_lucina"));
        }
        frame(fighter.lua_state_agent, 36.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_s01_win01"));
        }
        frame(fighter.lua_state_agent, 83.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_smash_l01"));
        }
        frame(fighter.lua_state_agent, 107.0);
        if macros::is_excute(fighter) {
            macros::PLAY_SE(fighter, Hash40::new("se_chrom_win01"));
        }
    }
}
}
}
}
}
}