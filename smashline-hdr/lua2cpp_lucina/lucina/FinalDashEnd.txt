unsafe extern "C" fn game_finaldashend(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        WHOLE_HIT(agent, *HIT_STATUS_XLU);
    }
    frame(lua_state, 1.0);
    FT_MOTION_RATE(agent, 0.6);
    frame(lua_state, 50.0);
    FT_MOTION_RATE(agent, 0.5);
}

unsafe extern "C" fn effect_finaldashend(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("handr"), 0.5, 0, 0, 0, 0, 0, 1.1, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("kneel"), 1, 0, 0, 0, 0, 0, 1.1, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("footr"), 0, 0, 0, 0, 0, 0, 1, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("head"), 1, 0, 0, 0, 0, 0, 1.2, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("handl"), 0.5, 0, 0, 0, 0, 0, 1.1, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("kneer"), 1, 0, 0, 0, 0, 0, 1.1, true);
        EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("footl"), 0, 0, 0, 0, 0, 0, 1, true);
        FOOT_EFFECT(agent, Hash40::new("sys_dash_smoke"), Hash40::new("top"), -2, 0, 0, 0, 180, 0, 0.8, 0, 0, 0, 0, 0, 0, false);
    }
    wait(lua_state, 5.0);
    if is_excute(agent) {
        FOOT_EFFECT(agent, Hash40::new("sys_dash_smoke"), Hash40::new("top"), 3, 0, 0, 0, 180, 0, 0.6, 0, 0, 0, 0, 0, 0, false);
    }
    wait(lua_state, 4.0);
    if is_excute(agent) {
        FOOT_EFFECT(agent, Hash40::new("sys_dash_smoke"), Hash40::new("top"), 6, 0, 0, 0, 180, 0, 0.4, 0, 0, 0, 0, 0, 0, false);
    }
    frame(lua_state, 86.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("sys_attack_line"), false, true);
        LANDING_EFFECT(agent, Hash40::new("sys_landing_smoke_s"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 0.7, 0, 0, 0, 0, 0, 0, false);
    }
}

unsafe extern "C" fn sound_finaldashend(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 26.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_lucina_final05"));
    }
}

unsafe extern "C" fn expression_finaldashend(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        ItemModule::set_have_item_visibility(boma, false, 0);
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
        AREA_WIND_2ND_arg10(0, 3, 135, 8, 1, -4, 8, 30, 20, 50);
    }
    frame(lua_state, 7.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_elecattack"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 11.0);
    if is_excute(agent) {
        AREA_WIND_2ND_arg10(0, 3, 145, 9, 0.9, -4, 8, 30, 20, 50);
    }
    frame(lua_state, 21.0);
    if is_excute(agent) {
        AREA_WIND_2ND_arg10(0, 3, 155, 10, 0.8, -4, 8, 30, 20, 50);
    }
    frame(lua_state, 31.0);
    if is_excute(agent) {
        AREA_WIND_2ND_arg10(0, 3, 165, 11, 0.7, -4, 8, 30, 20, 50);
    }
    frame(lua_state, 34.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 41.0);
    if is_excute(agent) {
        AREA_WIND_2ND_arg10(0, 3, 175, 12, 0.6, -4, 8, 30, 20, 50);
    }
    frame(lua_state, 51.0);
    if is_excute(agent) {
        AREA_WIND_2ND_arg10(0, 3, 185, 13, 0.5, -4, 8, 30, 20, 50);
    }
    frame(lua_state, 61.0);
    if is_excute(agent) {
        AREA_WIND_2ND_arg10(0, 3, 200, 14, 0.4, -4, 8, 30, 20, 50);
    }
    frame(lua_state, 71.0);
    if is_excute(agent) {
        AREA_WIND_2ND_arg10(0, 3, 220, 15, 0.2, -4, 8, 30, 20, 50);
    }
    frame(lua_state, 81.0);
    if is_excute(agent) {
        AREA_WIND_2ND_arg10(0, 3, 240, 16, 0.2, -4, 8, 30, 20, 50);
    }
    frame(lua_state, 91.0);
    if is_excute(agent) {
        AreaModule::erase_wind(boma, 0);
    }
}