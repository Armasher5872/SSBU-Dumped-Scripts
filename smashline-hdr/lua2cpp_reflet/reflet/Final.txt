unsafe extern "C" fn game_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        WHOLE_HIT(agent, *HIT_STATUS_XLU);
        WorkModule::set_int(boma, *FIGHTER_REFLET_MAGIC_KIND_THUNDER, *FIGHTER_REFLET_STATUS_FINAL_WORK_INT_ATTACK_MAGIC_KIND);
    }
    frame(lua_state, 8.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_SWORD, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
        WorkModule::off_flag(boma, *FIGHTER_REFLET_STATUS_FINAL_FLAG_REQUEST_LOOP_DAMAGE_MOTION);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 20.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_ELEC, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 25.0);
    frame(lua_state, 37.0);
    if is_excute(agent) {
        WorkModule::set_int(boma, *FIGHTER_REFLET_MAGIC_KIND_GIGA_FIRE, *FIGHTER_REFLET_STATUS_FINAL_WORK_INT_ATTACK_MAGIC_KIND);
    }
    frame(lua_state, 41.0);
    frame(lua_state, 48.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_FIRE, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 53.0);
    if is_excute(agent) {
        WorkModule::set_int(boma, *FIGHTER_REFLET_MAGIC_KIND_THUNDER, *FIGHTER_REFLET_STATUS_FINAL_WORK_INT_ATTACK_MAGIC_KIND);
    }
    frame(lua_state, 57.0);
    frame(lua_state, 62.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_ELEC, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 71.0);
    frame(lua_state, 87.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_ELEC, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 90.0);
    if is_excute(agent) {
        WorkModule::set_int(boma, *FIGHTER_REFLET_MAGIC_KIND_GIGA_FIRE, *FIGHTER_REFLET_STATUS_FINAL_WORK_INT_ATTACK_MAGIC_KIND);
    }
    frame(lua_state, 96.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_FIRE, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 100.0);
    if is_excute(agent) {
        WorkModule::set_int(boma, *FIGHTER_REFLET_MAGIC_KIND_THUNDER, *FIGHTER_REFLET_STATUS_FINAL_WORK_INT_ATTACK_MAGIC_KIND);
    }
    frame(lua_state, 105.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_ELEC, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 118.0);
    frame(lua_state, 130.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_ELEC, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 136.0);
    frame(lua_state, 141.0);
    if is_excute(agent) {
        WorkModule::set_int(boma, *FIGHTER_REFLET_MAGIC_KIND_GIGA_FIRE, *FIGHTER_REFLET_STATUS_FINAL_WORK_INT_ATTACK_MAGIC_KIND);
    }
    frame(lua_state, 148.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_FIRE, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 154.0);
    frame(lua_state, 161.0);
    if is_excute(agent) {
        WorkModule::set_int(boma, *FIGHTER_REFLET_MAGIC_KIND_THUNDER, *FIGHTER_REFLET_STATUS_FINAL_WORK_INT_ATTACK_MAGIC_KIND);
    }
    frame(lua_state, 165.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_ELEC, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 171.0);
    frame(lua_state, 187.0);
    frame(lua_state, 207.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.3, 90, 100, 50, 0, 23.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_ELEC, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
        WorkModule::on_flag(boma, *FIGHTER_REFLET_STATUS_FINAL_FLAG_ATTACK_END);
        WorkModule::on_flag(boma, *FIGHTER_REFLET_STATUS_FINAL_FLAG_REQUEST_LOOP_DAMAGE_MOTION);
        WorkModule::set_int64(boma, hash40("fall_damage") as i64, *FIGHTER_REFLET_STATUS_FINAL_WORK_INT_REQUEST_LOOP_DAMAGE_MOTION);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    frame(lua_state, 220.0);
    if is_excute(agent) {
        WorkModule::set_int(boma, *FIGHTER_REFLET_MAGIC_KIND_GIGA_FIRE, *FIGHTER_REFLET_STATUS_FINAL_WORK_INT_ATTACK_MAGIC_KIND);
    }
    frame(lua_state, 262.0);
    if is_excute(agent) {
        WorkModule::on_flag(boma, *FIGHTER_REFLET_STATUS_FINAL_FLAG_TARGET_NOREAC_OFF);
    }
    frame(lua_state, 263.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 18.0, 268, 118, 0, 70, 25.0, 0.0, 8.0, 0.0, None, None, None, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_REFLET_FINAL_FIRE, *ATTACK_REGION_NONE);
        AttackModule::set_force_reaction(boma, 0, true, false);
        AttackModule::set_final_finish_cut_in(boma, 0, true, false, 90, false);
    }
    frame(lua_state, 264.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
        WorkModule::off_flag(boma, *FIGHTER_REFLET_STATUS_FINAL_FLAG_ATTACK_END);
    }
}

unsafe extern "C" fn effect_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EffectModule::set_visible_kind(boma, Hash40::new("sys_final_aura"), false);
        EFFECT(agent, Hash40::new("finreflet_warp"), Hash40::new("top"), 1, 8, 23, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 6.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_thunder_start"), Hash40::new("handr"), 2, 0, 0, 0, 0, 0, 1, true);
    }
    frame(lua_state, 21.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_magic_thunder"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 29.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_fire_start"), Hash40::new("handr"), 2, 0, 0, 0, 0, 0, 1, true);
    }
    frame(lua_state, 42.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_magic_fire"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 44.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_thunder_start"), Hash40::new("handr"), 2, 0, 0, 0, 0, 30, 1, true);
    }
    frame(lua_state, 58.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_magic_thunder"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 71.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_thunder_start"), Hash40::new("handr"), 2, 0, 0, 0, 0, 60, 1, true);
    }
    frame(lua_state, 85.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_magic_thunder"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 91.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_fire_start"), Hash40::new("handr"), 2, 0, 0, 60, 0, 0, 1, true);
    }
    frame(lua_state, 104.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_magic_fire"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 119.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_thunder_start"), Hash40::new("handr"), 2, 0, 0, 0, 0, 0, 1, true);
    }
    frame(lua_state, 131.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_magic_thunder"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 133.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_fire_start"), Hash40::new("handr"), 2, 0, 0, 0, 0, 0, 1, true);
    }
    frame(lua_state, 146.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_magic_fire"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 161.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_thunder_start"), Hash40::new("handr"), 2, 0, 0, 40, 0, 0, 1, true);
    }
    frame(lua_state, 174.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_magic_thunder"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 186.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_fire_start"), Hash40::new("handr"), 2, 0, 0, 0, 0, 0, 1, true);
    }
    frame(lua_state, 199.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_magic_fire"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 230.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("reflet_gigafire_hold"), Hash40::new("handr"), 2, 0, 0, 0, 0, 0, 1.25, true);
        LAST_EFFECT_SET_RATE(agent, 0.9);
    }
    frame(lua_state, 245.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("sys_smash_flash"), Hash40::new("handr"), 2, 0, 0, 0, 0, 0, 1.3, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 245.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("finreflet_magic_thunder_start"), Hash40::new("handr"), 2, 0, 0, 0, 0, 0, 1, true);
        EFFECT_OFF_KIND(agent, Hash40::new("finreflet_magic_thunder_start"), false, true);
    }
    frame(lua_state, 263.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("finreflet_finish"), Hash40::new("rot"), 0, 0, 0, 0, 0, 0, 0.9, 0, 0, 0, 0, 0, 0, true);
        EFFECT_OFF_KIND(agent, Hash40::new("finreflet_magic_thunder_start"), false, true);
        EFFECT_OFF_KIND(agent, Hash40::new("finreflet_bg"), false, false);
        EFFECT_OFF_KIND(agent, Hash40::new("finreflet_thunder_max"), true, true);
    }
}

unsafe extern "C" fn sound_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 19.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_reflet_final10"));
    }
    frame(lua_state, 41.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("vc_reflet_final_reflet_attack02"));
    }
    frame(lua_state, 42.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_reflet_final10"));
    }
    frame(lua_state, 57.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("vc_reflet_final_reflet_attack01"));
    }
    frame(lua_state, 61.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_reflet_final09"));
    }
    frame(lua_state, 84.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_reflet_final10"));
    }
    frame(lua_state, 94.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_reflet_final10"));
    }
    frame(lua_state, 104.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("vc_reflet_final_reflet_attack04"));
    }
    frame(lua_state, 107.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_reflet_final09"));
    }
    frame(lua_state, 118.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("vc_reflet_final_reflet_attack03"));
    }
    frame(lua_state, 147.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_reflet_final10"));
    }
    frame(lua_state, 166.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_reflet_final09"));
    }
    frame(lua_state, 183.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("vc_reflet_final02"));
    }
    frame(lua_state, 214.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_reflet_final14"));
    }
    frame(lua_state, 262.0);
    if is_excute(agent) {
        STOP_SE(agent, Hash40::new("se_reflet_final14"));
        PLAY_SE(agent, Hash40::new("se_reflet_final15"));
    }
}

unsafe extern "C" fn expression_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        ItemModule::set_have_item_visibility(boma, false, 0);
        WorkModule::on_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_BACKSHIELD_INVISIBLE);
    }
    frame(lua_state, 7.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 8.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_slashs"), 10, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 20.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_beamm"), 10, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 25.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 31.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_slashs"), 9, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 41.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 42.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_slashs"), 4, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 48.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_explosionm"), 8, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 57.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 62.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_beamm"), 7, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 71.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_slashs"), 14, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 87.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_beamm"), 18, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 96.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 106.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_explosionm"), 13, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 118.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 119.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_attackm"), 12, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 130.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 132.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_beamm"), 15, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 136.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 148.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_explosionm"), 6, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 154.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 155.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_slashm"), 20, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 165.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 171.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 176.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_beamm"), 10, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 187.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_slashm"), 14, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 202.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_explosionm"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 207.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(lua_state, 216.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 220.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_smashhold1"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 260.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 263.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_L);
        RUMBLE_HIT(agent, Hash40::new("rbkind_explosionl"), 0);
    }
}