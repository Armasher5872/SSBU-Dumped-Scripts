unsafe extern "C" fn game_finalairlockon(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        CHECK_VALID_FINAL_START_CAMERA(agent, 0, 1, 20, 0, 0, 0);
        camera!(agent, *MA_MSC_CMD_CAMERA_CAM_RECT, -5, -5, 20, -20);
    }
    if IS_EXIST_ARTICLE(agent, *FIGHTER_FOX_GENERATE_ARTICLE_ARWING) {
        if is_excute(agent) {
            ArticleModule::remove_exist(boma, *FIGHTER_FOX_GENERATE_ARTICLE_ARWING, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
        }
    }
    if is_excute(agent) {
        ArticleModule::generate_article(boma, *FIGHTER_FOX_GENERATE_ARTICLE_ARWING, false, -1);
        ArticleModule::generate_article(boma, *FIGHTER_FOX_GENERATE_ARTICLE_ARWING, false, -1);
        ArticleModule::generate_article(boma, *FIGHTER_FOX_GENERATE_ARTICLE_ARWING, false, -1);
        ArticleModule::generate_article(boma, *FIGHTER_FOX_GENERATE_ARTICLE_ARWING, false, -1);
        BattleObjectWorld__scale_z();
        methodlib::L2CValue::operator<=(lib::L2CValueconst&)const(0, 1.0);
        ArticleModule::set_visibility_whole(boma, *FIGHTER_FOX_GENERATE_ARTICLE_ARWING, false, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
        SLOW_OPPONENT(agent, 4, 30);
    }
    if !WorkModule::is_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
        frame(lua_state, 5.0);
        if is_excute(agent) {
            SlowModule::set_whole(boma, 2, 0);
            FT_SET_FINAL_FEAR_FACE(agent, 25);
            REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04finallockon.nuanmb"), false, false);
        }
        else{
        if is_excute(agent) {
            PostureModule::scale(boma, 4, 0);
            0x10d030(999741611, 1.2);
            CAM_ZOOM_IN_arg5(0, 0);
            FT_START_CUTIN(agent);
        }
    }
}
frame(lua_state, 25.0);
if is_excute(agent) {
    SlowModule::clear_whole(boma);
    CAM_ZOOM_OUT(agent);
}
frame(lua_state, 28.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("top"), 3.0, 80, 100, 200, 0, 18.0, 0.0, 14.0, 20.0, Some(0.0), Some(14.0), Some(36.0), 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(boma, true, false);
}
wait(lua_state, 4.0);
if is_excute(agent) {
    AttackModule::clear_all(boma);
    WorkModule::on_flag(boma, *FIGHTER_FOX_STATUS_WORK_ID_FLAG_FINAL_CLEAR_ATTACK);
    REMOVE_FINAL_SCREEN_EFFECT(agent, 0);
}
frame(lua_state, 34.0);
if is_excute(agent) {
    CAM_ZOOM_OUT(agent);
    camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
}
}

unsafe extern "C" fn effect_finalairlockon(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        FILL_SCREEN_arg9(0, 14, 0, 0.008, 0.012, 0.745, EffectScreenLayer:*GROUND, *EFFECT_SCREEN_PRIO_FINAL, EffectScreenBlendType:*BLEND);
    }
    frame(lua_state, 22.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("fox_final_lock_on"), Hash40::new("top"), 0, 13, 27, 0, 0, 0, 2.3, false);
    }
    frame(lua_state, 27.0);
    if is_excute(agent) {
        EFFECT_DETACH_KIND(agent, Hash40::new("fox_final_lock_on"), -1);
    }
}

unsafe extern "C" fn sound_finalairlockon(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 10.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("vc_fox_final01"));
    }
    frame(lua_state, 27.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_fox_final01"));
    }
}

unsafe extern "C" fn expression_finalairlockon(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        START_INFO_FLASH_EYE(agent);
        ItemModule::set_have_item_visibility(boma, false, 0);
    }
    frame(lua_state, 34.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitll"), 15, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 51.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitll"), 13, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 66.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitll"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}