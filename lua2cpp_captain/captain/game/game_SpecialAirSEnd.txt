methodlib::L2CValue::operatorbool()const(is_excute)
if(0x114ec0()){
	notify_event_msc_cmd(0x2127e37c07, GROUND_CLIFF_CHECK_KIND_NONE)
	0x114ec0()
	0x114ec0()
	0x114ec0()
}
frame(Frame=5)
0x114ec0()
0x114ec0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x114ec0()){
	ATTACK(ID=0, Part=0, Bone=hash40("arml"), Damage=10.0, Angle=270, KBG=70, FKB=0, BKB=60, Size=8.0, X=8.0, Y=0.0, Z=0.4, X2=LUA_VOID, Y2=LUA_VOID, Z2=LUA_VOID, Hitlag=2.0, SDI=1.0, Clang_Rebound=ATTACK_SETOFF_KIND_THRU, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=2, Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_A, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_fire"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_FIRE, Type=ATTACK_REGION_PUNCH)
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	ATTACK(ID=1, Part=0, Bone=hash40("arml"), Damage=10.0, Angle=60, KBG=80, FKB=0, BKB=60, Size=8.0, X=8.0, Y=0.0, Z=0.4, X2=LUA_VOID, Y2=LUA_VOID, Z2=LUA_VOID, Hitlag=2.0, SDI=1.0, Clang_Rebound=ATTACK_SETOFF_KIND_THRU, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=2, Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_G, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_fire"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_FIRE, Type=ATTACK_REGION_PUNCH)
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	ATTACK(2, 0, hash40("arml"), 10.0, 60, 80, 0, 60, 2.5, -2.0, 0.0, 0.0, -5.0, 0.0, 2.0, 1.0, ATTACK_SETOFF_KIND_THRU, ATTACK_LR_CHECK_F, false, 2, 0.0, 0, false, false, false, false, true, COLLISION_SITUATION_MASK_GA, COLLISION_CATEGORY_MASK_ALL, COLLISION_PART_MASK_ALL, false, hash40("collision_attr_fire"), ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_FIRE, ATTACK_REGION_PUNCH)
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
}
wait(Frames=1)
0x114ec0()
0x114ec0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x114ec0()){
	KineticModule::add_speed(-1.5, 2.5, 0.0)
	0x114ec0()
	0x114ec0()
	0x114ec0()
	ATTACK(ID=2, Part=0, Bone=hash40("top"), Damage=10.0, Angle=60, KBG=80, FKB=0, BKB=60, Size=4.0, X=0.0, Y=8.0, Z=5.5, X2=0.0, Y2=1.0, Z2=3.0, Hitlag=2.0, SDI=1.0, Clang_Rebound=ATTACK_SETOFF_KIND_THRU, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=2, Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_fire"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_FIRE, Type=ATTACK_REGION_PUNCH)
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
	0x114ec0()
}
frame(Frame=7)
0x114ec0()
0x114ec0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x114ec0()){
	AttackModule::clear(ID=2)
	0x114ec0()
	notify_event_msc_cmd(0x2127e37c07, GROUND_CLIFF_CHECK_KIND_ALWAYS_BOTH_SIDES)
	0x114ec0()
	0x114ec0()
	0x114ec0()
	WorkModule::enable_transition_term(FIGHTER_STATUS_TRANSITION_TERM_ID_LANDING)
	0x114ec0()
	AttackModule::clear_all()
}
frame(Frame=30)
0x114ec0()
0x114ec0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x114ec0()){
	JostleModule::set_status(true)
	0x114ec0()
}
