#[acmd_script( agent = "elight", script = "game_finall", category = ACMD_GAME, low_priority )]
unsafe fn game_finall(fighter: &mut L2CAgentBase) {
    frame(fighter.lua_state_agent, 1.0);
    if macros::is_excute(fighter) {
        macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 0.0, 0, 0, 0, 60, 8.0, 0.0, 10.0, 8.0, Some(0.0), Some(10.0), Some(10.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
        macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 0.0, 366, 0, 0, 30, 10.0, 0.0, 10.0, 14.0, Some(0.0), Some(10.0), Some(14.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
        macros::ATTACK(fighter, 2, 0, Hash40::new("top"), 0.0, 180, 0, 0, 60, 8.0, 0.0, 10.0, -8.0, Some(0.0), Some(10.0), Some(-10.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
        macros::ATTACK(fighter, 3, 0, Hash40::new("top"), 0.0, 366, 0, 0, 30, 10.0, 0.0, 10.0, -14.0, Some(0.0), Some(10.0), Some(-14.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
        macros::ATTACK(fighter, 4, 0, Hash40::new("top"), 0.0, 0, 0, 0, 60, 8.0, 0.0, 4.0, 10.0, Some(0.0), Some(18.0), Some(10.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
        macros::ATTACK(fighter, 5, 0, Hash40::new("top"), 0.0, 366, 0, 0, 30, 11.0, 0.0, 4.0, 14.5, Some(0.0), Some(18.0), Some(14.5), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
        macros::ATTACK(fighter, 6, 0, Hash40::new("top"), 0.0, 180, 0, 0, 60, 8.0, 0.0, 4.0, -10.0, Some(0.0), Some(18.0), Some(-10.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
        macros::ATTACK(fighter, 7, 0, Hash40::new("top"), 0.0, 366, 0, 0, 30, 11.0, 0.0, 4.0, -14.5, Some(0.0), Some(18.0), Some(-14.5), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    }
    frame(fighter.lua_state_agent, 5.0);
    if macros::is_excute(fighter) {
        macros::CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 6.5, 20, 0, 0, 0);
        WorkModule::on_flag(fighter.module_accessor, *FIGHTER_ELIGHT_STATUS_FINAL_FLAG_GENERATE_DIVER);
        macros::FT_SET_FINAL_FEAR_FACE(fighter, 50);
        macros::FT_START_CUTIN(fighter);
    }
    WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
    if(0x357740(false, false)){
        if macros::is_excute(fighter) {
            REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04finalstart.nuanmb"), true, false);
        }
        else{
        if macros::is_excute(fighter) {
            PostureModule::scale(fighter.module_accessor, 4, 0);
            0x357740(-1178691668, 2.1);
            CAM_ZOOM_IN_arg5(0, 0);
        }
    }
}
frame(fighter.lua_state_agent, 6.0);
if macros::is_excute(fighter) {
    methodlib::L2CValue::L2CValue(void*)();
}
else{
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const();
attach_esword_diver();
macros::SLOW_OPPONENT(fighter, 30, 80);
frame(fighter.lua_state_agent, 22.0);
macros::IS_EXIST_ARTICLE(fighter, *FIGHTER_ELIGHT_GENERATE_ARTICLE_ESWORD);
if(0x357740(false, true)){
if macros::is_excute(fighter) {
    methodlib::L2CValue::as_hash()const(*FIGHTER_ELIGHT_GENERATE_ARTICLE_ESWORD, *WEAPON_ELIGHT_ESWORD_MOTION_PART_SET_KIND_OPEM_CLOSE, Hash40::new("to_open"), 5, 5, false, false, 0, false, true, false);
    ArticleModule::add_motion_partial(fighter.module_accessor);
}
}
MotionModule::is_changing(fighter.module_accessor);
if(0x357740(false, true)){
if macros::is_excute(fighter) {
    WorkModule::on_flag(fighter.module_accessor, *FIGHTER_ELIGHT_INSTANCE_WORK_ID_FLAG_ADD_PARTIAL_MTION_SWORD_WHEN_CHANGEING);
}
}
frame(fighter.lua_state_agent, 25.0);
if macros::is_excute(fighter) {
macros::CAM_ZOOM_OUT(fighter);
}
frame(fighter.lua_state_agent, 26.0);
if macros::is_excute(fighter) {
AttackModule::clear(fighter.module_accessor, 0, false);
AttackModule::clear(fighter.module_accessor, 2, false);
AttackModule::clear(fighter.module_accessor, 4, false);
AttackModule::clear(fighter.module_accessor, 6, false);
}
frame(fighter.lua_state_agent, 27.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 54.0);
if macros::is_excute(fighter) {
macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_79_special_slash"), 30);
macros::ATTACK(fighter, 0, 0, Hash40::new("throw"), 8.0, 60, 70, 0, 70, 12.5, 0.0, 2.0, 0.0, Some(0.0), Some(2.0), Some(-0.5), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_PART, true, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_OBJECT);
macros::ATTACK(fighter, 1, 0, Hash40::new("throw"), 8.0, 60, 70, 0, 70, 12.5, 0.0, 2.0, 0.0, Some(0.0), Some(2.0), Some(-0.5), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_PART, true, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 55.0);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("throw"), 8.0, 60, 70, 0, 70, 12.5, 0.0, 2.0, 23.0, Some(0.0), Some(2.0), Some(-0.5), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_PART, true, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_OBJECT);
macros::ATTACK(fighter, 1, 0, Hash40::new("throw"), 8.0, 60, 70, 0, 70, 12.5, 0.0, 2.0, 23.0, Some(0.0), Some(2.0), Some(-0.5), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_PART, true, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 56.0);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("throw"), 8.0, 60, 70, 0, 70, 12.5, 0.0, 2.0, 25.0, Some(0.0), Some(2.0), Some(-0.5), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_PART, true, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_OBJECT);
macros::ATTACK(fighter, 1, 0, Hash40::new("throw"), 8.0, 60, 70, 0, 70, 19.0, 0.0, 10.0, 22.0, Some(0.0), Some(10.0), Some(22.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_PART, true, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 57.0);
if macros::is_excute(fighter) {
AttackModule::clear(fighter.module_accessor, 0, false);
macros::ATTACK(fighter, 0, 0, Hash40::new("throw"), 8.0, 60, 70, 0, 70, 21.5, 0.0, 14.0, 21.0, Some(0.0), Some(14.0), Some(21.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_PART, true, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_OBJECT);
macros::ATTACK(fighter, 1, 0, Hash40::new("throw"), 8.0, 60, 70, 0, 70, 16.0, 0.0, 25.0, -12.0, Some(0.0), Some(23.0), Some(17.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_PART, true, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 61.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 70.0);
macros::IS_EXIST_ARTICLE(fighter, *FIGHTER_ELIGHT_GENERATE_ARTICLE_ESWORD);
if(0x357740(false, true)){
if macros::is_excute(fighter) {
    methodlib::L2CValue::as_hash()const(*FIGHTER_ELIGHT_GENERATE_ARTICLE_ESWORD, *WEAPON_ELIGHT_ESWORD_MOTION_PART_SET_KIND_OPEM_CLOSE, Hash40::new("to_close"), 5, 5, false, false, 0, false, true, false);
    ArticleModule::add_motion_partial(fighter.module_accessor);
}
}
MotionModule::is_changing(fighter.module_accessor);
if(0x357740(false, true)){
if macros::is_excute(fighter) {
    WorkModule::on_flag(fighter.module_accessor, *FIGHTER_ELIGHT_INSTANCE_WORK_ID_FLAG_ADD_PARTIAL_MTION_SWORD_WHEN_CHANGEING);
}
}
frame(fighter.lua_state_agent, 90.0);
if macros::is_excute(fighter) {
methodlib::L2CValue::L2CValue(void*)();
}
else{
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const();
detach_esword_diver();
WorkModule::on_flag(fighter.module_accessor, *FIGHTER_ELEMENT_STATUS_FINAL_FLAG_DETACH_ESWORD);
}