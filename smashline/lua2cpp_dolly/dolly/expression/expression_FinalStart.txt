#[acmd_script( agent = "dolly", script = "expression_finalstart" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_finalstart(fighter: &mut L2CAgentBase) {
    if macros::is_excute(fighter) {
        macros::START_INFO_FLASH_EYE(fighter);
        ItemModule::set_have_item_visibility(fighter.module_accessor, false);
        slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(fighter.lua_state_agent, 26.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 1, false);
        ControlModule::set_rumble(fighter.module_accessor);
    }
    frame(fighter.lua_state_agent, 38.0);
    if macros::is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 2);
    }
    frame(fighter.lua_state_agent, 39.0);
    if macros::is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 2, true);
    }
    frame(fighter.lua_state_agent, 40.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 0, false);
        ControlModule::set_rumble(fighter.module_accessor);
        macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_attack_critical"), 0);
        macros::QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
    }
    frame(fighter.lua_state_agent, 59.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 1, false);
        ControlModule::set_rumble(fighter.module_accessor);
    }
    frame(fighter.lua_state_agent, 60.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 0, false);
        ControlModule::set_rumble(fighter.module_accessor);
        macros::QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
    }
    frame(fighter.lua_state_agent, 89.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 1, false);
        ControlModule::set_rumble(fighter.module_accessor);
    }
    frame(fighter.lua_state_agent, 90.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionm"), 0, false);
        ControlModule::set_rumble(fighter.module_accessor);
        macros::QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
    }
    frame(fighter.lua_state_agent, 115.0);
    if macros::is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 10);
    }
}