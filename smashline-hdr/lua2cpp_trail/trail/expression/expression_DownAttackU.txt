#[acmd_script( agent = "trail", script = "expression_downattacku", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_downattacku(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    if is_excute(fighter) {
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 6, true);
    }
    frame(lua_state, 17.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitm"), 4, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 19.0);
    if is_excute(fighter) {
        RUMBLE_HIT(fighter, Hash40::new("rbkind_81_attacks1_3"), 12);
    }
    frame(lua_state, 22.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitm"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 24.0);
    if is_excute(fighter) {
        RUMBLE_HIT(fighter, Hash40::new("rbkind_81_attacks1_3"), 0);
    }
    frame(lua_state, 26.0);
    if is_excute(fighter) {
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 5);
    }
    frame(lua_state, 42.0);
    ItemModule::is_have_item(boma, 0);
    if(0x4ae890(false, true)){
        if is_excute(fighter) {
            FT_MOTION_INTP_WAIT_ITEM(fighter, true, 0.02);
        }
    }
    frame(lua_state, 50.0);
    if is_excute(fighter) {
        FT_MOTION_INTP_WAIT_ITEM(fighter, true, 0.062);
    }
    frame(lua_state, 63.0);
    if is_excute(fighter) {
        FT_MOTION_INTP_WAIT_ITEM(fighter, true, 0);
    }
}