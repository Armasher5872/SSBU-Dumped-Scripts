if macros::is_excute(fighter) {
CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 7, 20, 0, 0, 0);
SLOW_OPPONENT(fighter, 3, 40);
}WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
frame(fighter.lua_state_agent, 5.0);
if macros::is_excute(fighter) {
FT_SET_FINAL_FEAR_FACE(fighter, 60);
REQ_FINAL_START_CAMERA(fighter, Hash40::new("d04final.nuanmb"), false);
FT_START_CUTIN(fighter);
}}frame(fighter.lua_state_agent, 15.0);
if macros::is_excute(fighter) {
SlowModule::set_whole(fighter.module_accessor, 30, 0);
}frame(fighter.lua_state_agent, 16.0);
if macros::is_excute(fighter) {
SlowModule::clear_whole(boma);
}else{;
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 4, 0);
0x14e230(1026626521, 2.5);
CAM_ZOOM_IN_arg5(0, 0);
camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
FT_START_CUTIN(fighter);
}}frame(fighter.lua_state_agent, 2.0);
frame(fighter.lua_state_agent, 21.0);
if macros::is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 7.0, 80, 100, 180, 0, 10.0, 0.0, 5.0, 12.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_magic"), *ATTACK_SOUND_LEVEL_LL, *COLLISION_SOUND_ATTR_MAGIC, *ATTACK_REGION_NONE);
ATTACK(fighter, 1, 0, Hash40::new("top"), 7.0, 80, 100, 180, 0, 10.0, 0.0, 5.0, -12.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_magic"), *ATTACK_SOUND_LEVEL_LL, *COLLISION_SOUND_ATTR_MAGIC, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}wait(fighter.lua_state_agent, 2.0);
if macros::is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 4.0, 80, 100, 180, 0, 8.0, 0.0, 1.0, 12.0, 0.0, 27.0, 12.0, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_magic"), *ATTACK_SOUND_LEVEL_LL, *COLLISION_SOUND_ATTR_MAGIC, *ATTACK_REGION_NONE);
ATTACK(fighter, 1, 0, Hash40::new("top"), 4.0, 80, 100, 180, 0, 8.0, 0.0, 1.0, -12.0, 0.0, 27.0, -12.0, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_magic"), *ATTACK_SOUND_LEVEL_LL, *COLLISION_SOUND_ATTR_MAGIC, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}wait(fighter.lua_state_agent, 2.0);
if macros::is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 2.0, 80, 100, 180, 0, 5.0, 0.0, 1.0, 12.0, 0.0, 45.0, 12.0, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_magic"), *ATTACK_SOUND_LEVEL_LL, *COLLISION_SOUND_ATTR_MAGIC, *ATTACK_REGION_NONE);
ATTACK(fighter, 1, 0, Hash40::new("top"), 2.0, 80, 100, 180, 0, 5.0, 0.0, 1.0, -12.0, 0.0, 45.0, -12.0, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_magic"), *ATTACK_SOUND_LEVEL_LL, *COLLISION_SOUND_ATTR_MAGIC, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}wait(fighter.lua_state_agent, 3.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(boma);
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_KAMUI_STATUS_WORK_ID_FLAG_FINAL_CLEAR_ATTACK);
}frame(fighter.lua_state_agent, 31.0);
if macros::is_excute(fighter) {
SlowModule::clear_whole(boma);
CAM_ZOOM_OUT(fighter);
camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
}