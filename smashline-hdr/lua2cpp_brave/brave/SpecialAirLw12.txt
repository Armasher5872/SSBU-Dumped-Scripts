unsafe extern "C" fn game_specialairlw12(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 1.0);
    FT_MOTION_RATE(agent, 0.5);
    frame(lua_state, 11.0);
    FT_MOTION_RATE(agent, 1.0);
    if is_excute(agent) {
        battle_object();
        methodlib::L2CValue::L2CValue(void*)();
    }
    else {
    methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const();
special_lw_active_command();
WorkModule::on_flag(boma, false, *FIGHTER_BRAVE_STATUS_SPECIAL_LW_FLAG_ENABLE_CONTROL_ENERGY);
}

unsafe extern "C" fn effect_specialairlw12(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("brave_chant_finish"), Hash40::new("top"), 0, 9, 0, 0, -60, 0, 1, false);
        EFFECT_FOLLOW(agent, Hash40::new("brave_damageup_start"), Hash40::new("top"), 0, 9, 0, 0, 0, 0, 1, false);
        LAST_EFFECT_SET_RATE(agent, 1.2);
    }
    frame(lua_state, 5.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("brave_damageup"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1.1, true);
        LAST_EFFECT_SET_RATE(agent, 1.2);
    }
    frame(lua_state, 10.0);
    for _ in 0..2 {
    if is_excute(agent) {
        FLASH(agent, 1, 0.8, 0, 0.25);
    }
    wait(lua_state, 2.0);
    if is_excute(agent) {
        FLASH(agent, 1, 0.1, 0, 0.3);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        COL_NORMAL(agent);
    }
    wait(lua_state, 1.0);
}
}

unsafe extern "C" fn sound_specialairlw12(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 5.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_brave_special_l09"));
    }
    frame(lua_state, 10.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("vc_brave_special_l04"));
    }
}

unsafe extern "C" fn expression_specialairlw12(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
        ItemModule::set_have_item_visibility(boma, false, 0);
    }
    frame(lua_state, 10.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_stg_power_up"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}