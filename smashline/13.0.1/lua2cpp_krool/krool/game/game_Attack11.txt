frame(fighter.lua_state_agent, 3.0);
if macros::is_excute(fighter) {
	FighterAreaModuleImpl::enable_fix_jostle_area_xy(fighter.module_accessor, 4, 7, 8.5, 8.5);
}
frame(fighter.lua_state_agent, 4.0);
if macros::is_excute(fighter) {
	macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 2.5, 361, 30, 0, 30, 2.0, 0.0, 9.0, 10.0, None, None, None, 1.8, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_PUNCH);
	macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 2.5, 361, 30, 0, 30, 2.2, 0.0, 9.0, 12.5, None, None, None, 1.8, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_PUNCH);
	macros::ATTACK(fighter, 3, 0, Hash40::new("top"), 2.5, 180, 15, 0, 20, 2.5, 0.0, 9.0, 18.5, Some(0.0), Some(9.0), Some(16.5), 1.8, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_PUNCH);
	macros::ATTACK(fighter, 4, 0, Hash40::new("top"), 2.5, 361, 15, 0, 20, 2.5, 0.0, 9.0, 18.5, Some(0.0), Some(9.0), Some(16.5), 1.8, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_PUNCH);
	AttackModule::set_add_reaction_frame(fighter.module_accessor, /*ID*/ 0, /*Frames*/ 4, /*Unk*/ false);
	AttackModule::set_add_reaction_frame(fighter.module_accessor, /*ID*/ 1, /*Frames*/ 4, /*Unk*/ false);
	AttackModule::set_add_reaction_frame(fighter.module_accessor, /*ID*/ 2, /*Frames*/ 4, /*Unk*/ false);
	AttackModule::set_add_reaction_frame(fighter.module_accessor, /*ID*/ 3, /*Frames*/ 4, /*Unk*/ false);
	AttackModule::set_add_reaction_frame(fighter.module_accessor, /*ID*/ 4, /*Frames*/ 4, /*Unk*/ false);
}
wait(fighter.lua_state_agent, 2.0);
if macros::is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
	WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_STATUS_ATTACK_FLAG_ENABLE_COMBO);
}
frame(fighter.lua_state_agent, 16.0);
if macros::is_excute(fighter) {
	WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_STATUS_ATTACK_FLAG_ENABLE_RESTART);
}
