#[acmd_script( agent = "dedede", script = "expression_attacklw4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attacklw4(fighter: &mut L2CAgentBase) {
	if macros::is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(fighter.lua_state_agent, 2.0);
	if macros::is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_R, 3);
	}
	frame(fighter.lua_state_agent, 6.0);
	execute(6);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_STATUS_ATTACK_FLAG_SMASH_SMASH_HOLD_TO_ATTACK);
	if(0x1579b0(false, true)){;
		if macros::is_excute(fighter) {
			slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 4);
		}
	}
	frame(fighter.lua_state_agent, 13.0);
	if macros::is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl_l"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 14.0);
	if macros::is_excute(fighter) {
		macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
	}
	frame(fighter.lua_state_agent, 19.0);
	if macros::is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 23.0);
	if macros::is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 6);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
