frame(Frame=12)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	WorkModule::on_flag(Flag=FIGHTER_STATUS_SUPER_JUMP_PUNCH_FLAG_MOVE_TRANS)
	0xffdb0()
}
frame(Frame=14)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	CATCH(ID=0, Bone=hash40("top"), Size=4.4, X=0.0, Y=16.0, Z=6.5, Status=FIGHTER_STATUS_KIND_CLUNG_GANON, Ground_or_Air=COLLISION_SITUATION_MASK_GA)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	CATCH(ID=1, Bone=hash40("top"), Size=6.5, X=0.0, Y=8.8, Z=13.7, Status=FIGHTER_STATUS_KIND_CLUNG_GANON, Ground_or_Air=COLLISION_SITUATION_MASK_GA)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	ATTACK_ABS(Kind=FIGHTER_ATTACK_ABSOLUTE_KIND_CATCH, ID=0, Damage=6.0, Angle=0, KBG=50, FKB=0, BKB=70, Hitlag=0.0, Unk=1.0, FacingRestrict=ATTACK_LR_CHECK_F, Unk=0.0, Unk=false, Effect=hash40("collision_attr_normal"), SFXLevel=ATTACK_SOUND_LEVEL_S, SFXType=COLLISION_SOUND_ATTR_KICK, Type=ATTACK_REGION_NONE)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
}
wait(Frames=1)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	grab(MA_MSC_CMD_GRAB_CLEAR, 1)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	CATCH(ID=0, Bone=hash40("top"), Size=4.4, X=0.0, Y=16.0, Z=6.5, X2=0.0, Y2=18.0, Z2=3.0, Status=FIGHTER_STATUS_KIND_CLUNG_GANON, Ground_or_Air=COLLISION_SITUATION_MASK_GA)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
}
frame(Frame=18)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	notify_event_msc_cmd(0x2127e37c07, GROUND_CLIFF_CHECK_KIND_ALWAYS)
	0xffdb0()
	0xffdb0()
	0xffdb0()
}
frame(Frame=29)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	grab(MA_MSC_CMD_GRAB_CLEAR_ALL)
	0xffdb0()
	0xffdb0()
	AttackModule::clear_all()
}
frame(Frame=34)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	ATTACK(ID=0, Part=0, Bone=hash40("armr"), Damage=7.0, Angle=70, KBG=90, FKB=0, BKB=70, Size=9.0, X=6.0, Y=0.0, Z=0.0, X2=LUA_VOID, Y2=LUA_VOID, Z2=LUA_VOID, Hitlag=1.0, SDI=1.0, Clang_Rebound=ATTACK_SETOFF_KIND_ON, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=0, Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_purple"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_KICK, Type=ATTACK_REGION_PUNCH)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	ATTACK(ID=1, Part=0, Bone=hash40("armr"), Damage=7.0, Angle=70, KBG=90, FKB=0, BKB=70, Size=6.0, X=-1.0, Y=0.0, Z=0.0, X2=LUA_VOID, Y2=LUA_VOID, Z2=LUA_VOID, Hitlag=1.0, SDI=1.0, Clang_Rebound=ATTACK_SETOFF_KIND_ON, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=0, Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_purple"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_KICK, Type=ATTACK_REGION_PUNCH)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
}
wait(Frames=3)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	AttackModule::clear_all()
	notify_event_msc_cmd(0x2127e37c07, GROUND_CLIFF_CHECK_KIND_ALWAYS_BOTH_SIDES)
	0xffdb0()
	0xffdb0()
	0xffdb0()
}
frame(Frame=46)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	WorkModule::on_flag(Flag=FIGHTER_GANON_STATUS_SPECIAL_HI_FLAG_IS_CHECK_DIVE)
	0xffdb0()
}
