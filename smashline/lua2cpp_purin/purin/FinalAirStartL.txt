unsafe extern "C" fn game_finalairstartl(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::WHOLE_HIT(agent, *HIT_STATUS_XLU);
        macros::CHECK_VALID_FINAL_START_CAMERA(agent, 0, 7, 20, 0, 0, 0);
        macros::SLOW_OPPONENT(agent, 7, 120);
    }
    if !WorkModule::is_flag(agent.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
        if macros::is_excute(agent) {
            macros::FT_SET_FINAL_FEAR_FACE(agent, 60);
            macros::REQ_FINAL_START_CAMERA(agent, Hash40::new("d04finalstartr.nuanmb"), false);
        }
        else {
        if macros::is_excute(agent) {
            PostureModule::scale(agent.module_accessor, 5, 0);
            0xf85d0(-467097480, 2.1);
            CAM_ZOOM_IN_arg5(0, 0);
            macros::FT_START_CUTIN(agent);
        }
    }
}
wait(agent.lua_state_agent, 30.0);
if macros::is_excute(agent) {
    macros::CAM_ZOOM_OUT(agent);
    WorkModule::on_flag(agent.module_accessor, *FIGHTER_PURIN_STATUS_FINAL_FLAG_COMMON);
    macros::ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 3.0, 0.0, 0.0, 0.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(agent.module_accessor, 0, true);
}
frame(agent.lua_state_agent, 50.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 3.5, 0.0, -1.0, -1.0, Some(0.0), Some(-1.0), Some(1.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(agent.module_accessor, 0, true);
}
frame(agent.lua_state_agent, 57.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 4.4, 0.0, -1.0, 0.0, Some(0.0), Some(3.2), Some(0.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(agent.module_accessor, 0, true);
}
frame(agent.lua_state_agent, 74.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 4.4, 0.0, 0.0, -1.0, Some(0.0), Some(0.0), Some(1.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(agent.module_accessor, 0, true);
}
frame(agent.lua_state_agent, 92.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 5.4, 0.0, 0.0, 0.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(agent.module_accessor, 0, true);
}
}

unsafe extern "C" fn effect_finalairstartl(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 1.0);
    if macros::is_excute(agent) {
        macros::EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("body"), 1.5, 0, 0, 0, 0, 0, 2, true);
        macros::EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("toel"), -0.5, 0, 0, 0, 0, 0, 1, true);
        macros::EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("earl"), 0, 0, 0, 0, 0, 0, 1, true);
        macros::EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("hair1"), 0, 0, 0, 0, 0, 0, 0.8, true);
        macros::EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("toer"), -0.5, 0, 0, 0, 0, 0, 1, true);
        macros::EFFECT_FOLLOW(agent, Hash40::new("sys_final_aura2"), Hash40::new("earr"), 0, 0, 0, 0, 0, 0, 1, true);
        EffectModule::req_screen(agent.module_accessor, Hash40::new("bg_purin_final"), false, false, false);
    }
    frame(agent.lua_state_agent, 36.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, -6, 0, 0, 0, -90, 0.6, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 41.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.6, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 46.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.5, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 51.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.5, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 56.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.45, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 61.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 66.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 71.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 76.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 81.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 86.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 91.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 86.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 101.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 106.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 111.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 116.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
    frame(agent.lua_state_agent, 121.0);
    if macros::is_excute(agent) {
        macros::EFFECT(agent, Hash40::new("purin_final_smoke"), Hash40::new("hip"), 0, 0, 0, 0, 0, -90, 0.4, 0, 0, 0, 0, 0, 0, true);
    }
}

unsafe extern "C" fn sound_finalairstartl(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 1.0);
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("se_purin_final01"));
    }
}

unsafe extern "C" fn expression_finalairstartl(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        ItemModule::set_have_item_visibility(agent.module_accessor, false, 0);
        WorkModule::on_flag(agent.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_BACKSHIELD_INVISIBLE);
        ItemModule::set_attach_item_visibility(agent.module_accessor, false);
        notify_event_msc_cmd!(agent, Hash40::new_raw(0x1f20a9d549), false);
        notify_event_msc_cmd!(agent, Hash40::new_raw(0x24772eddef), false);
        macros::START_INFO_FLASH_EYE(agent);
    }
    frame(agent.lua_state_agent, 40.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_S);
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_nohitll_l"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(agent.lua_state_agent, 42.0);
    if macros::is_excute(agent) {
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_elecattack"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(agent.lua_state_agent, 45.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(agent.lua_state_agent, 50.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(agent.lua_state_agent, 55.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    frame(agent.lua_state_agent, 60.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(agent.lua_state_agent, 65.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(agent.lua_state_agent, 70.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(agent.lua_state_agent, 75.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(agent.lua_state_agent, 80.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(agent.lua_state_agent, 85.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_elecattacks"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(agent.lua_state_agent, 90.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(agent.lua_state_agent, 95.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(agent.lua_state_agent, 100.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(agent.lua_state_agent, 105.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(agent.lua_state_agent, 110.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
    }
    frame(agent.lua_state_agent, 115.0);
    if macros::is_excute(agent) {
        macros::QUAKE(agent, *CAMERA_QUAKE_KIND_M);
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}