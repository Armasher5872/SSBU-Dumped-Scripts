methodlib::L2CValue::operatorbool()const(is_excute)
if(0x333150()){
	EFFECT(hash40("sys_smash_flash"), hash40("top"), 7, 20, -3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, true)
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
}
frame(Frame=10)
0x333150()
0x333150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x333150()){
	EFFECT(hash40("sys_whirlwind_l"), hash40("top"), 0, 0, 0, 0, 0, 0, 1.1, 0, 0, 0, 0, 0, 0, false)
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	LAST_EFFECT_SET_RATE(0.8)
	0x333150()
}
frame(Frame=14)
0x333150()
0x333150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x333150()){
	LANDING_EFFECT(hash40("null"), hash40("top"), 13, 0, 0, 0, 0, 0, 0.95, 0, 0, 0, 0, 0, 0, false)
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
}
get_value_float(SO_VAR_FLOAT_LR)
0x333150(528, 0)
0x333150()
0x333150()
if(0x333150()){
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x333150()){
		EFFECT_FOLLOW_ALPHA(0x1564518b30, hash40("top"), -5, 0, 10, 0, 180, 0, 0.8, true, 0.7)
	}
	else{
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x333150()){
			EFFECT_FOLLOW_ALPHA(0x1564518b30, hash40("top"), 5, 0, 10, 0, 180, 0, 0.8, true, 0.7)
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
		}
	}
}
frame(Frame=16)
0x333150()
0x333150()
get_value_float(SO_VAR_FLOAT_LR)
0x333150(528, 0)
0x333150()
0x333150()
if(0x333150()){
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x333150()){
		EFFECT_FOLLOW(0x13280ce5ce, hash40("top"), 5, 7.5, 6, 7, -90, 15, 1.2, true)
	}
	else{
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x333150()){
			EFFECT_FOLLOW(0x13280ce5ce, hash40("top"), 0, 4, 5, 1, -110, 7, 1.1, true)
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
		}
	}
}
frame(Frame=24)
0x333150()
0x333150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x333150()){
	LANDING_EFFECT(hash40("null"), hash40("top"), -13, 0, 0, 0, 0, 0, 0.95, 0, 0, 0, 0, 0, 0, false)
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
	0x333150()
}
get_value_float(SO_VAR_FLOAT_LR)
0x333150(176, 0)
0x333150()
0x333150()
if(0x333150()){
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x333150()){
		EFFECT_FOLLOW_ALPHA(0x1564518b30, hash40("top"), -5, 0, -10, 0, 0, 0, 0.8, true, 0.7)
	}
	else{
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x333150()){
			EFFECT_FOLLOW_ALPHA(0x1564518b30, hash40("top"), 5, 0, -10, 0, 0, 0, 0.8, true, 0.7)
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
		}
	}
}
frame(Frame=25)
0x333150()
0x333150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x333150()){
	EFFECT_OFF_KIND(0x13280ce5ce, false, true)
	0x333150()
	0x333150()
	0x333150()
}
frame(Frame=26)
0x333150()
0x333150()
get_value_float(SO_VAR_FLOAT_LR)
0x333150(176, 0)
0x333150()
0x333150()
if(0x333150()){
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x333150()){
		EFFECT_FOLLOW(0x13280ce5ce, hash40("top"), 0, 1, -6, -5, 70, 15, 1, true)
	}
	else{
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x333150()){
			EFFECT_FOLLOW(0x13280ce5ce, hash40("top"), 0, 2, -4.5, 0, 100, 10, 1.1, true)
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
			0x333150()
		}
	}
}
