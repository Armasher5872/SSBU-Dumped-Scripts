#[acmd_script( agent = "duckhunt", script = "expression_attack100", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_attack100(fighter: &mut L2CAgentBase) {
    wait_loop_sync_mot();
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("top"), *ATTACK_DIRECTION_Y_MINUS, *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_X);
        AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
        VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_normal"));
        slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(fighter.lua_state_agent, 1.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 3, false);
        ControlModule::set_rumble(fighter.module_accessor);
    }
    frame(fighter.lua_state_agent, 2.0);
    if macros::is_excute(fighter) {
        macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_slashss"), 6);
    }
    frame(fighter.lua_state_agent, 5.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 3, false);
        ControlModule::set_rumble(fighter.module_accessor);
    }
    frame(fighter.lua_state_agent, 9.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 3, false);
        ControlModule::set_rumble(fighter.module_accessor);
    }
    frame(fighter.lua_state_agent, 13.0);
    methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 3, false);
    ControlModule::set_rumble(fighter.module_accessor);
}