unsafe extern "C" fn effect_attacklw4(agent: &mut L2CAgentBase) {
    if get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if macros::is_excute(agent) {
            macros::EFFECT(agent, Hash40::new("sys_smash_flash"), Hash40::new("top"), 4, 5, -6.5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, true);
        }
        else{
        if macros::is_excute(agent) {
            macros::EFFECT(agent, Hash40::new("sys_smash_flash"), Hash40::new("top"), -4, 5, -6.5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, true);
        }
    }
}
frame(agent.lua_state_agent, 4.0);
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
    if macros::is_excute(agent) {
        macros::EFFECT_FOLLOW(agent, Hash40::new("zelda_smash_lw_arc"), Hash40::new("top"), 0, 4, 2, -188, 180, -3, 1, true);
    }
    else{
    if macros::is_excute(agent) {
        macros::EFFECT_FOLLOW(agent, Hash40::new("zelda_smash_lw_arc"), Hash40::new("top"), 0, 4, 2, 8, 0, 3, 1, true);
    }
}
}
frame(agent.lua_state_agent, 6.0);
if macros::is_excute(agent) {
macros::EFFECT_FOLLOW(agent, Hash40::new("zelda_atk_flash_s"), Hash40::new("footr"), 0, 0, 0, 0, 0, 0, 0.8, true);
}
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
if macros::is_excute(agent) {
    macros::LANDING_EFFECT(agent, Hash40::new("sys_whirlwind_r"), Hash40::new("top"), 0, 0, -2, 0, 0, 0, 1.1, 0, 0, 0, 0, 0, 0, false);
    macros::LAST_EFFECT_SET_ALPHA(agent, 0.7);
}
else{
if macros::is_excute(agent) {
    macros::LANDING_EFFECT(agent, Hash40::new("sys_whirlwind_l"), Hash40::new("top"), 0, 0, 1, 0, 0, 0, 1.1, 0, 0, 0, 0, 0, 0, false);
    macros::LAST_EFFECT_SET_ALPHA(agent, 0.7);
}
}
}
frame(agent.lua_state_agent, 10.0);
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
if macros::is_excute(agent) {
macros::EFFECT_FOLLOW(agent, Hash40::new("zelda_smash_lw_arc"), Hash40::new("top"), 0, 4, -2, -172, 0, -5, 1, true);
}
else{
if macros::is_excute(agent) {
macros::EFFECT_FOLLOW(agent, Hash40::new("zelda_smash_lw_arc"), Hash40::new("top"), 0, 4, -2, -8, 180, 5, 1, true);
}
}
}
}