#[acmd_script( agent = "master", script = "expression_attack100", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_attack100(fighter: &mut L2CAgentBase) {
    wait_loop_clear();
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("sword1"), *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_Z);
        AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
        WorkModule::on_flag(fighter.module_accessor, *FIGHTER_MASTER_INSTANCE_WORK_ID_FLAG_SWORD_OFF_EFFECT_AURA);
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(fighter.lua_state_agent, 1.0);
    if macros::is_excute(fighter) {
        macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_slashss"), 4);
        ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_nohitl"), 3, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(fighter.lua_state_agent, 5.0);
    if macros::is_excute(fighter) {
        ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_nohits"), 3, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(fighter.lua_state_agent, 9.0);
    if macros::is_excute(fighter) {
        ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_nohitl"), 3, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(fighter.lua_state_agent, 13.0);
    ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_nohits"), 3, false, *BATTLE_OBJECT_ID_INVALID as u32);
}