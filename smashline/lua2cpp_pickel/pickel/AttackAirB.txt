unsafe extern "C" fn game_attackairb(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        WorkModule::off_flag(agent.module_accessor, *FIGHTER_PICKEL_INSTANCE_WORK_ID_FLAG_REQUEST_REMOVE_HAVE_CRAFT_WEAPON);
    }
    if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_JUMP_MINI_FRAME, 0)){
        frame(agent.lua_state_agent, 1.0);
        if macros::is_excute(agent) {
            WorkModule::set_int(agent.module_accessor, *FIGHTER_PICKEL_CRAFT_WEAPON_KIND_SWORD, *FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_REQUEST_HAVE_CRAFT_WEAPON_KIND);
        }
    }
    wait(agent.lua_state_agent, 1.0);
    if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_GOLD)){
        if macros::is_excute(agent) {
            MotionModule::set_rate(agent.module_accessor, 10);
            MotionModule::set_rate_partial(agent.module_accessor, *FIGHTER_MOTION_PART_SET_KIND_UPPER_BODY, 10);
        }
        else {
        frame(agent.lua_state_agent, 0.0);
        if macros::is_excute(agent) {
            WorkModule::set_int(agent.module_accessor, *FIGHTER_PICKEL_CRAFT_WEAPON_KIND_PICK, *FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_REQUEST_HAVE_CRAFT_WEAPON_KIND);
        }
        frame(agent.lua_state_agent, 5.0);
        if macros::is_excute(agent) {
            WorkModule::on_flag(agent.module_accessor, *FIGHTER_STATUS_ATTACK_AIR_FLAG_ENABLE_LANDING);
        }
        frame(agent.lua_state_agent, 12.0);
        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_DIAMOND)){
            if macros::is_excute(agent) {
                macros::ATTACK(agent, 0, 0, Hash40::new("armr"), 15.525, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 1, 0, Hash40::new("armr"), 15.525, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 2, 0, Hash40::new("haver"), 15.525, 361, 85, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 3, 0, Hash40::new("haver"), 15.525, 361, 85, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                WorkModule::set_float(agent.module_accessor, 6.5, *FIGHTER_PICKEL_INSTANCE_WORK_ID_FLOAT_ATTACK_DURABILITY);
            }
            wait(agent.lua_state_agent, 2.0);
            methodlib::L2CValue::operatorbool()const(is_excute);
        }
        else {
        if macros::is_excute(agent) {
            MotionModule::set_rate(agent.module_accessor, 5);
            MotionModule::set_rate_partial(agent.module_accessor, *FIGHTER_MOTION_PART_SET_KIND_UPPER_BODY, 5);
        }
        frame(agent.lua_state_agent, 5.0);
        if macros::is_excute(agent) {
            WorkModule::on_flag(agent.module_accessor, *FIGHTER_STATUS_ATTACK_AIR_FLAG_ENABLE_LANDING);
        }
        frame(agent.lua_state_agent, 12.0);
        if macros::is_excute(agent) {
            MotionModule::set_rate(agent.module_accessor, 1.75);
            MotionModule::set_rate_partial(agent.module_accessor, *FIGHTER_MOTION_PART_SET_KIND_UPPER_BODY, 1.75);
        }
        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_DIAMOND)){
            methodlib::L2CValue::operatorbool()const(is_excute);
        }
        else {
        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_GOLD)){
            if macros::is_excute(agent) {
                macros::ATTACK(agent, 0, 0, Hash40::new("armr"), 11.5, 50, 99, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 1, 0, Hash40::new("armr"), 11.5, 50, 99, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 2, 0, Hash40::new("haver"), 11.5, 361, 99, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 3, 0, Hash40::new("haver"), 11.5, 361, 99, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                WorkModule::set_float(agent.module_accessor, 6.5, *FIGHTER_PICKEL_INSTANCE_WORK_ID_FLOAT_ATTACK_DURABILITY);
            }
            wait(agent.lua_state_agent, 2.0);
            methodlib::L2CValue::operatorbool()const(is_excute);
        }
        else {
        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_GOLD)){
            methodlib::L2CValue::operatorbool()const(is_excute);
        }
        else {
        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_IRON)){
            if macros::is_excute(agent) {
                macros::ATTACK(agent, 0, 0, Hash40::new("armr"), 13.8, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 1, 0, Hash40::new("armr"), 13.8, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 2, 0, Hash40::new("haver"), 13.8, 361, 85, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 3, 0, Hash40::new("haver"), 13.8, 361, 85, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                WorkModule::set_float(agent.module_accessor, 6.5, *FIGHTER_PICKEL_INSTANCE_WORK_ID_FLOAT_ATTACK_DURABILITY);
            }
            wait(agent.lua_state_agent, 2.0);
            methodlib::L2CValue::operatorbool()const(is_excute);
        }
        else {
        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_IRON)){
            methodlib::L2CValue::operatorbool()const(is_excute);
        }
        else {
        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_STONE)){
            if macros::is_excute(agent) {
                macros::ATTACK(agent, 0, 0, Hash40::new("armr"), 12.65, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 1, 0, Hash40::new("armr"), 12.65, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 2, 0, Hash40::new("haver"), 12.65, 361, 85, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 3, 0, Hash40::new("haver"), 12.65, 361, 85, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                WorkModule::set_float(agent.module_accessor, 6.5, *FIGHTER_PICKEL_INSTANCE_WORK_ID_FLOAT_ATTACK_DURABILITY);
            }
            wait(agent.lua_state_agent, 2.0);
            if macros::is_excute(agent) {
                macros::ATTACK(agent, 0, 0, Hash40::new("armr"), 14.3, 50, 79, 0, 52, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 1, 0, Hash40::new("armr"), 14.3, 50, 79, 0, 52, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 2, 0, Hash40::new("haver"), 14.3, 361, 79, 0, 52, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                macros::ATTACK(agent, 3, 0, Hash40::new("haver"), 14.3, 361, 79, 0, 52, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
            }
            else {
            if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_STONE)){
                if macros::is_excute(agent) {
                    macros::ATTACK(agent, 0, 0, Hash40::new("haver"), 3.74, 45, 134, 0, 27, 2.3, 0.0, 0.0, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                    macros::ATTACK(agent, 1, 0, Hash40::new("haver"), 3.74, 45, 134, 0, 27, 2.3, 0.0, 3.6, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                    macros::ATTACK(agent, 2, 0, Hash40::new("haver"), 3.74, 45, 134, 0, 27, 2.3, 0.0, 7.2, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                    macros::ATTACK(agent, 3, 0, Hash40::new("top"), 3.74, 45, 134, 0, 27, 2.3, 0.0, 6.8, -5.4, Some(0.0), Some(6.8), Some(-10.2), 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                    macros::ATTACK(agent, 4, 0, Hash40::new("haver"), 3.74, 57, 134, 0, 20, 2.3, 0.0, 0.0, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                    macros::ATTACK(agent, 5, 0, Hash40::new("haver"), 3.74, 57, 134, 0, 20, 2.3, 0.0, 3.6, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                    macros::ATTACK(agent, 6, 0, Hash40::new("haver"), 3.74, 57, 134, 0, 20, 2.3, 0.0, 7.2, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                    macros::ATTACK(agent, 7, 0, Hash40::new("top"), 3.74, 57, 134, 0, 20, 2.3, 0.0, 6.8, -5.4, Some(0.0), Some(6.8), Some(-10.2), 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                    macros::ATK_SET_SHIELD_SETOFF_MUL_arg5(agent, 0, 1, 2, 3, 0.25);
                    macros::ATK_SET_SHIELD_SETOFF_MUL_arg5(agent, 4, 5, 6, 7, 0.25);
                    AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 0, -5.0, false);
                    AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 1, -5.0, false);
                    AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 2, -5.0, false);
                    AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 3, -5.0, false);
                    AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 4, -3.0, false);
                    AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 5, -3.0, false);
                    AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 6, -3.0, false);
                    AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 7, -3.0, false);
                    WorkModule::set_float(agent.module_accessor, 2.0, *FIGHTER_PICKEL_INSTANCE_WORK_ID_FLOAT_ATTACK_DURABILITY);
                }
                else {
                if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_WOOD)){
                    if macros::is_excute(agent) {
                        macros::ATTACK(agent, 0, 0, Hash40::new("armr"), 11.5, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                        macros::ATTACK(agent, 1, 0, Hash40::new("armr"), 11.5, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                        macros::ATTACK(agent, 2, 0, Hash40::new("haver"), 11.5, 361, 85, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                        macros::ATTACK(agent, 3, 0, Hash40::new("haver"), 11.5, 361, 85, 0, 51, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                        WorkModule::set_float(agent.module_accessor, 6.5, *FIGHTER_PICKEL_INSTANCE_WORK_ID_FLOAT_ATTACK_DURABILITY);
                    }
                    wait(agent.lua_state_agent, 2.0);
                    if macros::is_excute(agent) {
                        macros::ATTACK(agent, 0, 0, Hash40::new("armr"), 13.0, 50, 79, 0, 52, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                        macros::ATTACK(agent, 1, 0, Hash40::new("armr"), 13.0, 50, 79, 0, 52, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                        macros::ATTACK(agent, 2, 0, Hash40::new("haver"), 13.0, 361, 79, 0, 52, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                        macros::ATTACK(agent, 3, 0, Hash40::new("haver"), 13.0, 361, 79, 0, 52, 5.4, 0.0, 4.4, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_OBJECT);
                    }
                    else {
                    if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_WOOD)){
                        if macros::is_excute(agent) {
                            macros::ATTACK(agent, 0, 0, Hash40::new("haver"), 3.4, 45, 134, 0, 27, 2.3, 0.0, 0.0, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                            macros::ATTACK(agent, 1, 0, Hash40::new("haver"), 3.4, 45, 134, 0, 27, 2.3, 0.0, 3.6, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                            macros::ATTACK(agent, 2, 0, Hash40::new("haver"), 3.4, 45, 134, 0, 27, 2.3, 0.0, 7.2, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                            macros::ATTACK(agent, 3, 0, Hash40::new("top"), 3.4, 45, 134, 0, 27, 2.3, 0.0, 6.8, -5.4, Some(0.0), Some(6.8), Some(-10.2), 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                            macros::ATTACK(agent, 4, 0, Hash40::new("haver"), 3.4, 57, 134, 0, 20, 2.3, 0.0, 0.0, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                            macros::ATTACK(agent, 5, 0, Hash40::new("haver"), 3.4, 57, 134, 0, 20, 2.3, 0.0, 3.6, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                            macros::ATTACK(agent, 6, 0, Hash40::new("haver"), 3.4, 57, 134, 0, 20, 2.3, 0.0, 7.2, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                            macros::ATTACK(agent, 7, 0, Hash40::new("top"), 3.4, 57, 134, 0, 20, 2.3, 0.0, 6.8, -5.4, Some(0.0), Some(6.8), Some(-10.2), 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_SWORD);
                            macros::ATK_SET_SHIELD_SETOFF_MUL_arg5(agent, 0, 1, 2, 3, 0.25);
                            macros::ATK_SET_SHIELD_SETOFF_MUL_arg5(agent, 4, 5, 6, 7, 0.25);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 0, -5.0, false);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 1, -5.0, false);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 2, -5.0, false);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 3, -5.0, false);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 4, -3.0, false);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 5, -3.0, false);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 6, -3.0, false);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 7, -3.0, false);
                            WorkModule::set_float(agent.module_accessor, 2.0, *FIGHTER_PICKEL_INSTANCE_WORK_ID_FLOAT_ATTACK_DURABILITY);
                        }
                        else {
                        if macros::is_excute(agent) {
                            macros::ATTACK(agent, 0, 0, Hash40::new("armr"), 9.2, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
                            macros::ATTACK(agent, 1, 0, Hash40::new("armr"), 9.2, 50, 85, 0, 56, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
                        }
                        wait(agent.lua_state_agent, 2.0);
                        if macros::is_excute(agent) {
                            macros::ATTACK(agent, 0, 0, Hash40::new("armr"), 10.4, 50, 79, 0, 52, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
                            macros::ATTACK(agent, 1, 0, Hash40::new("armr"), 10.4, 50, 79, 0, 52, 4.2, 0.0, 0.0, 0.0, None, None, None, 1.5, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
                        }
                        wait(agent.lua_state_agent, 3.0);
                        if macros::is_excute(agent) {
                            AttackModule::clear_all(agent.module_accessor);
                        }
                        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_GOLD)){
                            macros::FT_MOTION_RATE(agent, 0.8);
                        }
                        frame(agent.lua_state_agent, 22.0);
                        if macros::is_excute(agent) {
                            WorkModule::off_flag(agent.module_accessor, *FIGHTER_STATUS_ATTACK_AIR_FLAG_ENABLE_LANDING);
                        }
                        else {
                        if macros::is_excute(agent) {
                            macros::ATTACK(agent, 0, 0, Hash40::new("haver"), 2.72, 60, 50, 0, 72, 2.3, 0.0, 0.0, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
                            macros::ATTACK(agent, 4, 0, Hash40::new("haver"), 2.72, 60, 50, 0, 72, 2.3, 0.0, 0.0, 0.0, None, None, None, 1.0, 2.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_B, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
                            macros::ATK_SET_SHIELD_SETOFF_MUL_arg5(agent, 0, 1, 2, 3, 0.25);
                            macros::ATK_SET_SHIELD_SETOFF_MUL_arg5(agent, 4, 5, 6, 7, 0.25);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 0, -10.0, false);
                            AttackModule::set_add_reaction_frame_revised(agent.module_accessor, 4, -10.0, false);
                        }
                        wait(agent.lua_state_agent, 5.0);
                        if macros::is_excute(agent) {
                            AttackModule::clear_all(agent.module_accessor);
                        }
                        frame(agent.lua_state_agent, 19.0);
                        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_GOLD)){
                            if macros::is_excute(agent) {
                                MotionModule::set_rate(agent.module_accessor, 3.625);
                                MotionModule::set_rate_partial(agent.module_accessor, *FIGHTER_MOTION_PART_SET_KIND_UPPER_BODY, 3.625);
                            }
                            else {
                            if macros::is_excute(agent) {
                                MotionModule::set_rate(agent.module_accessor, 3.23);
                                MotionModule::set_rate_partial(agent.module_accessor, *FIGHTER_MOTION_PART_SET_KIND_UPPER_BODY, 3.23);
                            }
                        }
                    }
                    frame(agent.lua_state_agent, 22.0);
                    if macros::is_excute(agent) {
                        WorkModule::off_flag(agent.module_accessor, *FIGHTER_STATUS_ATTACK_AIR_FLAG_ENABLE_LANDING);
                    }
                    frame(agent.lua_state_agent, 47.0);
                    if macros::is_excute(agent) {
                        MotionModule::set_rate(agent.module_accessor, 1);
                        MotionModule::set_rate_partial(agent.module_accessor, *FIGHTER_MOTION_PART_SET_KIND_UPPER_BODY, 1);
                    }
                }
            }
        }
    }
}
}
}
}
}
}
}
}
}
}
}
}
}
}

unsafe extern "C" fn effect_attackairb(agent: &mut L2CAgentBase) {
    if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_JUMP_MINI_FRAME, 0)){
        frame(agent.lua_state_agent, 11.0);
        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_DIAMOND)){
            if macros::is_excute(agent) {
                macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_sword_flare_diamond"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1.25, true);
            }
            frame(agent.lua_state_agent, 12.0);
            if macros::is_excute(agent) {
                macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_slash_diamond"), Hash40::new("pickel_atk_slash_diamond"), Hash40::new("top"), -1, 7.7, -2, -177, 28, -100, 1.15, true, *EF_FLIP_YZ);
            }
            else {
            frame(agent.lua_state_agent, 0.0);
            if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_DIAMOND)){
                if macros::is_excute(agent) {
                    macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_pick_flare_diamond"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1, true);
                }
                frame(agent.lua_state_agent, 12.0);
                if macros::is_excute(agent) {
                    macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_pick_diamond"), Hash40::new("pickel_atk_pick_diamond"), Hash40::new("top"), 0, 9.7, -4, 180, 35, -100, 1, true, *EF_FLIP_YZ);
                    macros::LAST_EFFECT_SET_RATE(agent, 0.95);
                }
                else {
                if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_GOLD)){
                    if macros::is_excute(agent) {
                        macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_sword_flare_gold"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1.25, true);
                    }
                    frame(agent.lua_state_agent, 12.0);
                    if macros::is_excute(agent) {
                        macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_slash_gold"), Hash40::new("pickel_atk_slash_gold"), Hash40::new("top"), -1, 7.7, -2, -177, 28, -100, 1.15, true, *EF_FLIP_YZ);
                    }
                    else {
                    if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_GOLD)){
                        if macros::is_excute(agent) {
                            macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_pick_flare_gold"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1, true);
                        }
                        frame(agent.lua_state_agent, 12.0);
                        if macros::is_excute(agent) {
                            macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_pick_gold"), Hash40::new("pickel_atk_pick_gold"), Hash40::new("top"), 0, 9.7, -4, 180, 35, -100, 1, true, *EF_FLIP_YZ);
                            macros::LAST_EFFECT_SET_RATE(agent, 0.95);
                        }
                        else {
                        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_IRON)){
                            if macros::is_excute(agent) {
                                macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_sword_flare_iron"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1.25, true);
                            }
                            frame(agent.lua_state_agent, 12.0);
                            if macros::is_excute(agent) {
                                macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_slash_iron"), Hash40::new("pickel_atk_slash_iron"), Hash40::new("top"), -1, 7.7, -2, -177, 28, -100, 1.15, true, *EF_FLIP_YZ);
                            }
                            else {
                            if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_IRON)){
                                if macros::is_excute(agent) {
                                    macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_pick_flare_iron"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1, true);
                                }
                                frame(agent.lua_state_agent, 12.0);
                                if macros::is_excute(agent) {
                                    macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_pick_iron"), Hash40::new("pickel_atk_pick_iron"), Hash40::new("top"), 0, 9.7, -4, 180, 35, -100, 1, true, *EF_FLIP_YZ);
                                    macros::LAST_EFFECT_SET_RATE(agent, 0.95);
                                }
                                else {
                                if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_STONE)){
                                    if macros::is_excute(agent) {
                                        macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_sword_flare_stone"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1.25, true);
                                    }
                                    frame(agent.lua_state_agent, 12.0);
                                    if macros::is_excute(agent) {
                                        macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_slash_stone"), Hash40::new("pickel_atk_slash_stone"), Hash40::new("top"), -1, 7.7, -2, -177, 28, -100, 1.15, true, *EF_FLIP_YZ);
                                    }
                                    else {
                                    if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_STONE)){
                                        if macros::is_excute(agent) {
                                            macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_pick_flare_stone"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1, true);
                                        }
                                        frame(agent.lua_state_agent, 12.0);
                                        if macros::is_excute(agent) {
                                            macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_pick_stone"), Hash40::new("pickel_atk_pick_stone"), Hash40::new("top"), 0, 9.7, -4, 180, 35, -100, 1, true, *EF_FLIP_YZ);
                                            macros::LAST_EFFECT_SET_RATE(agent, 0.95);
                                        }
                                        else {
                                        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_WOOD)){
                                            if macros::is_excute(agent) {
                                                macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_sword_flare_wood"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1.25, true);
                                            }
                                            frame(agent.lua_state_agent, 12.0);
                                            if macros::is_excute(agent) {
                                                macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_slash_wood"), Hash40::new("pickel_atk_slash_wood"), Hash40::new("top"), -1, 7.7, -2, -177, 28, -100, 1.15, true, *EF_FLIP_YZ);
                                            }
                                        }
                                        if macros::is_excute(agent) {
                                            macros::LAST_EFFECT_SET_RATE(agent, 0.55);
                                        }
                                        frame(agent.lua_state_agent, 17.0);
                                        if macros::is_excute(agent) {
                                            macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_sword_flare_diamond"), false, true);
                                            macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_sword_flare_gold"), false, true);
                                            macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_sword_flare_iron"), false, true);
                                            macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_sword_flare_stone"), false, true);
                                            macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_sword_flare_wood"), false, true);
                                        }
                                        else {
                                        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_WOOD)){
                                            if macros::is_excute(agent) {
                                                macros::EFFECT_FOLLOW(agent, Hash40::new("pickel_pick_flare_wood"), Hash40::new("weaponr"), 0, 0, 0, 0, 0, 0, 1, true);
                                            }
                                            frame(agent.lua_state_agent, 12.0);
                                            if macros::is_excute(agent) {
                                                macros::EFFECT_FOLLOW_FLIP(agent, Hash40::new("pickel_atk_pick_wood"), Hash40::new("pickel_atk_pick_wood"), Hash40::new("top"), 0, 9.7, -4, 180, 35, -100, 1, true, *EF_FLIP_YZ);
                                                macros::LAST_EFFECT_SET_RATE(agent, 0.95);
                                            }
                                            else {
                                            if macros::is_excute(agent) {
                                                macros::EFFECT_FOLLOW_FLIP_ALPHA(agent, Hash40::new("sys_attack_arc_b"), Hash40::new("sys_attack_arc_b"), Hash40::new("top"), -2, 11.2, -3, 190, 15, -90, 0.6, true, *EF_FLIP_YZ, 0.06);
                                                macros::LAST_EFFECT_SET_COLOR(agent, 1, 1, 1);
                                                macros::LAST_EFFECT_SET_RATE(agent, 1);
                                            }
                                        }
                                    }
                                    frame(agent.lua_state_agent, 16.0);
                                    if macros::is_excute(agent) {
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_pick_flare_diamond"), false, true);
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_pick_flare_gold"), false, true);
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_pick_flare_iron"), false, true);
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_pick_flare_stone"), false, true);
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_pick_flare_wood"), false, true);
                                    }
                                    frame(agent.lua_state_agent, 17.0);
                                    if macros::is_excute(agent) {
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_atk_pick_diamond"), true, true);
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_atk_pick_gold"), true, true);
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_atk_pick_iron"), true, true);
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_atk_pick_stone"), true, true);
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("pickel_atk_pick_wood"), true, true);
                                        macros::EFFECT_OFF_KIND(agent, Hash40::new("sys_attack_arc_d"), true, true);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
}
}
}
}
}
}
}
}
}
}

unsafe extern "C" fn sound_attackairb(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 8.0);
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("se_pickel_attackair_b01"));
    }
}

unsafe extern "C" fn expression_attackairb(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 10.0);
    if macros::is_excute(agent) {
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_77_nohits"), 7, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_DIAMOND)){
        frame(agent.lua_state_agent, 12.0);
        if macros::is_excute(agent) {
            macros::RUMBLE_HIT(agent, Hash40::new("rbkind_77_attackm"), 0);
        }
        else {
        if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_GOLD)){
            frame(agent.lua_state_agent, 12.0);
            if macros::is_excute(agent) {
                macros::RUMBLE_HIT(agent, Hash40::new("rbkind_77_attacks"), 9);
            }
            else {
            if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_IRON)){
                frame(agent.lua_state_agent, 12.0);
                if macros::is_excute(agent) {
                    macros::RUMBLE_HIT(agent, Hash40::new("rbkind_77_attackm"), 6);
                }
                else {
                if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_STONE)){
                    frame(agent.lua_state_agent, 12.0);
                    if macros::is_excute(agent) {
                        macros::RUMBLE_HIT(agent, Hash40::new("rbkind_77_attacks"), 0);
                    }
                    else {
                    if(0x370870(*FIGHTER_PICKEL_INSTANCE_WORK_ID_INT_HAVE_CRAFT_WEAPON_MATERIAL_KIND, *FIGHTER_PICKEL_MATERIAL_KIND_WOOD)){
                        frame(agent.lua_state_agent, 12.0);
                        if macros::is_excute(agent) {
                            macros::RUMBLE_HIT(agent, Hash40::new("rbkind_77_attacks"), 8);
                        }
                        else {
                        frame(agent.lua_state_agent, 0.0);
                        if macros::is_excute(agent) {
                            macros::RUMBLE_HIT(agent, Hash40::new("rbkind_attacks"), 8);
                        }
                    }
                }
            }
        }
    }
}
}
}
}
}
}