#[acmd_script( agent = "ridley", script = "expression_visualscene04", category = ACMD_EXPRESSION, low_priority)]
unsafe fn expression_visualscene04(fighter: &mut L2CAgentBase) {
    frame(fighter.lua_state_agent, 4.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
        ControlModule::set_rumble(fighter.module_accessor);
        macros::RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_erase"), 0);
    }
    frame(fighter.lua_state_agent, 6.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 7, false);
        ControlModule::set_rumble(fighter.module_accessor);
        macros::RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_damage_lv2"), 7);
    }
    frame(fighter.lua_state_agent, 14.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 11, false);
        ControlModule::set_rumble(fighter.module_accessor);
        macros::RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_damage_lv2"), 11);
    }
    frame(fighter.lua_state_agent, 26.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 5, false);
        ControlModule::set_rumble(fighter.module_accessor);
        macros::RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_damage_lv2"), 5);
    }
    frame(fighter.lua_state_agent, 32.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 13, false);
        ControlModule::set_rumble(fighter.module_accessor);
        macros::RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_damage_lv2"), 13);
    }
    frame(fighter.lua_state_agent, 46.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 0, false);
        ControlModule::set_rumble(fighter.module_accessor);
        macros::RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_damage_lv2"), 0);
    }
}