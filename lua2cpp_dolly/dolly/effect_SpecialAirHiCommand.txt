frame(Frame=6)
for(4 Iterations){
	0x24ffc0()
	0x24ffc0()
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x24ffc0()){
		EFFECT(hash40("sys_smash_flash"), hash40("top"), 0, 20, 0, 0, 0, 0, 0.7, 0, 0, 0, 0, 0, 0, false)
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		LAST_EFFECT_SET_RATE(1.3)
		0x24ffc0()
	}
	frame(Frame=9)
	0x24ffc0()
	0x24ffc0()
	get_value_float(SO_VAR_FLOAT_LR)
	0x24ffc0(272, 0)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			EFFECT_FOLLOW_ALPHA(0x133590db0b, hash40("throw"), 0, 2.5, 0, 0, 0, 0, 1, true, 0.8)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 0)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.146, 0.205, 0.333)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 1)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.245, 0.325, 0.297)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 2)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.212, 0.365, 0.332)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 3)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.389, 0.342, 0.25)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 4)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.372, 0.545, 0.579)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 5)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.33, 0.458, 0.611)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 6)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.079, 0.079, 0.079)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 7)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.627, 0.627, 0.627)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(0)
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x24ffc0()){
		EFFECT_FOLLOW_ALPHA(0x13ac998ab1, hash40("throw"), 0, 2.5, 0, 0, 0, 0, 1, true, 0.8)
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 0)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.587, 0.126, 0.169)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 1)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.109, 0.122, 0.27)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 2)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.317, 0.14, 0.131)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 3)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.17, 0.317, 0.151)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 4)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.524, 0.087, 0.087)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 5)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.079, 0.079, 0.079)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 6)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.079, 0.079, 0.079)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 7)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.444, 0.329, 0.145)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(0)
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x24ffc0()){
		EFFECT_FOLLOW_ALPHA(0x0c90312c0c, hash40("throw"), 0, 2.5, 0, 0, 0, 0, 1, true, 0.8)
	}
	else{
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			EFFECT_FOLLOW_ALPHA(0x135ca1f812, hash40("throw"), 0, 2.5, 0, 0, 0, 0, 1, true, 0.8)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 0)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.146, 0.205, 0.333)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 1)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.245, 0.325, 0.297)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 2)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.212, 0.365, 0.332)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 3)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.389, 0.342, 0.25)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 4)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.372, 0.545, 0.579)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 5)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.33, 0.458, 0.611)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 6)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.079, 0.079, 0.079)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 7)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.627, 0.627, 0.627)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(0)
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x24ffc0()){
		EFFECT_FOLLOW_ALPHA(0x13c5a8a9a8, hash40("throw"), 0, 2.5, 0, 0, 0, 0, 1, true, 0.8)
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 0)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.587, 0.126, 0.169)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 1)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.109, 0.122, 0.27)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 2)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.317, 0.14, 0.131)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 3)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.17, 0.317, 0.151)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 4)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.524, 0.087, 0.087)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 5)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.079, 0.079, 0.079)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 6)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.079, 0.079, 0.079)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 7)
	0x24ffc0()
	0x24ffc0()
	if(0x24ffc0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x24ffc0()){
			LAST_EFFECT_SET_COLOR(0.444, 0.329, 0.145)
			0x24ffc0()
			0x24ffc0()
			0x24ffc0()
		}
	}
	0x24ffc0(0)
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x24ffc0()){
		EFFECT_FOLLOW_ALPHA(0x0c6a3e116f, hash40("throw"), 0, 2.5, 0, 0, 0, 0, 1, true, 0.8)
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		EffectModule::enable_sync_init_pos_last()
	}
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x24ffc0()){
		COL_PRI(200)
		0x24ffc0()
		FLASH(1, 1, 1, 0.4)
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		FLASH_SET_DIRECTION(1, 0, 0)
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
	}
	wait(Frames=2)
	0x24ffc0()
	0x24ffc0()
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x24ffc0()){
		FLASH(0.05, 0.1, 0.6, 0.6)
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
		FLASH_SET_DIRECTION(1, 0, 0)
		0x24ffc0()
		0x24ffc0()
		0x24ffc0()
	}
	wait(Frames=2)
	0x24ffc0()
	0x24ffc0()
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x24ffc0()){
		COL_NORMAL()
	}
	wait(Frames=1)
	0x24ffc0()
	0x24ffc0()
}
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x24ffc0()){
	FLASH(1, 1, 1, 0.4)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	FLASH_SET_DIRECTION(1, 0, 0)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
}
wait(Frames=2)
0x24ffc0()
0x24ffc0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x24ffc0()){
	COL_NORMAL()
}
frame(Frame=32)
0x24ffc0()
0x24ffc0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x24ffc0()){
	EFFECT_FOLLOW_ALPHA(hash40("sys_attack_impact"), hash40("top"), 0, 8.5, 1, 0, 0, 0, 2, true, 0.6)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	FLASH(0.05, 0.1, 0.6, 0.6)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	FLASH_SET_DIRECTION(1, 0, 0)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
}
wait(Frames=2)
0x24ffc0()
0x24ffc0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x24ffc0()){
	COL_NORMAL()
}
frame(Frame=35)
0x24ffc0()
0x24ffc0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x24ffc0()){
	EFFECT_OFF_KIND(0x0c6a3e116f, false, true)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	EFFECT_OFF_KIND(0x135ca1f812, false, true)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	EFFECT_OFF_KIND(0x13c5a8a9a8, false, true)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	EFFECT_OFF_KIND(0x0c90312c0c, false, true)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	EFFECT_OFF_KIND(0x133590db0b, false, true)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
	EFFECT_OFF_KIND(0x13ac998ab1, false, true)
	0x24ffc0()
	0x24ffc0()
	0x24ffc0()
}
