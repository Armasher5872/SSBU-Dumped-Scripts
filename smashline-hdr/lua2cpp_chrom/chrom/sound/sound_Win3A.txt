unsafe extern "C" fn sound_win3a(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    GET_VOICE_REGION(agent);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_DEFAULT)){
        frame(lua_state, 15.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_smash_s01"));
        }
        frame(lua_state, 40.0);
        if is_excute(agent) {
            PLAY_SE_NO_3D(agent, Hash40::new("vc_chrom_win03"));
        }
        frame(lua_state, 48.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win01"));
        }
        frame(lua_state, 80.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win03"));
        }
    }
    else{
    GET_VOICE_REGION(agent);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_US_EN)){
        frame(lua_state, 15.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_smash_s01"));
        }
        frame(lua_state, 48.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win01"));
        }
        frame(lua_state, 60.0);
        if is_excute(agent) {
            PLAY_SE_NO_3D(agent, Hash40::new("vc_chrom_win03"));
        }
        frame(lua_state, 80.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win03"));
        }
    }
    else{
    GET_VOICE_REGION(agent);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_US_FR)){
        frame(lua_state, 15.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_smash_s01"));
        }
        frame(lua_state, 48.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win01"));
        }
        frame(lua_state, 60.0);
        if is_excute(agent) {
            PLAY_SE_NO_3D(agent, Hash40::new("vc_chrom_win03"));
        }
        frame(lua_state, 80.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win03"));
        }
    }
    else{
    GET_VOICE_REGION(agent);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_EU_EN)){
        frame(lua_state, 15.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_smash_s01"));
        }
        frame(lua_state, 48.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win01"));
        }
        frame(lua_state, 60.0);
        if is_excute(agent) {
            PLAY_SE_NO_3D(agent, Hash40::new("vc_chrom_win03"));
        }
        frame(lua_state, 80.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win03"));
        }
    }
    else{
    GET_VOICE_REGION(agent);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_EU_FR)){
        frame(lua_state, 15.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_smash_s01"));
        }
        frame(lua_state, 48.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win01"));
        }
        frame(lua_state, 60.0);
        if is_excute(agent) {
            PLAY_SE_NO_3D(agent, Hash40::new("vc_chrom_win03"));
        }
        frame(lua_state, 80.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win03"));
        }
    }
    else{
    GET_VOICE_REGION(agent);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *VOICE_EU_IT)){
        frame(lua_state, 15.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_smash_s01"));
        }
        frame(lua_state, 48.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win01"));
        }
        frame(lua_state, 60.0);
        if is_excute(agent) {
            PLAY_SE_NO_3D(agent, Hash40::new("vc_chrom_win03"));
        }
        frame(lua_state, 80.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_chrom_win03"));
        }
    }
}
}
}
}
}
}