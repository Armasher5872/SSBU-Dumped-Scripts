unsafe extern "C" fn game_throwcommand(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    is_vr_mode();
    if(0x3cfb70(false, false)){
        methodlib::L2CValue::L2CValue(void*)();
    }
    else{
    methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const();
is_one_on_one_including_thrown();
if(0x3cfb70(false, true)){
    if is_excute(agent) {
        methodlib::L2CValue::L2CValue(void*)();
    }
    else{
    methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
}
methodlib::L2CValue::as_pointer()const();
check_disabled_motion_camera_of_scale();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const();
check_disabled_motion_camera_of_stage();
if WorkModule::is_flag(boma, *FIGHTER_DEMON_INSTANCE_WORK_ID_FLAG_ENABLE_THROW_MOTION_CAMERA) {
if is_excute(agent) {
    CHECK_VALID_START_CAMERA(agent, 0, 7, 0, 50, 30, 0, true);
}
}
if !WorkModule::is_flag(boma, *FIGHTER_DEMON_INSTANCE_WORK_ID_FLAG_DISABLE_THROW_MOTION_CAMERA) {
if !WorkModule::is_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
    if is_excute(agent) {
        REQ_MOTION_CAMERA(agent, 0x163d9703b0, false);
    }
}
}
if is_excute(agent) {
PostureModule::scale(boma, 7, 0);
0x3cfb70(-1037516665, 1.5);
CAM_ZOOM_IN_arg5(0, 0);
}
frame(lua_state, 10.0);
if is_excute(agent) {
REVERSE_LR(agent);
ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, 0, 1.0, 165, 150, 0, 65, 0.0, 1.0, *ATTACK_LR_CHECK_B, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_CATCH, 0, 3.0, 361, 100, 0, 40, 0.0, 1.0, *ATTACK_LR_CHECK_B, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
}
frame(lua_state, 32.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 80, 0, 50, 5.0, 0.0, 8.0, -3.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_DEMON_THROWCOMMAND, *ATTACK_REGION_KICK);
AttackModule::set_catch_only_all(boma, true, false);
}
frame(lua_state, 34.0);
if is_excute(agent) {
AttackModule::clear_all(boma);
}
frame(lua_state, 80.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 13.0, 19, 50, 0, 45, 6.0, 0.0, 7.5, -14.0, Some(0.0), Some(6.0), Some(-14.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_DEMON_THROWCOMMAND, *ATTACK_REGION_KICK);
ATTACK(agent, 1, 0, Hash40::new("top"), 13.0, 19, 50, 0, 45, 4.0, 0.0, 8.0, -6.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_DEMON_THROWCOMMAND, *ATTACK_REGION_KICK);
AttackModule::set_catch_only_all(boma, true, false);
}
if !WorkModule::is_flag(boma, *FIGHTER_DEMON_STATUS_THROW_COMMAND_FLAG_USE_OTHER_PARAM) {
if is_excute(agent) {
    CHECK_FINISH_CAMERA(agent, 18, 2);
}
else{
if is_excute(agent) {
    CHECK_FINISH_CAMERA(agent, 18, 15);
}
}
}
if is_excute(agent) {
lua_bind::FighterCutInManager::set_throw_finish_zoom_rate(singletons::FighterCutInManager(), 1.3);
lua_bind::FighterCutInManager::set_throw_finish_offset(singletons::FighterCutInManager(), Vector3f{x: 9.0, y: 2.0, z: 0.0});
}
frame(lua_state, 81.0);
if is_excute(agent) {
AttackModule::clear_all(boma);
let target = WorkModule::get_int64(boma, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_OBJECT);
        let target_group = WorkModule::get_int64(boma, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_HIT_GROUP);
        let target_no = WorkModule::get_int64(boma, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_HIT_NO);
        ATK_HIT_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, Hash40::new("throw"), target, target_group, target_no);
CAM_ZOOM_OUT(agent);
}
}

unsafe extern "C" fn effect_throwcommand(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        FOOT_EFFECT(agent, Hash40::new("sys_run_smoke"), Hash40::new("top"), -3.5, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, false);
        EFFECT_FOLLOW_NO_SCALE(agent, Hash40::new("sys_catch"), Hash40::new("throw"), 0, 0, 0, 0, 0, 0, 1, true);
        EFFECT_FOLLOW(agent, Hash40::new("demon_devil_aura"), Hash40::new("handl"), 1, 0, 0, 0, 0, 0, 0.5, true);
        LAST_EFFECT_SET_RATE(agent, 1.5);
        EFFECT_FOLLOW(agent, Hash40::new("demon_devil_aura"), Hash40::new("handr"), 1, 0, 0, 0, 0, 0, 0.7, true);
        LAST_EFFECT_SET_RATE(agent, 1.5);
    }
    frame(lua_state, 13.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("demon_devil_aura"), false, false);
    }
    frame(lua_state, 30.0);
    if is_excute(agent) {
        FOOT_EFFECT(agent, Hash40::new("sys_run_smoke"), Hash40::new("top"), -2.9, 0, -1, 0, 180, 0, 1.2, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 32.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("demon_hit_normal_m"), Hash40::new("top"), 3, 11, -4, 0, 0, 0, 1, false);
        EFFECT_FOLLOW(agent, Hash40::new("demon_hit_jigokumon"), Hash40::new("top"), 3, 11, -4, -120, 0, 0, 1, false);
    }
    frame(lua_state, 58.0);
    if is_excute(agent) {
        FOOT_EFFECT(agent, Hash40::new("sys_down_smoke"), Hash40::new("top"), 2.7, 0, -5.5, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 75.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("demon_hit_normal_m"), Hash40::new("top"), 1, 9, -13, 0, 0, 0, 1, false);
        EFFECT_FOLLOW(agent, Hash40::new("demon_hit_jigokumon"), Hash40::new("top"), 1, 9, -13, -170, 0, 0, 1, false);
    }
    frame(lua_state, 78.0);
    if is_excute(agent) {
        LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), 2, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, false);
    }
}

unsafe extern "C" fn sound_throwcommand(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if FighterCutInManager::is_play_motion_camera(boma) {
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_demon_throwcommand_01"));
        }
        else{
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("se_demon_throwcommand_01_low"));
        }
    }
}
frame(lua_state, 5.0);
if is_excute(agent) {
    PLAY_SE(agent, Hash40::new("vc_demon_attack01"));
}
frame(lua_state, 27.0);
if is_excute(agent) {
    PLAY_SE(agent, Hash40::new("se_demon_throwcommand_swing01"));
}
frame(lua_state, 30.0);
if is_excute(agent) {
    PLAY_SE(agent, Hash40::new("vc_demon_attack05"));
}
frame(lua_state, 58.0);
if is_excute(agent) {
    PLAY_SE(agent, Hash40::new("se_demon_down"));
}
frame(lua_state, 74.0);
if is_excute(agent) {
    PLAY_SE(agent, Hash40::new("se_demon_throwcommand_swing02"));
}
frame(lua_state, 77.0);
if is_excute(agent) {
    PLAY_SE(agent, Hash40::new("vc_demon_attack03"));
}
}

unsafe extern "C" fn expression_throwcommand(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(lua_state, 4.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitl"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 26.0);
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_L, 4);
    }
    frame(lua_state, 32.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_80_attackl"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 76.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_80_attackm"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 99.0);
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 3);
    }
}