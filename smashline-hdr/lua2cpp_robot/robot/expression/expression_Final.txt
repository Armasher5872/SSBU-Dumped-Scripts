#[acmd_script( agent = "robot", script = "expression_final", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_final(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    if is_excute(fighter) {
        WorkModule::on_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_BACKSHIELD_INVISIBLE);
        ItemModule::set_have_item_visibility(boma, false);
        QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
    }
    frame(lua_state, 2.0);
    for _ in 0..5 {
    if is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beamss"), 0, false);
        ControlModule::set_rumble(boma);
    }
    wait(lua_state, 11.0);
}
frame(lua_state, 127.0);
for _ in 0..5 {
if is_excute(fighter) {
    methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beamss"), 0, false);
    ControlModule::set_rumble(boma);
}
wait(lua_state, 11.0);
}
frame(lua_state, 200.0);
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 0, false);
ControlModule::set_rumble(boma);
}
frame(lua_state, 201.0);
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionm"), 10, false);
ControlModule::set_rumble(boma);
}
frame(lua_state, 212.0);
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_loopattack"), 0, true);
ControlModule::set_rumble(boma);
}
}