unsafe extern "C" fn game_finalattack(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::WHOLE_HIT(agent, *HIT_STATUS_XLU);
    }
    frame(agent.lua_state_agent, 1.0);
    if macros::is_excute(agent) {
        macros::CAM_ZOOM_OUT(agent);
    }
    WorkModule::is_flag(agent.module_accessor, *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        WorkModule::is_flag(agent.module_accessor, *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_DEMON_DOJO_ZOOM);
        if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
            if get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
                if macros::is_excute(agent) {
                    PostureModule::scale(agent.module_accessor, 300, 0);
                    0x1462c0(0, 2.5);
                    CAM_ZOOM_IN_FINAL_arg13(-15, 10, 0, -5, 70, true, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0, 20, 5);
                }
                else {
                if get_value_float(agent.lua_state_agent, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID) < 0.0 {
                    if macros::is_excute(agent) {
                        PostureModule::scale(agent.module_accessor, 300, 0);
                        0x1462c0(0, 2.5);
                        CAM_ZOOM_IN_FINAL_arg13(-30, 10, -20, -5, 70, true, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0, 20, 5);
                    }
                    else {
                    if macros::is_excute(agent) {
                        CAM_ZOOM_IN_FINAL_arg13(300, 0, 2.5, 15, 10, 0, -5, 70, true, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0, -15, 5);
                    }
                    else {
                    if macros::is_excute(agent) {
                        CAM_ZOOM_IN_FINAL_arg13(300, 0, 2.5, 30, 10, 20, -5, 70, true, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0, -15, 5);
                    }
                }
            }
        }
    }
}
}
}
frame(agent.lua_state_agent, 2.0);
for _ in 0..47 {
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 1.0, 315, 100, 50, 0, 10.0, 0.0, 20.0, 8.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
macros::ATTACK(agent, 1, 0, Hash40::new("top"), 1.0, 225, 100, 50, 0, 10.0, 0.0, 20.0, 30.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
macros::ATTACK(agent, 2, 0, Hash40::new("top"), 1.0, 45, 100, 50, 0, 10.0, 0.0, 0.0, 8.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
macros::ATTACK(agent, 3, 0, Hash40::new("top"), 1.0, 135, 100, 50, 0, 10.0, 0.0, 0.0, 30.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
AttackModule::set_no_uniq_effect_all(agent.module_accessor, true, false);
}
wait(agent.lua_state_agent, 1.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
wait(agent.lua_state_agent, 2.0);
}
frame(agent.lua_state_agent, 143.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.0, 40, 100, 0, 30, 20.0, 0.0, 10.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
WorkModule::on_flag(agent.module_accessor, *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
WorkModule::set_int64(agent.module_accessor, hash40("fall_damage") as i64, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
}
frame(agent.lua_state_agent, 144.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
WorkModule::off_flag(agent.module_accessor, *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
}
frame(agent.lua_state_agent, 149.0);
if macros::is_excute(agent) {
macros::CAM_ZOOM_OUT(agent);
macros::WHOLE_HIT(agent, *HIT_STATUS_XLU);
AttackModule::clear_all(agent.module_accessor);
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 68, 120, 0, 80, 23.0, 0.0, 14.0, 18.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
AttackModule::set_force_reaction(agent.module_accessor, 0, true, false);
WorkModule::on_flag(agent.module_accessor, *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_ATTACK_END_HIT);
AttackModule::set_final_finish_cut_in(agent.module_accessor, 0, true, false, -1, false);
}
WorkModule::is_flag(agent.module_accessor, *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
if macros::is_excute(agent) {
PostureModule::scale(agent.module_accessor, 2, 0);
0x1462c0(-1186192792, 2.5);
CAM_ZOOM_IN_arg5(0, 0);
}
}
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
if macros::is_excute(agent) {
camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, -10, 10);
}
else {
if macros::is_excute(agent) {
camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 10, 10);
}
}
}
frame(agent.lua_state_agent, 151.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 176.0);
if macros::is_excute(agent) {
macros::CAM_ZOOM_OUT(agent);
}
}

unsafe extern "C" fn effect_finalattack(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::FT_REMOVE_FINAL_AURA(agent, false);
        macros::EFFECT_STENCIL_OFF(agent);
        macros::EFFECT(agent, Hash40::new("littlemac_final_rash"), Hash40::new("top"), 0, 9, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, true);
    }
    for _ in 0..6 {
    if macros::is_excute(agent) {
        macros::FOOT_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), 3, 0, 0, 0, 0, 0, 0.6, 3, 0, 5, 0, 0, 0, false);
        macros::EFFECT(agent, Hash40::new("littlemac_final_rashhit"), Hash40::new("top"), 0, 11, 18, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, true);
    }
    wait(agent.lua_state_agent, 12.0);
}
if macros::is_excute(agent) {
    macros::EFFECT(agent, Hash40::new("littlemac_final_rash"), Hash40::new("top"), 0, 12, 4, 0, 0, 0, 1.2, 0, 0, 0, 0, 0, 0, true);
}
for _ in 0..6 {
if macros::is_excute(agent) {
    macros::FOOT_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), 3, 0, 0, 0, 0, 0, 0.8, 3, 0, 5, 0, 0, 0, false);
    macros::EFFECT(agent, Hash40::new("littlemac_final_rashhit"), Hash40::new("top"), 0, 11, 18, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, true);
}
wait(agent.lua_state_agent, 12.0);
}
frame(agent.lua_state_agent, 148.0);
if macros::is_excute(agent) {
macros::LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), 8, 0, 0, 0, 0, 0, 1.3, 0, 0, 0, 0, 0, 0, false);
macros::LAST_EFFECT_SET_RATE(agent, 0.2);
macros::EFFECT_FLW_UNSYNC_VIS(agent, Hash40::new("littlemac_counter_arc"), Hash40::new("top"), -3, 14, -0.5, 10, -40, 70, 1.5, true);
macros::EFFECT(agent, Hash40::new("littlemac_final_lasthit"), Hash40::new("top"), 0, 11, 21, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, true);
}
}

unsafe extern "C" fn sound_finalattack(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 1.0);
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("vc_littlemac_final"));
        macros::PLAY_STATUS(agent, Hash40::new("se_littlemac_final04"));
    }
    for _ in 0..9 {
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("se_littlemac_final_swing01"));
    }
    wait(agent.lua_state_agent, 4.0);
}
for _ in 0..9 {
if macros::is_excute(agent) {
    macros::PLAY_SE(agent, Hash40::new("se_littlemac_final_swing02"));
}
wait(agent.lua_state_agent, 4.0);
}
for _ in 0..9 {
if macros::is_excute(agent) {
macros::PLAY_SE(agent, Hash40::new("se_littlemac_final_swing_giga01"));
}
wait(agent.lua_state_agent, 4.0);
}
for _ in 0..9 {
if macros::is_excute(agent) {
macros::PLAY_SE(agent, Hash40::new("se_littlemac_final_swing_giga02"));
}
wait(agent.lua_state_agent, 4.0);
}
frame(agent.lua_state_agent, 147.0);
if macros::is_excute(agent) {
sound!(agent, *MA_MSC_CMD_SOUND_STOP_SE_STATUS);
macros::PLAY_SE(agent, Hash40::new("se_littlemac_final_swing_ll"));
}
}

unsafe extern "C" fn expression_finalattack(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 2.0);
    if macros::is_excute(agent) {
        macros::RUMBLE_HIT_STATUS(agent, Hash40::new("rbkind_spinattack"), 0);
    }
    frame(agent.lua_state_agent, 49.0);
    if macros::is_excute(agent) {
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(agent.lua_state_agent, 50.0);
    if macros::is_excute(agent) {
        macros::RUMBLE_HIT(agent, Hash40::new("rbkind_attackm"), 5);
    }
    frame(agent.lua_state_agent, 51.0);
    frame(agent.lua_state_agent, 90.0);
    if macros::is_excute(agent) {
        macros::RUMBLE_HIT(agent, Hash40::new("rbkind_attackl"), 5);
    }
    frame(agent.lua_state_agent, 149.0);
    if macros::is_excute(agent) {
        macros::RUMBLE_HIT(agent, Hash40::new("rbkind_attack_critical"), 0);
    }
}