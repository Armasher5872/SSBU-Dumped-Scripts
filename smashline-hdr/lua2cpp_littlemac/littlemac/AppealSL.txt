unsafe extern "C" fn effect_appealsl(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 24.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("littlemac_appeal_s_left"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1, true);
        LAST_EFFECT_SET_OFFSET_TO_CAMERA_FLAT(agent, -0.08);
    }
}

unsafe extern "C" fn sound_appealsl(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    IS_RANDOM(agent, 10);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        frame(lua_state, 1.0);
        if is_excute(agent) {
            PLAY_SE(agent, Hash40::new("vc_littlemac_appeal05"));
        }
    }
    frame(lua_state, 25.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_littlemac_appeal_s01"));
    }
    frame(lua_state, 63.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_littlemac_appeal_s02"));
    }
    else {
    frame(lua_state, 25.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_littlemac_appeal_s01"));
    }
}
frame(lua_state, 63.0);
if is_excute(agent) {
    PLAY_SE(agent, Hash40::new("se_littlemac_appeal_s02"));
}
frame(lua_state, 65.0);
if is_excute(agent) {
    PLAY_SE(agent, Hash40::new("vc_littlemac_appeal02"));
}
}

unsafe extern "C" fn expression_appealsl(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(lua_state, 30.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_grapple"), 4, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}