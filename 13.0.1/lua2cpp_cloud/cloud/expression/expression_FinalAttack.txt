if(is_excute){
	ItemModule::set_have_item_visibility(false)
}
WorkModule::is_flag(FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT)
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
	frame(Frame=7)
	if(is_excute){
		RUMBLE_HIT(hash40("rbkind_slashm"), 12)
	}
}
frame(Frame=10)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_XL)
}
frame(Frame=19)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 12)
}
frame(Frame=32)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=49)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=50)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_L)
}
frame(Frame=74)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 14)
}
frame(Frame=75)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_L)
}
frame(Frame=88)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=105)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=110)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_L)
}
frame(Frame=125)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=143)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=160)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_XL)
}
frame(Frame=161)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=186)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 8)
}
frame(Frame=195)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashs"), 8)
}
frame(Frame=200)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_M)
}
frame(Frame=203)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashs"), 0)
}
frame(Frame=214)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashs"), 0)
}
frame(Frame=228)
if(is_excute){
	methodlib::L2CValue::as_hash()const(hash40("rbkind_spinattack"), 0, true)
	ControlModule::set_rumble()
}
frame(Frame=250)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_L)
}
frame(Frame=262)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_L)
}
frame(Frame=271)
if(is_excute){
	methodlib::L2CValue::as_hash()const(hash40("rbkind_erase"), 0, false)
	ControlModule::set_rumble()
}
frame(Frame=274)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_L)
}
frame(Frame=285)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashll"), 0)
}
else{
	frame(Frame=0)
	if(is_excute){
		RUMBLE_HIT(hash40("rbkind_slashm"), 12)
	}
}
frame(Frame=10)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_L)
}
frame(Frame=19)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 12)
}
frame(Frame=32)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=49)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=50)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_M)
}
frame(Frame=74)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 14)
}
frame(Frame=75)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_M)
}
frame(Frame=88)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=105)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=110)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_M)
}
frame(Frame=125)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=143)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=160)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_L)
}
frame(Frame=161)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
}
frame(Frame=186)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashm"), 8)
}
frame(Frame=195)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashs"), 8)
}
frame(Frame=200)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_M)
}
frame(Frame=203)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashs"), 10)
}
frame(Frame=214)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashs"), 0)
}
frame(Frame=228)
if(is_excute){
	methodlib::L2CValue::as_hash()const(hash40("rbkind_spinattack"), 0, true)
	ControlModule::set_rumble()
}
frame(Frame=250)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_S)
}
frame(Frame=262)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_S)
}
frame(Frame=271)
if(is_excute){
	methodlib::L2CValue::as_hash()const(hash40("rbkind_erase"), 0, false)
	ControlModule::set_rumble()
}
frame(Frame=274)
if(is_excute){
	QUAKE(CAMERA_QUAKE_KIND_S)
}
frame(Frame=285)
if(is_excute){
	RUMBLE_HIT(hash40("rbkind_slashll"), 0)
}
