#[acmd_script( agent = "cloud", script = "game_finalattack", category = ACMD_GAME, low_priority )]
unsafe fn game_finalattack(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::WHOLE_HIT(agent, *HIT_STATUS_XLU);
        WorkModule::off_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_DISP_WINDOW);
    }
    frame(agent.lua_state_agent, 6.0);
    WorkModule::is_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        if macros::is_excute(agent) {
            macros::CAM_ZOOM_OUT(agent);
        }
    }
    if get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if macros::is_excute(agent) {
            PostureModule::scale(agent.module_accessor, 220, 0);
            0x1801b0(0, 2.8);
            macros::CAM_ZOOM_IN_FINAL(agent, 20, -10, -20, 20, 160, true, *FIGHTER_CLOUD_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0);
        }
        else{
        if macros::is_excute(agent) {
            PostureModule::scale(agent.module_accessor, 220, 0);
            0x1801b0(0, 2.4);
            macros::CAM_ZOOM_IN_FINAL(agent, -20, -10, 20, 20, 160, true, *FIGHTER_CLOUD_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0);
        }
    }
}
frame(agent.lua_state_agent, 7.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 8.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 19.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 20.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 32.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 33.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 49.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_02, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 50.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 74.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 75.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 88.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 89.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 105.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 106.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 125.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 126.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 143.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 144.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 161.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_02, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 162.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 186.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 187.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 195.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 196.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 203.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 204.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 214.0);
if macros::is_excute(agent) {
    macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_02, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(agent.module_accessor, true, false);
    WorkModule::on_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
    WorkModule::set_int64(agent.module_accessor, hash40("fall_damage") as i64, *FIGHTER_CLOUD_STATUS_FINAL_WORK_INT_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
}
frame(agent.lua_state_agent, 216.0);
if macros::is_excute(agent) {
    AttackModule::clear_all(agent.module_accessor);
    WorkModule::off_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
    notify_event_msc_cmd!(agent, Hash40::new_raw(0x296be39a69), 8, 70);
}
frame(agent.lua_state_agent, 217.0);
WorkModule::is_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
    if macros::is_excute(agent) {
        macros::CAM_ZOOM_OUT(agent);
    }
}
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
    if macros::is_excute(agent) {
        PostureModule::scale(agent.module_accessor, 30, 0);
        0x1801b0(0, 2.4);
        CAM_ZOOM_IN_arg6(0.6, -0.6, true);
        camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 12);
    }
    else{
    if macros::is_excute(agent) {
        PostureModule::scale(agent.module_accessor, 30, 0);
        0x1801b0(0, 2);
        CAM_ZOOM_IN_arg6(0.2, 0.6, true);
        camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 12);
    }
}
}
frame(agent.lua_state_agent, 220.0);
if macros::is_excute(agent) {
notify_event_msc_cmd!(agent, Hash40::new_raw(0x348e125d20), 0x14d842c3f5, true, true);
notify_event_msc_cmd!(agent, Hash40::new_raw(0x348e125d20), 0x10cf1285a2, true, true);
}
frame(agent.lua_state_agent, 285.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 10.0, 0.0, 5.0, 12.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_03, *ATTACK_REGION_NONE);
macros::ATTACK(agent, 1, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 12.0, 0.0, 5.0, 24.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_03, *ATTACK_REGION_NONE);
macros::ATTACK(agent, 2, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 14.0, 0.0, 5.0, 38.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_03, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
WorkModule::on_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_END_HIT);
WorkModule::on_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_FALL_START);
}
WorkModule::is_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
if macros::is_excute(agent) {
    macros::CAM_ZOOM_OUT(agent);
    camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
    camera!(agent, *MA_MSC_CMD_CAMERA_CAM_RECT, 0, 0, 10, 0);
    CAM_ZOOM_IN_arg6(35, 0, 2.2, 0, 0, true);
}
}
}