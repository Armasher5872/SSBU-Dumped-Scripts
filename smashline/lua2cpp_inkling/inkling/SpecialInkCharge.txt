unsafe extern "C" fn game_specialinkcharge(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        WorkModule::on_flag(agent.module_accessor, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_NO_FLIP_SQUID);
    }
    if !WorkModule::is_flag(agent.module_accessor, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID) {
        if macros::is_excute(agent) {
            ArticleModule::generate_article(agent.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false, -1);
        }
    }
    let motion = MotionModule::motion_kind(agent.module_accessor);
    let frame = MotionModule::frame(agent.module_accessor);
    let rate = MotionModule::rate(agent.module_accessor);
    ArticleModule::change_motion(agent.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new_raw(motion), false, -1.0);
    if macros::is_excute(agent) {
        ArticleModule::set_frame(agent.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, frame);
        ArticleModule::set_rate(agent.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, rate);
        ArticleModule::set_visibility_whole(agent.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
        WorkModule::on_flag(agent.module_accessor, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID);
        let status = StatusModule::status_kind(agent.module_accessor);
        if status != *FIGHTER_STATUS_KIND_REBIRTH {
            WorkModule::on_flag(agent.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_FORCE_LOUPE);
        }
    }
    get_value_float(0, *SO_VAR_FLOAT_LR);
    if(0x13d500(0, 0)){
        if macros::is_excute(agent) {
            ArticleModule::change_motion(agent.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("special_ink_charge_l"), false, -1.0);
            get_value_float(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, *SO_VAR_FLOAT_MOTION_RATE);
            macros::SET_RATE_ARTICLE(agent, 144);
        }
        else {
        if macros::is_excute(agent) {
            ArticleModule::change_motion(agent.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("special_ink_charge_r"), false, -1.0);
            get_value_float(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, *SO_VAR_FLOAT_MOTION_RATE);
            macros::SET_RATE_ARTICLE(agent, 208);
        }
    }
}
if macros::is_excute(agent) {
    VisibilityModule::set_whole(agent.module_accessor, false);
    macros::HIT_NODE(agent, Hash40::new("waist"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("tank"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("head"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("armr"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("arml"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("legr"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("legl"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("kneer"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("kneel"), *HIT_STATUS_OFF);
    macros::HIT_NODE(agent, Hash40::new("top"), *HIT_STATUS_NORMAL);
}
if macros::is_excute(agent) {
    ArticleModule::set_visibility_whole(agent.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, true, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
}
}

unsafe extern "C" fn effect_specialinkcharge(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::FOOT_EFFECT(agent, Hash40::new("null"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 0, 0, false);
    }
    wait(agent.lua_state_agent, 10.0);
}

unsafe extern "C" fn sound_specialinkcharge(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::PLAY_STATUS(agent, Hash40::new("se_inkling_special_n05"));
    }
}

unsafe extern "C" fn expression_specialinkcharge(agent: &mut L2CAgentBase) {
    wait_loop_sync_mot();
    ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_elecattacks"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_TOP);
}