if macros::is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
}frame(fighter.lua_state_agent, 2.0);
if macros::is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 3);
}frame(fighter.lua_state_agent, 5.0);
execute(5);
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("arml"), *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Z);
AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 2);
}frame(fighter.lua_state_agent, 10.0);
if macros::is_excute(fighter) {
ItemModule::set_have_item_visibility(fighter.module_accessor, false);
macros::QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitll"), 14, false);
ControlModule::set_rumble(fighter.module_accessor);
}frame(fighter.lua_state_agent, 12.0);
if macros::is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 6, true);
macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_slashl"), 0);
}frame(fighter.lua_state_agent, 26.0);
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitll"), 0, false);
ControlModule::set_rumble(fighter.module_accessor);
}frame(fighter.lua_state_agent, 28.0);
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("armr"), *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Y);
AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
}frame(fighter.lua_state_agent, 52.0);
if macros::is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 7);
}frame(fighter.lua_state_agent, 56.0);
if macros::is_excute(fighter) {
ItemModule::set_have_item_visibility(fighter.module_accessor, true);
}