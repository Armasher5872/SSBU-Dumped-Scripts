#[acmd_script( agent = "pacman", script = "expression_specialsdash", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_specialsdash(fighter: &mut L2CAgentBase) {
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("pizzapacman"), *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Z);
        AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
    }
    if macros::is_excute(fighter) {
        ItemModule::set_have_item_visibility(fighter.module_accessor, false);
        ItemModule::set_attach_item_visibility(fighter.module_accessor, false, *ATTACH_ITEM_GROUP_ALL);
        VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_none"));
        VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("pizza"), Hash40::new("pizza_normal"));
        macros::HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
        macros::HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
        macros::HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
        macros::HIT_NODE(fighter, Hash40::new("handr"), *HIT_STATUS_OFF);
        macros::HIT_NODE(fighter, Hash40::new("handl"), *HIT_STATUS_OFF);
        macros::HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
        macros::HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
        macros::HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
        macros::HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
        macros::HIT_NODE(fighter, Hash40::new("pizzapacman"), *HIT_STATUS_NORMAL);
    }
    frame(fighter.lua_state_agent, 1.0);
    if macros::is_excute(fighter) {
        macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
        ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_55_pizzadash"), 5, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(fighter.lua_state_agent, 8.0);
    if macros::is_excute(fighter) {
        ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_55_pizzadash"), 5, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(fighter.lua_state_agent, 15.0);
    if macros::is_excute(fighter) {
        ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_55_pizzadash"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}