frame(fighter.lua_state_agent, 3.0);
if macros::is_excute(fighter) {
	FighterAreaModuleImpl::enable_fix_jostle_area_xy(fighter.module_accessor, 3, 3, 6, 4);
}
frame(fighter.lua_state_agent, 9.0);
if macros::is_excute(fighter) {
	macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 0.0, 350, 100, 40, 0, 3.0, 0.0, 4.0, 3.0, Some(0.0), Some(9.0), Some(3.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 0, 0.0, 2, false, false, true, true, false, COLLISION_SITUATION_MASK_GA_d, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
}
frame(fighter.lua_state_agent, 10.0);
if macros::is_excute(fighter) {
	macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 0.0, 350, 100, 15, 0, 3.0, 0.0, 6.0, 3.0, Some(0.0), Some(9.0), Some(3.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, true, true, false, COLLISION_SITUATION_MASK_GA_d, *COLLISION_CATEGORY_MASK_NO_STAGE, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
}
frame(fighter.lua_state_agent, 12.0);
if macros::is_excute(fighter) {
	GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ true);
}
frame(fighter.lua_state_agent, 13.0);
if macros::is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
	macros::CATCH(fighter, 0, Hash40::new("top"), 4.0, 0.0, 7.0, 5.0, Some(0.0), Some(8.0), Some(5.0), *FIGHTER_STATUS_KIND_MIIFIGHTER_SUPLEX_THROWN, *COLLISION_SITUATION_MASK_G);
	macros::CATCH(fighter, 1, Hash40::new("top"), 1.0, 0.0, 8.0, 8.0, Some(0.0), Some(8.0), Some(2.0), *FIGHTER_STATUS_KIND_MIIFIGHTER_SUPLEX_THROWN, *COLLISION_SITUATION_MASK_GA);
}
frame(fighter.lua_state_agent, 22.0);
if macros::is_excute(fighter) {
	grab(*MA_MSC_CMD_GRAB_CLEAR_ALL);
	GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ false);
}
frame(fighter.lua_state_agent, 26.0);
if macros::is_excute(fighter) {
	FighterAreaModuleImpl::enable_fix_jostle_area_xy(fighter.module_accessor, 4, 3, 7, 7);
}
