unsafe extern "C" fn game_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 7.0);
    FT_MOTION_RATE(agent, 2.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 35.0, 361, 47, 0, 90, 10.0, 0.0, 7.0, 5.0, None, None, None, 1.2, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
        ATTACK(agent, 1, 0, Hash40::new("top"), 35.0, 361, 47, 0, 90, 16.0, 0.0, 12.5, 17.5, None, None, None, 1.2, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
        AttackModule::set_force_reaction(boma, 0, true, false);
        AttackModule::set_force_reaction(boma, 1, true, false);
        AttackModule::set_final_finish_cut_in(boma, 0, true, true, -1, false);
        AttackModule::set_final_finish_cut_in(boma, 1, true, true, -1, false);
    }
    wait(lua_state, 2.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    FT_MOTION_RATE(agent, 1.0);
    frame(lua_state, 30.0);
    if is_excute(agent) {
        CANCEL_FILL_SCREEN(agent, 0, 40);
    }
    frame(lua_state, 40.0);
    FT_MOTION_RATE(agent, 0.85);
}

unsafe extern "C" fn effect_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 4.0);
    if is_excute(agent) {
        WorkModule::on_flag(boma, *FIGHTER_ROY_STATUS_FINAL_FLAG_REMOVE_FINAL_AURA);
        EFFECT_FOLLOW(agent, Hash40::new("roy_sword"), Hash40::new("sword1"), 0, 0, 0, 0, 0, 0, 1, true);
    }
    frame(lua_state, 5.0);
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, 0x0cca57558b, Hash40::new("top"), 0, 15, 6, 0, -30, -140, 1.7, false);
    }
    frame(lua_state, 7.0);
    if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if is_excute(agent) {
            EFFECT(agent, Hash40::new("roy_final_hit"), Hash40::new("top"), 0, 1, 25, 0, 90, 0, 1.1, 0, 0, 0, 0, 0, 0, true);
            EFFECT(agent, Hash40::new("roy_final_hit_2"), Hash40::new("top"), 0, 1, 25, 0, 90, 0, 1.1, 0, 0, 0, 0, 0, 0, true);
        }
        else {
        if is_excute(agent) {
            EFFECT(agent, Hash40::new("roy_final_hit"), Hash40::new("top"), 0, 1, 25, 0, -90, 0, 1.1, 0, 0, 0, 0, 0, 0, true);
            EFFECT(agent, Hash40::new("roy_final_hit_2"), Hash40::new("top"), 0, 1, 25, 0, -90, 0, 1.1, 0, 0, 0, 0, 0, 0, true);
        }
    }
}
frame(lua_state, 8.0);
if is_excute(agent) {
    LANDING_EFFECT(agent, Hash40::new("sys_h_smoke_b"), Hash40::new("top"), -7, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
}
frame(lua_state, 23.0);
if is_excute(agent) {
    battle_object();
    methodlib::L2CValue::L2CValue(void*)();
}
else {
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(-15, 10, -20);
req_final_ground_effect();
frame(lua_state, 25.0);
if is_excute(agent) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else {
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(0, 10, -20);
req_final_ground_effect();
frame(lua_state, 27.0);
if is_excute(agent) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else {
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(15, 10, -20);
req_final_ground_effect();
frame(lua_state, 29.0);
if is_excute(agent) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else {
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(30, 10, -20);
req_final_ground_effect();
frame(lua_state, 31.0);
if is_excute(agent) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else {
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(45, 10, -20);
req_final_ground_effect();
frame(lua_state, 35.0);
if is_excute(agent) {
EFFECT_OFF_KIND(agent, Hash40::new("roy_sword"), false, false);
EFFECT_OFF_KIND(agent, Hash40::new("roy_final_sword_fire"), false, false);
}
}

unsafe extern "C" fn sound_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 5.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_roy_final06"));
        PLAY_SE(agent, Hash40::new("vc_roy_final02"));
    }
    wait(lua_state, 2.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_roy_final04"));
    }
}

unsafe extern "C" fn expression_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        ItemModule::set_have_item_visibility(boma, false, 0);
        AREA_WIND_2ND_arg10(0, 0.5, 120, 20, 0.2, -5, 7, 14, 14, 40);
        VisibilityModule::set_int64(boma, hash40("sword") as i64, hash40("sword_lhand_saya") as i64);
    }
    frame(lua_state, 5.0);
    if is_excute(agent) {
        VisibilityModule::set_int64(boma, hash40("sword") as i64, hash40("sword_rhand_saya") as i64);
    }
    frame(lua_state, 6.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 7.0);
    if is_excute(agent) {
        RUMBLE_HIT(agent, Hash40::new("rbkind_21_slash_sp"), 0);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_explosionl"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
        QUAKE(agent, *CAMERA_QUAKE_KIND_L);
    }
    frame(lua_state, 64.0);
    if is_excute(agent) {
        AREA_WIND_2ND_arg10(0, 0.2, 170, 20, 0.2, -5, 7, 14, 14, 40);
    }
    frame(lua_state, 73.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitl"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 90.0);
    if is_excute(agent) {
        AreaModule::erase_wind(boma, 0);
    }
}