#[acmd_script( agent = "sonic", script = "expression_escapef", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_escapef(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    frame(lua_state, 3.0);
    if is_excute(fighter) {
        ItemModule::set_have_item_visibility(boma, false);
    }
    frame(lua_state, 6.0);
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, Hash40::new("body"), Hash40::new("body_sphere"));
        HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_NORMAL);
    }
    for _ in 0..7 {
    wait(lua_state, 1.0);
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, Hash40::new("body"), Hash40::new("body_normal"));
        HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_OFF);
    }
    wait(lua_state, 1.0);
}
frame(lua_state, 13.0);
if is_excute(fighter) {
    slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 6);
}
frame(lua_state, 27.0);
if is_excute(fighter) {
    ItemModule::set_have_item_visibility(boma, true);
    notify_event_msc_cmd!(fighter, Hash40::new_raw(0x23c33f3bdc));
}
}