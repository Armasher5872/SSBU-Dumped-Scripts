#[acmd_script( agent = "inkling", script = "game_specialinkchargestart", category = ACMD_GAME, low_priority )]
unsafe fn game_specialinkchargestart(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    if is_excute(fighter) {
        WorkModule::on_flag(boma, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_NO_FLIP_SQUID);
    }
    if !WorkModule::is_flag(boma, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID) {
        if is_excute(fighter) {
            ArticleModule::generate_article(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false, -1);
        }
    }
    let motion = MotionModule::motion_kind(boma);
    let frame = MotionModule::frame(boma);
    let rate = MotionModule::rate(boma);
    ArticleModule::change_motion(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new_raw(motion), false, -1.0);
    if is_excute(fighter) {
        ArticleModule::set_frame(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, frame);
        ArticleModule::set_rate(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, rate);
        ArticleModule::set_visibility_whole(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
        WorkModule::on_flag(boma, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID);
        let status = StatusModule::status_kind(boma);
        if status != *FIGHTER_STATUS_KIND_REBIRTH {
            WorkModule::on_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_FORCE_LOUPE);
        }
    }
    get_value_float(0, *SO_VAR_FLOAT_LR);
    if(0x13d500(0, 0)){
        if is_excute(fighter) {
            ArticleModule::change_motion(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("special_ink_charge_start_l"), false, -1.0);
            get_value_float(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, *SO_VAR_FLOAT_MOTION_RATE);
            SET_RATE_ARTICLE(fighter, 304);
        }
        else{
        if is_excute(fighter) {
            ArticleModule::change_motion(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("special_ink_charge_start_r"), false, -1.0);
            get_value_float(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, *SO_VAR_FLOAT_MOTION_RATE);
            SET_RATE_ARTICLE(fighter, 432);
        }
    }
}
frame(lua_state, 2.0);
if is_excute(fighter) {
    ArticleModule::set_visibility_whole(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, true, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
    WorkModule::on_flag(boma, *FIGHTER_INKLING_STATUS_CHARGE_INK_FLAG_CHARGE_START);
}
frame(lua_state, 6.0);
if is_excute(fighter) {
    VisibilityModule::set_whole(boma, false);
    HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("tank"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("top"), *HIT_STATUS_NORMAL);
}
}