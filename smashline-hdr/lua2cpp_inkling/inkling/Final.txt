unsafe extern "C" fn game_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        CHECK_VALID_FINAL_START_CAMERA(agent, 0, 1, 20, 0, 0, 0);
        SLOW_OPPONENT(agent, 4, 120);
    }
    frame(lua_state, 5.0);
    if is_excute(agent) {
        ArticleModule::generate_article(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_MEGAPHONELASER, false, -1);
        ArticleModule::set_visibility_whole(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_MEGAPHONELASER, false, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
    }
    frame(lua_state, 9.0);
    if is_excute(agent) {
        ArticleModule::set_visibility_whole(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_MEGAPHONELASER, true, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
    }
    WorkModule::is_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){
        frame(lua_state, 10.0);
        if is_excute(agent) {
            FT_SET_FINAL_FEAR_FACE(agent, 60);
            REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04final.nuanmb"), false, false);
            FT_START_CUTIN(agent);
        }
        else {
        if is_excute(agent) {
            PostureModule::scale(boma, 5, 0);
            0x13d500(-1407754940, 2.5);
            CAM_ZOOM_IN_arg5(0, 0);
            FT_START_CUTIN(agent);
        }
        frame(lua_state, 35.0);
        if is_excute(agent) {
            CAM_ZOOM_OUT(agent);
        }
    }
}
frame(lua_state, 60.0);
if is_excute(agent) {
    ArticleModule::shoot(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_MEGAPHONELASER, *ARTICLE_OPE_TARGET_ALL, false);
    ArticleModule::change_status(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_MEGAPHONELASER, *WEAPON_INKLING_MEGAPHONELASER_STATUS_KIND_FIRE, ArticleOperationTarget(*ARTICLE_OPE_TARGET_ALL));
}
}

unsafe extern "C" fn effect_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if WorkModule::get_int(boma, *FIGHTER_INSTANCE_WORK_ID_INT_COLOR) == 0 {
        if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
            if is_excute(agent) {
                EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_l"), false, false, false);
            }
            else {
            if is_excute(agent) {
                EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_r"), false, false, false);
            }
        }
    }
}
if WorkModule::get_int(boma, *FIGHTER_INSTANCE_WORK_ID_INT_COLOR) == 1 {
    if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if is_excute(agent) {
            EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_l2"), false, false, false);
        }
        else {
        if is_excute(agent) {
            EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_r2"), false, false, false);
        }
    }
}
}
if WorkModule::get_int(boma, *FIGHTER_INSTANCE_WORK_ID_INT_COLOR) == 2 {
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
    if is_excute(agent) {
        EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_l"), false, false, false);
    }
    else {
    if is_excute(agent) {
        EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_r"), false, false, false);
    }
}
}
}
if WorkModule::get_int(boma, *FIGHTER_INSTANCE_WORK_ID_INT_COLOR) == 3 {
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
if is_excute(agent) {
    EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_l"), false, false, false);
}
else {
if is_excute(agent) {
    EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_r"), false, false, false);
}
}
}
}
if WorkModule::get_int(boma, *FIGHTER_INSTANCE_WORK_ID_INT_COLOR) == 4 {
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
if is_excute(agent) {
EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_l"), false, false, false);
}
else {
if is_excute(agent) {
EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_r"), false, false, false);
}
}
}
}
if WorkModule::get_int(boma, *FIGHTER_INSTANCE_WORK_ID_INT_COLOR) == 5 {
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
if is_excute(agent) {
EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_l2"), false, false, false);
}
else {
if is_excute(agent) {
EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_r2"), false, false, false);
}
}
}
}
if WorkModule::get_int(boma, *FIGHTER_INSTANCE_WORK_ID_INT_COLOR) == 6 {
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
if is_excute(agent) {
EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_l"), false, false, false);
}
else {
if is_excute(agent) {
EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_r"), false, false, false);
}
}
}
}
if WorkModule::get_int(boma, *FIGHTER_INSTANCE_WORK_ID_INT_COLOR) == 7 {
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
if is_excute(agent) {
EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_l2"), false, false, false);
}
else {
if is_excute(agent) {
EffectModule::req_screen(boma, Hash40::new("bg_inkling_final_r2"), false, false, false);
}
}
}
}
frame(lua_state, 39.0);
if is_excute(agent) {
LANDING_EFFECT(agent, Hash40::new("sys_down_smoke"), Hash40::new("top"), 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
}
frame(lua_state, 60.0);
if is_excute(agent) {
EFFECT_OFF_KIND(agent, Hash40::new("inkling_final_ink_aura"), false, false);
WorkModule::set_int(boma, *EFFECT_HANDLE_NULL, *FIGHTER_INKLING_INSTANCE_WORK_ID_INT_READY_FINAL_EFFECT_HANDLE);
}
frame(lua_state, 61.0);
if is_excute(agent) {
EFFECT_OFF_KIND(agent, Hash40::new("inkling_final_ink_lineaura"), false, false);
WorkModule::set_int(boma, *EFFECT_HANDLE_NULL, *FIGHTER_INKLING_INSTANCE_WORK_ID_INT_READY_FINAL_EFFECT_HANDLE);
}
}

unsafe extern "C" fn sound_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 3.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("vc_inkling_final01"));
    }
}

unsafe extern "C" fn expression_final(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        START_INFO_FLASH_EYE(agent);
    }
    frame(lua_state, 1.0);
    if is_excute(agent) {
        ItemModule::set_have_item_visibility(boma, false, 0);
    }
    frame(lua_state, 39.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_attackl"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}