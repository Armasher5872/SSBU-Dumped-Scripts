unsafe extern "C" fn game_visualscene03(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_DUCKHUNT_FINAL, 0, 2.0, 361, 80, 1, 90, 0.0, 1.0, *ATTACK_LR_CHECK_POS, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_DUCKHUNT_FINAL, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, true);
    }
    frame(lua_state, 5.0);
    if is_excute(agent) {
        ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_DUCKHUNT_FINAL, 0, 2.0, 361, 80, 1, 90, 0.0, 1.0, *ATTACK_LR_CHECK_POS, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DUCKHUNT_FINAL, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, true);
        WorkModule::on_flag(boma, *FIGHTER_DUCKHUNT_STATUS_WORK_ID_FLAG_FINAL_ABS_HIT);
    }
    frame(lua_state, 13.0);
    if is_excute(agent) {
        ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_DUCKHUNT_FINAL, 0, 2.0, 361, 80, 1, 90, 0.0, 1.0, *ATTACK_LR_CHECK_POS, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_DUCKHUNT_FINAL, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, true);
        WorkModule::on_flag(boma, *FIGHTER_DUCKHUNT_STATUS_WORK_ID_FLAG_FINAL_ABS_HIT);
    }
    frame(lua_state, 21.0);
    if is_excute(agent) {
        ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_DUCKHUNT_FINAL, 0, 2.0, 361, 80, 1, 90, 0.0, 1.0, *ATTACK_LR_CHECK_POS, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_DUCKHUNT_FINAL, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, true);
        WorkModule::on_flag(boma, *FIGHTER_DUCKHUNT_STATUS_WORK_ID_FLAG_FINAL_ABS_HIT);
    }
    frame(lua_state, 29.0);
    if is_excute(agent) {
        ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_DUCKHUNT_FINAL, 0, 2.0, 361, 80, 1, 90, 0.0, 1.0, *ATTACK_LR_CHECK_POS, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_DUCKHUNT_FINAL, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, true);
        WorkModule::on_flag(boma, *FIGHTER_DUCKHUNT_STATUS_WORK_ID_FLAG_FINAL_ABS_HIT);
    }
    frame(lua_state, 37.0);
    if is_excute(agent) {
        ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_DUCKHUNT_FINAL, 0, 2.0, 361, 80, 1, 90, 0.0, 1.0, *ATTACK_LR_CHECK_POS, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DUCKHUNT_FINAL, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, true);
        WorkModule::on_flag(boma, *FIGHTER_DUCKHUNT_STATUS_WORK_ID_FLAG_FINAL_ABS_HIT);
    }
}

unsafe extern "C" fn effect_visualscene03(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("duckhunt_final_hit"), Hash40::new("top"), 0, 10, 0, 0, 0, 0, 1, 5, 5, 0, 0, 0, 0, true);
        EFFECT(agent, Hash40::new("duckhunt_final_can"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
    }
    frame(lua_state, 2.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("duckhunt_final_hit2"), Hash40::new("top"), 0, 10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
    }
    frame(lua_state, 3.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("duckhunt_final_hit"), Hash40::new("top"), 0, 10, 0, 0, 0, 0, 1, 5, 5, 0, 0, 0, 0, true);
    }
    frame(lua_state, 5.0);
    if is_excute(agent) {
        EffectModule::remove_post_effect_line(boma, 6, true);
        EFFECT(agent, Hash40::new("duckhunt_final_hit3"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
    }
}

unsafe extern "C" fn expression_visualscene03(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_beams"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    wait(lua_state, 20.0);
}