unsafe extern "C" fn game_attackairlw(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 14.0);
    if is_excute(agent) {
        WorkModule::on_flag(boma, *FIGHTER_STATUS_ATTACK_AIR_FLAG_ENABLE_LANDING);
    }
    for _ in 0..6 {
    wait(lua_state, 1.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    wait(lua_state, 1.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 2.3, 367, 80, 0, 5, 5.0, 0.0, 1.0, 2.0, None, None, None, 0.6, 1.8, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_rush"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
        ATTACK(agent, 1, 0, Hash40::new("top"), 1.8, 367, 80, 0, 5, 3.5, 0.0, 2.0, 6.5, None, None, None, 0.6, 1.8, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_rush"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
        ATTACK(agent, 2, 0, Hash40::new("top"), 1.8, 367, 80, 0, 5, 3.5, 0.0, 2.0, -2.5, None, None, None, 0.6, 1.8, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_rush"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
    }
}
for _ in 0..7 {
wait(lua_state, 1.0);
if is_excute(agent) {
    AttackModule::clear_all(boma);
}
wait(lua_state, 1.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("top"), 1.9, 367, 100, 0, 5, 5.0, 0.0, 0.5, 2.0, None, None, None, 0.6, 1.8, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_rush"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
    ATTACK(agent, 1, 0, Hash40::new("top"), 1.4, 367, 100, 0, 5, 3.5, 0.0, 1.5, 6.5, None, None, None, 0.6, 1.8, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_rush"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
    ATTACK(agent, 2, 0, Hash40::new("top"), 1.4, 367, 100, 0, 5, 3.5, 0.0, 1.5, -2.5, None, None, None, 0.6, 1.8, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_rush"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
}
}
if is_excute(agent) {
AttackModule::clear_all(boma);
}
wait(lua_state, 1.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 80, 179, 0, 55, 6.5, 0.0, 0.5, 2.0, None, None, None, 1.5, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
ATTACK(agent, 1, 0, Hash40::new("top"), 2.8, 40, 179, 0, 55, 4.5, 0.0, 1.5, 6.5, None, None, None, 1.5, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
ATTACK(agent, 2, 0, Hash40::new("top"), 2.8, 40, 179, 0, 55, 4.5, 0.0, 1.5, -2.5, None, None, None, 1.5, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
}
wait(lua_state, 1.0);
if is_excute(agent) {
AttackModule::clear_all(boma);
}
frame(lua_state, 50.0);
if is_excute(agent) {
WorkModule::off_flag(boma, *FIGHTER_STATUS_ATTACK_AIR_FLAG_ENABLE_LANDING);
}
}

unsafe extern "C" fn effect_attackairlw(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if(0x101bd0(*FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 0)){
        frame(lua_state, 10.0);
        if is_excute(agent) {
            EFFECT_FOLLOW_NO_STOP(agent, Hash40::new("yoshi_air_trace_01"), Hash40::new("top"), 0, -2, 0, 0, 0, 0, 1, true);
        }
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("yoshi_air_trace_01"), true, true);
    }
    if(0x101bd0(*FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 1)){
        frame(lua_state, 10.0);
        if is_excute(agent) {
            EFFECT_FOLLOW_NO_STOP(agent, Hash40::new("yoshi_air_trace_02"), Hash40::new("top"), 0, -2, 0, 0, 0, 0, 1, true);
        }
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("yoshi_air_trace_02"), true, true);
    }
    if(0x101bd0(*FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 2)){
        frame(lua_state, 10.0);
        if is_excute(agent) {
            EFFECT_FOLLOW_NO_STOP(agent, Hash40::new("yoshi_air_trace_03"), Hash40::new("top"), 0, -2, 0, 0, 0, 0, 1, true);
        }
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("yoshi_air_trace_03"), true, true);
    }
    if(0x101bd0(*FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 3)){
        frame(lua_state, 10.0);
        if is_excute(agent) {
            EFFECT_FOLLOW_NO_STOP(agent, Hash40::new("yoshi_air_trace_04"), Hash40::new("top"), 0, -2, 0, 0, 0, 0, 1, true);
        }
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("yoshi_air_trace_04"), true, true);
    }
    if(0x101bd0(*FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 4)){
        frame(lua_state, 10.0);
        if is_excute(agent) {
            EFFECT_FOLLOW_NO_STOP(agent, Hash40::new("yoshi_air_trace_05"), Hash40::new("top"), 0, -2, 0, 0, 0, 0, 1, true);
        }
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("yoshi_air_trace_05"), true, true);
    }
    if(0x101bd0(*FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 5)){
        frame(lua_state, 10.0);
        if is_excute(agent) {
            EFFECT_FOLLOW_NO_STOP(agent, Hash40::new("yoshi_air_trace_06"), Hash40::new("top"), 0, -2, 0, 0, 0, 0, 1, true);
        }
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("yoshi_air_trace_06"), true, true);
    }
    if(0x101bd0(*FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 6)){
        frame(lua_state, 10.0);
        if is_excute(agent) {
            EFFECT_FOLLOW_NO_STOP(agent, Hash40::new("yoshi_air_trace_07"), Hash40::new("top"), 0, -2, 0, 0, 0, 0, 1, true);
        }
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("yoshi_air_trace_07"), true, true);
    }
    if(0x101bd0(*FIGHTER_INSTANCE_WORK_ID_INT_COLOR, 7)){
        frame(lua_state, 10.0);
        if is_excute(agent) {
            EFFECT_FOLLOW_NO_STOP(agent, Hash40::new("yoshi_air_trace_08"), Hash40::new("top"), 0, -2, 0, 0, 0, 0, 1, true);
        }
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("yoshi_air_trace_08"), true, true);
    }
}

unsafe extern "C" fn sound_attackairlw(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 0.0);
    if is_excute(agent) {
        STOP_SE(agent, Hash40::new("vc_yoshi_jump02"));
    }
    wait(lua_state, 12.0);
    if is_excute(agent) {
        PLAY_SEQUENCE(agent, Hash40::new("seq_yoshi_rnd_attack"));
        PLAY_SE(agent, Hash40::new("se_yoshi_attackair_l01"));
    }
    wait(lua_state, 6.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_yoshi_attackair_l01"));
    }
    wait(lua_state, 6.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_yoshi_attackair_l01"));
    }
    wait(lua_state, 6.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_yoshi_attackair_l01"));
    }
    wait(lua_state, 6.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_yoshi_attackair_l01"));
    }
}

unsafe extern "C" fn expression_attackairlw(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 16.0);
    if is_excute(agent) {
        RUMBLE_HIT(agent, Hash40::new("rbkind_attackss"), 3);
    }
    frame(lua_state, 18.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_elecattacks"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 40.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 41.0);
    if is_excute(agent) {
        RUMBLE_HIT(agent, Hash40::new("rbkind_attackm"), 0);
    }
}