#[acmd_script( agent = "master", script = "expression_speciallw", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_speciallw(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    if is_excute(fighter) {
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
        ItemModule::set_have_item_visibility(boma, false, 0);
        WorkModule::on_flag(boma, *FIGHTER_MASTER_INSTANCE_WORK_ID_FLAG_SWORD_OFF_EFFECT_AURA);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_75_hold_largestart"), 18, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 19.0);
    for _ in 0..7 {
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_75_hold_large"), 3, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    wait(lua_state, 3.0);
}
frame(lua_state, 60.0);
if is_excute(fighter) {
    slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 3);
    ControlModule::set_rumble(boma, Hash40::new("rbkind_nohit_attacks"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
}
frame(lua_state, 62.0);
if is_excute(fighter) {
    RUMBLE_HIT(fighter, Hash40::new("rbkind_attackll"), 0);
}
frame(lua_state, 67.0);
if is_excute(fighter) {
    QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
}
frame(lua_state, 107.0);
if is_excute(fighter) {
    slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 8);
}
}