#[acmd_script( agent = "inkling", script = "expression_swim" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_swim(fighter: &mut L2CAgentBase) {
	wait_loop_sync_mot();
	frame(fighter.lua_state_agent, 2.0);
	if macros::is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_swim"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 20.0);
	if macros::is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_swim"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 41.0);
	if macros::is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_swim"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 59.0);
	if macros::is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_swim"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 83.0);
	if macros::is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_swim"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(fighter.lua_state_agent, 103.0);
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_swim"), 0, false);
	ControlModule::set_rumble(fighter.module_accessor);
