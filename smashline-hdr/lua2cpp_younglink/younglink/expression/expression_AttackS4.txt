#[acmd_script( agent = "younglink", script = "expression_attacks4", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_attacks4(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    if is_excute(fighter) {
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
        ItemModule::set_have_item_visibility(boma, false);
    }
    frame(lua_state, 6.0);
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, Hash40::new("shield"), Hash40::new("shield_back"));
    }
    frame(lua_state, 10.0);
    execute(lua_state, 10.0);
    if is_excute(fighter) {
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 4);
    }
    frame(lua_state, 11.0);
    if is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("sword"), *ATTACK_DIRECTION_Z_MINUS, *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Y);
        AttackModule::set_attack_reference_joint_id(boma);
    }
    frame(lua_state, 13.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitl"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 15.0);
    if is_excute(fighter) {
        RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
    }
    frame(lua_state, 39.0);
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, Hash40::new("shield"), Hash40::new("shield_normal"));
    }
}