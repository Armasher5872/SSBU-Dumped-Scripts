#[acmd_script( agent = "cloud", script = "game_final2attack", category = ACMD_GAME, low_priority )]
unsafe fn game_final2attack(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::WHOLE_HIT(agent, *HIT_STATUS_XLU);
        camera!(agent, *MA_MSC_CMD_CAMERA_CAM_RECT, 60, -70, 30, -10);
        macros::CHECK_VALID_FINAL_START_CAMERA(agent, 0, 7, 20, 0, 0, 0);
    }
    is_camera_off_final2();
    methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true);
    WorkModule::is_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        WorkModule::is_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_2_OPPONENT);
        if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
            if get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
                if macros::is_excute(agent) {
                    macros::REQ_FINAL_START_CAMERA(agent, Hash40::new("d04finalattackl_far.nuanmb"), true);
                }
                else{
                frame(agent.lua_state_agent, 20.0);
                if macros::is_excute(agent) {
                    WorkModule::off_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_DISP_WINDOW);
                }
                else{
                if get_value_float(agent.lua_state_agent, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_DISP_WINDOW) < 0.0 {
                    if macros::is_excute(agent) {
                        macros::REQ_FINAL_START_CAMERA(agent, Hash40::new("d04finalattackl.nuanmb"), true);
                    }
                    else{
                    if macros::is_excute(agent) {
                        macros::REQ_FINAL_START_CAMERA(agent, Hash40::new("d04finalattack_far.nuanmb"), true);
                    }
                    else{
                    if macros::is_excute(agent) {
                        macros::REQ_FINAL_START_CAMERA(agent, Hash40::new("d04finalattack.nuanmb"), true);
                    }
                }
            }
        }
    }
}
}
}
}
frame(agent.lua_state_agent, 56.0);
if macros::is_excute(agent) {
WorkModule::off_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_DISP_WINDOW);
WorkModule::on_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION_VARIATION);
}
frame(agent.lua_state_agent, 83.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 84.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 116.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 117.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 134.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 135.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 151.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 152.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 169.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 170.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 185.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 186.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 199.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, -0.5, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 200.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 209.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 210.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 218.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 219.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 226.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
}
frame(agent.lua_state_agent, 227.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
}
frame(agent.lua_state_agent, 232.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 2.8, 90, 100, 35, 0, 22.0, 0.0, 5.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT01, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
WorkModule::off_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION_VARIATION);
WorkModule::on_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
WorkModule::set_int64(agent.module_accessor, hash40("fall_damage") as i64, *FIGHTER_CLOUD_STATUS_FINAL_WORK_INT_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
}
frame(agent.lua_state_agent, 233.0);
if macros::is_excute(agent) {
AttackModule::clear_all(agent.module_accessor);
WorkModule::off_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
}
frame(agent.lua_state_agent, 288.0);
if macros::is_excute(agent) {
macros::ATTACK(agent, 0, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 10.0, 0.0, 5.0, -8.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT02, *ATTACK_REGION_NONE);
macros::ATTACK(agent, 1, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 12.0, 0.0, 5.0, 4.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT02, *ATTACK_REGION_NONE);
macros::ATTACK(agent, 2, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 14.0, 0.0, 5.0, 18.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_FINAL_APPEND_HIT02, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(agent.module_accessor, true, false);
AttackModule::set_damage_shake_scale(agent.module_accessor, 0);
WorkModule::on_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_END_HIT);
WorkModule::on_flag(agent.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_FALL_START);
}
}