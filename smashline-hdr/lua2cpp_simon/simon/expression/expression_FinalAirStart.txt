#[acmd_script( agent = "simon", script = "expression_finalairstart", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_finalairstart(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    if is_excute(fighter) {
        ItemModule::set_have_item_visibility(boma, false, 0);
    }
    frame(lua_state, 27.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitm"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 35.0);
    WorkModule::is_flag(boma, *FIGHTER_SIMON_INSTANCE_WORK_ID_FLAG_FINAL_HIT);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        if is_excute(fighter) {
            ControlModule::set_rumble(boma, Hash40::new("rbkind_attack_critical"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
        }
        else{
        wait(lua_state, 10.0);
        if is_excute(fighter) {
            ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitl"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
        }
        wait(lua_state, 20.0);
        if is_excute(fighter) {
            ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitl"), 14, true, *BATTLE_OBJECT_ID_INVALID as u32);
        }
        wait(lua_state, 15.0);
        if is_excute(fighter) {
            ControlModule::set_rumble(boma, Hash40::new("rbkind_nohitl"), 9, true, *BATTLE_OBJECT_ID_INVALID as u32);
        }
        wait(lua_state, 10.0);
        if is_excute(fighter) {
            ControlModule::set_rumble(boma, Hash40::new("rbkind_31_cypher"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
        }
    }
}
}