if macros::is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("top"), *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_X);
	AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
	macros::FT_ATTACK_ABS_CAMERA_QUAKE(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, *CAMERA_QUAKE_KIND_NONE);
}
frame(fighter.lua_state_agent, 1.0);
if macros::is_excute(fighter) {
	macros::FT_DISABLE_CURRY_FACE(fighter, true);
	slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
}
frame(fighter.lua_state_agent, 16.0);
if macros::is_excute(fighter) {
	ItemModule::set_attach_item_visibility(fighter.module_accessor, false);
}
frame(fighter.lua_state_agent, 17.0);
if macros::is_excute(fighter) {
	slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_NONE);
}
frame(fighter.lua_state_agent, 21.0);
if macros::is_excute(fighter) {
	macros::QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_attacks"), 5);
}
frame(fighter.lua_state_agent, 51.0);
if macros::is_excute(fighter) {
	macros::QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
}
frame(fighter.lua_state_agent, 57.0);
if macros::is_excute(fighter) {
	macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_attackm"), 0);
	slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 2);
	ItemModule::set_attach_item_visibility(fighter.module_accessor, true);
}
