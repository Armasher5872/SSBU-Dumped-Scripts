#[acmd_script( agent = "trail", script = "expression_attackdash", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_attackdash(fighter: &mut L2CAgentBase) {
    if macros::is_excute(fighter) {
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 2);
        macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_81_dashattack"), 0);
    }
    frame(fighter.lua_state_agent, 2.0);
    if macros::is_excute(fighter) {
        ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_dash"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 4, true);
    }
    frame(fighter.lua_state_agent, 7.0);
    if macros::is_excute(fighter) {
        ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_nohitll"), 7, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(fighter.lua_state_agent, 33.0);
    if macros::is_excute(fighter) {
        slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 4);
    }
    frame(fighter.lua_state_agent, 38.0);
    ItemModule::is_have_item(fighter.module_accessor, 0);
    if(0x4ae890(false, true)){
        if macros::is_excute(fighter) {
            macros::FT_MOTION_INTP_WAIT_ITEM(fighter, true, 0.01);
        }
    }
    frame(fighter.lua_state_agent, 48.0);
    if macros::is_excute(fighter) {
        macros::FT_MOTION_INTP_WAIT_ITEM(fighter, true, 0.1);
    }
    frame(fighter.lua_state_agent, 56.0);
    if macros::is_excute(fighter) {
        macros::FT_MOTION_INTP_WAIT_ITEM(fighter, true, 0);
    }
}