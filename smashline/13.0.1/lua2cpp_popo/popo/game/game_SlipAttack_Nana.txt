frame(fighter.lua_state_agent, 19.0);
get_value_float(*SO_VAR_FLOAT_LR);
if(0x19e320(0, 0)){;
if macros::is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 3.75, 361, 50, 0, 60, 4.5, 2.0, 4.5, -12.0, 2.0, 4.5, -3.0, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_HAMMER);
}else{;
if macros::is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 3.75, 361, 50, 0, 60, 4.5, -2.0, 4.5, -12.0, -2.0, 4.5, -3.0, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_HAMMER);
}}}wait(fighter.lua_state_agent, 2.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(boma);
}frame(fighter.lua_state_agent, 31.0);
get_value_float(*SO_VAR_FLOAT_LR);
if(0x19e320(576, 0)){;
if macros::is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 3.75, 361, 50, 0, 60, 4.5, 2.0, 4.5, 12.0, 2.0, 4.5, 3.0, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_HAMMER);
}else{;
if macros::is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 3.75, 361, 50, 0, 60, 4.5, -2.0, 4.5, 12.0, -2.0, 4.5, 3.0, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_HAMMER);
}}}wait(fighter.lua_state_agent, 2.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(boma);
}