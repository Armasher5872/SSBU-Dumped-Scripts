#[acmd_script( agent = "toonlink", script = "expression_attacks4", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_attacks4(fighter: &mut L2CAgentBase) {
    if macros::is_excute(fighter) {
        ItemModule::set_have_item_visibility(fighter.module_accessor, false);
        slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(fighter.lua_state_agent, 9.0);
    execute(9);
    WorkModule::is_flag(fighter.module_accessor, *FIGHTER_STATUS_ATTACK_FLAG_SMASH_SMASH_HOLD_TO_ATTACK);
    if(0x120e80(false, true)){
        if macros::is_excute(fighter) {
            methodlib::L2CValue::as_hash()const(Hash40::new("sword1"), *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Y);
            AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
            ItemModule::set_have_item_visibility(fighter.module_accessor, false);
            slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
            VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("shield"), Hash40::new("shield_normal"));
        }
    }
    frame(fighter.lua_state_agent, 14.0);
    if macros::is_excute(fighter) {
        ControlModule::set_rumble(fighter.module_accessor, Hash40::new("rbkind_nohitl"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(fighter.lua_state_agent, 16.0);
    if macros::is_excute(fighter) {
        macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_slashl"), 0);
    }
}