unsafe extern "C" fn game_finalride(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        VisibilityModule::set_whole(boma, true);
    }
    wait(lua_state, 2.0);
    wait(lua_state, 2.0);
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 40.0, 40, 40, 0, 120, 19.0, 0.0, 3.0, 0.0, Some(0.0), Some(8.5), Some(27.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_PUNCH);
        AttackModule::set_force_reaction(boma, 0, true, false);
        AttackModule::set_no_uniq_effect_all(boma, true, false);
        AttackModule::set_no_squat_damage_reaction_mul(boma, 0, true, false);
    }
    frame(lua_state, 10.0);
    BattleObjectWorld__scale_z();
    if(methodlib::L2CValue::operator<=(lib::L2CValueconst&)const(0, 1.0)){
        if is_excute(agent) {
            SlowModule::set_whole(boma, 90, 0);
        }
    }
    if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if is_excute(agent) {
            PostureModule::scale(boma, 1, 0);
            0x111840(615595550, 1.5);
            CAM_ZOOM_IN_arg5(-0.3, 0.5);
        }
        else{
        if is_excute(agent) {
            SlowModule::set_whole(boma, 90, 0);
        }
        if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
            if is_excute(agent) {
                PostureModule::scale(boma, 1, 0);
                0x111840(615595550, 1.5);
                CAM_ZOOM_IN_arg5(0, 0);
            }
            else{
            if is_excute(agent) {
                PostureModule::scale(boma, 1, 0);
                0x111840(615595550, 1.5);
                CAM_ZOOM_IN_arg5(-0.3, -0.5);
            }
            else{
            if is_excute(agent) {
                PostureModule::scale(boma, 1, 0);
                0x111840(615595550, 1.5);
                CAM_ZOOM_IN_arg5(0, 0);
            }
        }
    }
}
}
}
frame(lua_state, 10.6);
if is_excute(agent) {
CAM_ZOOM_OUT(agent);
}
frame(lua_state, 10.9);
if is_excute(agent) {
SlowModule::clear_whole(boma);
AttackModule::clear_all(boma);
}
}

unsafe extern "C" fn effect_finalride(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EffectModule::set_visible_kind(boma, Hash40::new("sys_final_aura"), false);
    }
}

unsafe extern "C" fn sound_finalride(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 7.0);
    if is_excute(agent) {
        PLAY_SE_NO_3D(agent, Hash40::new("se_pit_final03"));
    }
    frame(lua_state, 12.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_pit_final04"));
    }
}

unsafe extern "C" fn expression_finalride(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 1.0);
    if is_excute(agent) {
        ItemModule::set_have_item_visibility(boma, false, 0);
        RUMBLE_HIT(agent, Hash40::new("rbkind_attack_finish"), 0);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_28_chariot_sp"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 11.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_erase"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 12.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_fly"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}