#[acmd_script( agent = "ganon", script = "expression_attacks4", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_attacks4(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    if is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
        ItemModule::set_have_item_visibility(boma, false);
    }
    frame(lua_state, 15.0);
    execute(15);
    if is_excute(fighter) {
        ItemModule::set_have_item_visibility(boma, false);
        slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
        methodlib::L2CValue::as_hash()const(Hash40::new("haver"), *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_X);
        AttackModule::set_attack_reference_joint_id(boma);
    }
    frame(lua_state, 16.0);
    if is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_R);
    }
    frame(lua_state, 27.0);
    if is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl_l"), 0, false);
        ControlModule::set_rumble(boma);
    }
    frame(lua_state, 29.0);
    if is_excute(fighter) {
        RUMBLE_HIT(fighter, Hash40::new("rbkind_slashl"), 0);
    }
    frame(lua_state, 30.0);
    if is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(lua_state, 31.0);
    if is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_impact"), 0, false);
        ControlModule::set_rumble(boma);
    }
}