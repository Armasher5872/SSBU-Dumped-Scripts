frame(Frame=1)
0x1015f0()
0x1015f0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x1015f0()){
	FighterAreaModuleImpl::enable_fix_jostle_area(0, 3)
	0x1015f0()
	0x1015f0()
}
frame(Frame=7)
0x1015f0()
0x1015f0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x1015f0()){
	ATTACK(ID=0, Part=0, Bone=hash40("armr"), Damage=7.5, Angle=361, KBG=60, FKB=0, BKB=20, Size=2.2, X=0.0, Y=0.0, Z=0.0, X2=-0.7, Y2=0.0, Z2=0.0, Hitlag=1.0, SDI=1.0, Clang_Rebound=ATTACK_SETOFF_KIND_ON, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=0, Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_normal"), SFXLevel=ATTACK_SOUND_LEVEL_M, SFXType=COLLISION_SOUND_ATTR_PUNCH, Type=ATTACK_REGION_PUNCH)
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	ATTACK(ID=1, Part=0, Bone=hash40("top"), Damage=11.0, Angle=361, KBG=80, FKB=0, BKB=55, Size=5.6, X=0.0, Y=1.0, Z=8.5, X2=LUA_VOID, Y2=LUA_VOID, Z2=LUA_VOID, Hitlag=1.0, SDI=1.0, Clang_Rebound=ATTACK_SETOFF_KIND_OFF, FacingRestrict=ATTACK_LR_CHECK_POS, SetWeight=false, ShieldDamage=0, Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_elec"), SFXLevel=ATTACK_SOUND_LEVEL_M, SFXType=COLLISION_SOUND_ATTR_MAGIC, Type=ATTACK_REGION_PSI)
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
	0x1015f0()
}
frame(Frame=9)
0x1015f0()
0x1015f0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x1015f0()){
	AttackModule::set_size(ID=1, Size=4.7)
	0x1015f0()
	0x1015f0()
}
frame(Frame=10)
0x1015f0()
0x1015f0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x1015f0()){
	AttackModule::clear_all()
}
frame(Frame=11)
0x1015f0()
0x1015f0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x1015f0()){
	FighterAreaModuleImpl::enable_fix_jostle_area(2.5, 3)
	0x1015f0()
	0x1015f0()
}
