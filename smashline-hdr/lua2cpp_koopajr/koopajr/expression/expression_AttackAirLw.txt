#[acmd_script( agent = "koopajr", script = "expression_attackairlw", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_attackairlw(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    if is_excute(fighter) {
        ItemModule::set_have_item_visibility(boma, false, 0);
    }
    frame(lua_state, 0.0);
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, hash40("sholder_l") as i64, hash40("sholder_l_on") as i64);
        VisibilityModule::set_int64(boma, hash40("sholder_r") as i64, hash40("sholder_r_on") as i64);
        VisibilityModule::set_int64(boma, hash40("item") as i64, hash40("item_drill") as i64);
    }
    frame(lua_state, 15.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_elecattack"), 30, true, *BATTLE_OBJECT_ID_INVALID as u32);
        RUMBLE_HIT_STATUS(fighter, Hash40::new("rbkind_attacks"), 5);
    }
    frame(lua_state, 25.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_elecattack"), 20, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 35.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_elecattack"), 10, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 47.0);
    if is_excute(fighter) {
        RUMBLE_HIT_STATUS(fighter, Hash40::new("rbkind_attackm"), 0);
    }
}