unsafe extern "C" fn game_finalair(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if !IS_EXIST_ARTICLE(agent, *FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER2) {
        if is_excute(agent) {
            ArticleModule::shoot(boma, *FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER, *ARTICLE_OPE_TARGET_ALL, false);
            WorkModule::set_float(boma, 14.0, *FIGHTER_SAMUS_STATUS_FINAL_WORK_FLOAT_OY);
            ArticleModule::generate_article(boma, *FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER2, false, -1);
            WorkModule::set_float(boma, -14.0, *FIGHTER_SAMUS_STATUS_FINAL_WORK_FLOAT_OY);
            ArticleModule::generate_article(boma, *FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER2, false, -1);
            ArticleModule::shoot(boma, *FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER2, *ARTICLE_OPE_TARGET_ALL, false);
        }
    }
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.0, 20, 100, 22, 0, 13.0, 0.0, 15.0, 20.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 8, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_BOMB, *ATTACK_REGION_NONE);
    }
    frame(lua_state, 8.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
        ATTACK(agent, 0, 0, Hash40::new("top"), 2.0, 20, 100, 22, 0, 15.0, 0.0, 15.0, 20.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 8, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_BOMB, *ATTACK_REGION_NONE);
    }
    frame(lua_state, 12.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
}

unsafe extern "C" fn effect_finalair(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EFFECT_FOLLOW_arg11(Hash40::new("samusd_gbeam_flash_01"), Hash40::new("armr"), 8, 0, 0, 0, 0, 0, 1, true, *FIGHTER_INSTANCE_WORK_ID_INT_COLOR);
    }
    if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if is_excute(agent) {
            EFFECT_GLOBAL(agent, Hash40::new("samusd_final_stone"), 0, 0, 0, 0, 0, 0, 1, false);
        }
        else{
        if is_excute(agent) {
            EFFECT_GLOBAL(agent, Hash40::new("samusd_final_stone"), 0, 0, 0, 0, 180, 0, 1, false);
        }
    }
}
}

unsafe extern "C" fn sound_finalair(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        STOP_SE(agent, Hash40::new("se_samusd_final01"));
    }
}

unsafe extern "C" fn expression_finalair(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    wait_loop_sync_mot();
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
        ItemModule::set_have_item_visibility(boma, false, 0);
    }
    frame(lua_state, 3.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_loopattack"), 26, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 33.0);
}