frame(Frame=18)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	CAM_ZOOM_OUT()
}
frame(Frame=19)
0xffdb0()
0xffdb0()
frame(Frame=23)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	AttackModule::clear_all()
}
frame(Frame=48)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	WorkModule::on_flag(Flag=WEAPON_GANON_GANOND_INSTANCE_WORK_ID_FLAG_HIT_RUMBLE_CHECK)
	0xffdb0()
	methodlib::L2CValue::as_hash()const(hash40("rbkind_nohitll_l"), 0, false)
	ControlModule::set_rumble()
	0xffdb0()
	0xffdb0()
	0xffdb0()
}
frame(Frame=50)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	QUAKE(CAMERA_QUAKE_KIND_L)
	0xffdb0()
	ATTACK(ID=0, Part=1, Bone=hash40("top"), Damage=10.0, Angle=270, KBG=100, FKB=250, BKB=0, Size=25.0, X=0.0, Y=25.0, Z=50.0, X2=0.0, Y2=25.0, Z2=18.0, Hitlag=2.0, SDI=1.0, Clang_Rebound=ATTACK_SETOFF_KIND_ON, FacingRestrict=ATTACK_LR_CHECK_POS, SetWeight=false, ShieldDamage=hash40("no"), Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_paralyze"), SFXLevel=ATTACK_SOUND_LEVEL_S, SFXType=COLLISION_SOUND_ATTR_FIRE, Type=ATTACK_REGION_NONE)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	AttackModule::set_final_finish_cut_in(0, true, true, -1, false)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
}
wait(Frames=5)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	AttackModule::clear_all()
}
frame(Frame=55)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	CHECK_VALID_FINAL_START_CAMERA(0, 2, 50, 0, 0, 0)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
}
WorkModule::is_flag(FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA)
methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)
0xffdb0()
0xffdb0()
if(0xffdb0()){
	get_value_float(SO_VAR_FLOAT_LR)
	methodlib::L2CValue::operator<(lib::L2CValueconst&)const(35264, 0)
	0xffdb0()
	0xffdb0()
	if(0xffdb0()){
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0xffdb0()){
			CAM_ZOOM_IN_arg5(10, 0, 1.2, 0.1, -0.3)
			0xffdb0()
			0xffdb0()
			0xffdb0()
			0xffdb0()
			0xffdb0()
			camera(MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 10)
		}
		else{
			methodlib::L2CValue::operatorbool()const(is_excute)
			if(0xffdb0()){
				CAM_ZOOM_IN_arg5(10, 0, 1.2, 0.1, 0.3)
				0xffdb0()
				0xffdb0()
				0xffdb0()
				0xffdb0()
				0xffdb0()
				camera(MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 10)
				0xffdb0()
				0xffdb0()
				0xffdb0()
				0xffdb0()
			}
		}
	}
}
frame(Frame=60)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	WorkModule::off_flag(Flag=WEAPON_GANON_GANOND_INSTANCE_WORK_ID_FLAG_HIT_RUMBLE_CHECK)
	0xffdb0()
}
wait(Frames=35)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	CAM_ZOOM_OUT()
}
frame(Frame=96)
0xffdb0()
0xffdb0()
FT_MOTION_RATE(FSM=2)
0xffdb0()
frame(Frame=105)
0xffdb0()
0xffdb0()
FT_MOTION_RATE(FSM=1)
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	ATTACK(ID=0, Part=0, Bone=hash40("top"), Damage=0.0, Angle=20, KBG=70, FKB=220, BKB=40, Size=20.0, X=0.0, Y=20.0, Z=0.0, X2=LUA_VOID, Y2=LUA_VOID, Z2=LUA_VOID, Hitlag=0.0, SDI=1.0, Clang_Rebound=ATTACK_SETOFF_KIND_ON, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=hash40("no"), Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_purple"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_FIRE, Type=ATTACK_REGION_NONE)
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
	0xffdb0()
}
wait(Frames=10)
0xffdb0()
0xffdb0()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0xffdb0()){
	AttackModule::clear_all()
}
