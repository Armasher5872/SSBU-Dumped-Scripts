if macros::is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
}frame(fighter.lua_state_agent, 3.0);
execute(3);
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_STATUS_ATTACK_FLAG_SMASH_SMASH_HOLD_TO_ATTACK);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
if macros::is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
}}frame(fighter.lua_state_agent, 4.0);
if macros::is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 3);
}frame(fighter.lua_state_agent, 5.0);
if macros::is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 3, true);
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 7, false);
ControlModule::set_rumble(boma);
}frame(fighter.lua_state_agent, 6.0);
if macros::is_excute(fighter) {
RUMBLE_HIT(fighter, Hash40::new("rbkind_attackss"), 5);
}frame(fighter.lua_state_agent, 13.0);
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 7, false);
ControlModule::set_rumble(boma);
}frame(fighter.lua_state_agent, 21.0);
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
ControlModule::set_rumble(boma);
}frame(fighter.lua_state_agent, 30.0);
if macros::is_excute(fighter) {
RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
}frame(fighter.lua_state_agent, 39.0);
if macros::is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 12);
}