unsafe extern "C" fn game_finalfinish(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if WorkModule::is_flag(boma, *FIGHTER_SHEIK_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT) {
        frame(lua_state, 1.0);
        if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
            if is_excute(agent) {
                PostureModule::scale(boma, 5, 0);
                0x154f30(-1599779927, 1.5);
                CAM_ZOOM_IN_arg5(-2.8, 2.5);
                camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, -10, 0);
            }
            else{
            if is_excute(agent) {
                PostureModule::scale(boma, 5, 0);
                0x154f30(-1599779927, 1.5);
                CAM_ZOOM_IN_arg5(-2.8, -2.5);
                camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 10, 0);
            }
        }
    }
}
frame(lua_state, 10.0);
if is_excute(agent) {
    FILL_SCREEN_MODEL_COLOR(agent, 0, 10, 0.5, 0.5, 0.5, 0, 0, 0, 0.1, 3, EffectScreenLayer:*CHAR, *EFFECT_SCREEN_PRIO_FINAL);
}
frame(lua_state, 35.0);
if is_excute(agent) {
    CAM_ZOOM_OUT(agent);
}
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
    if is_excute(agent) {
        PostureModule::scale(boma, 5, 0);
        0x154f30(-1599779927, 2);
        CAM_ZOOM_IN_arg5(0, 0.8);
        camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
    }
    else{
    if is_excute(agent) {
        PostureModule::scale(boma, 5, 0);
        0x154f30(-1599779927, 2);
        CAM_ZOOM_IN_arg5(0, -0.8);
        camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
    }
}
}
frame(lua_state, 45.0);
if is_excute(agent) {
WorkModule::on_flag(boma, *FIGHTER_SHEIK_STATUS_FINAL_FLAG_FINISH);
ATTACK(agent, 0, 0, Hash40::new("top"), 12.0, 361, 135, 0, 65, 12.0, 0.0, 8.0, 5.0, Some(0.0), Some(8.0), Some(15.0), 0.2, 1.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
AttackModule::set_force_reaction(boma, 0, true, false);
}
wait(lua_state, 3.0);
if is_excute(agent) {
CAM_ZOOM_OUT(agent);
AttackModule::clear_all(boma);
}
frame(lua_state, 60.0);
if is_excute(agent) {
CANCEL_FILL_SCREEN(agent, 0, 50);
CANCEL_FILL_SCREEN(agent, 1, 50);
CANCEL_FILL_SCREEN(agent, 2, 50);
}
}