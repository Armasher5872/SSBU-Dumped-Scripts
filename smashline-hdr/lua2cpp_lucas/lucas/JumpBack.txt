unsafe extern "C" fn effect_jumpback(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EFFECT_FOLLOW(agent, Hash40::new("sys_jump_smoke"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1, false);
    }
}

unsafe extern "C" fn sound_jumpback(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 2.0);
    WorkModule::is_flag(boma, *FIGHTER_STATUS_JUMP_FLAG_GIMMICK_SPRING_JUMP_FROM_RING);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        if is_excute(agent) {
            PLAY_SEQUENCE(agent, Hash40::new("seq_lucas_rnd_jump"));
        }
        else{
        if is_excute(agent) {
            PLAY_SEQUENCE(agent, Hash40::new("seq_lucas_rnd_jump"));
            PLAY_SE(agent, Hash40::new("se_lucas_jump01"));
        }
    }
}
}

unsafe extern "C" fn expression_jumpback(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    IS_FIGHTER_STATUS_KIND(agent, *FIGHTER_STATUS_KIND_GIMMICK_SPRING_JUMP);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        if is_excute(agent) {
            ControlModule::set_rumble(boma, Hash40::new("rbkind_bounce"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
        }
        else{
        IS_FIGHTER_STATUS_KIND(agent, *FIGHTER_STATUS_KIND_WARPSTAR_JUMP);
        if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
            if is_excute(agent) {
                ControlModule::set_rumble(boma, Hash40::new("rbkind_none"), 0, true, *BATTLE_OBJECT_ID_INVALID as u32);
            }
            else{
            if is_excute(agent) {
                ControlModule::set_rumble(boma, Hash40::new("rbkind_jump"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
            }
        }
    }
}
}
}