#[acmd_script( agent = "ken", script = "game_finalair", category = ACMD_GAME, low_priority)]
unsafe fn game_finalair(fighter: &mut L2CAgentBase) {
    frame(fighter.lua_state_agent, 1.0);
    if macros::is_excute(fighter) {
        macros::CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 0, 20, 0, 0, 0);
        macros::SLOW_OPPONENT(fighter, 10, 70);
    }
    WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
    if(0x16e550(false, false)){
        frame(fighter.lua_state_agent, 5.0);
        if macros::is_excute(fighter) {
            macros::FT_SET_FINAL_FEAR_FACE(fighter, 40);
            macros::REQ_FINAL_START_CAMERA(fighter, Hash40::new("d04final.nuanmb"), true);
            macros::FT_START_CUTIN(fighter);
        }
        else{
        if macros::is_excute(fighter) {
            macros::FT_START_CUTIN(fighter);
        }
        get_value_float(*SO_VAR_FLOAT_LR);
        if(0x16e550(0, 0)){
            if macros::is_excute(fighter) {
                camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
                PostureModule::scale(fighter.module_accessor, 3, 0);
                0x16e550(1760657085, 1.8);
                CAM_ZOOM_IN_arg5(0, 0);
            }
            else{
            if macros::is_excute(fighter) {
                camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
                PostureModule::scale(fighter.module_accessor, 3, 0);
                0x16e550(1760657085, 1.8);
                CAM_ZOOM_IN_arg5(0, 0);
            }
        }
    }
}
}
frame(0, 10);
macros::FT_MOTION_RATE(fighter, 15);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 365, 100, 48, 17, 11.0, 0.0, 8.0, 8.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 1.0, 365, 100, 48, 17, 11.0, 0.0, 8.0, 8.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
AttackModule::set_no_uniq_effect_all(fighter.module_accessor, true, false);
AttackModule::set_damage_shake_scale(fighter.module_accessor, 0.18);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){
if macros::is_excute(fighter) {
    methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 15, 3, 5);
    AttackModule::set_vec_target_pos(fighter.module_accessor);
    methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 15, 3, 5);
    AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 15, 1, 3);
        AttackModule::set_vec_target_pos(fighter.module_accessor);
        methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 15, 1, 3);
        AttackModule::set_vec_target_pos(fighter.module_accessor);
    }
    else{
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 12, 3, 15);
        AttackModule::set_vec_target_pos(fighter.module_accessor);
        methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 13, 6, 15);
        AttackModule::set_vec_target_pos(fighter.module_accessor);
    }
}
}
}
}
wait(fighter.lua_state_agent, 1.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 13.0);
macros::FT_MOTION_RATE(fighter, 1);
frame(fighter.lua_state_agent, 22.0);
frame(0, 25);
if macros::is_excute(fighter) {
macros::CAM_ZOOM_OUT(fighter);
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 5.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 5.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 15, 12, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 15, 9, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 37, 14, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 35, 9, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 19, 13, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 19, 8, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
}
}
}
}
wait(fighter.lua_state_agent, 1.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(0, 40);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 5.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 5.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 15, 12, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 15, 9, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 37, 14, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 35, 9, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 20, 13, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 20, 8, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
}
}
}
}
wait(fighter.lua_state_agent, 1.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(0, 55);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 8.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 8.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 15, 12, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 15, 9, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 46, 14, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 46, 9, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 22, 13, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 22, 8, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
}
}
}
}
wait(fighter.lua_state_agent, 1.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(0, 64);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 8.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 8.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 15, 12, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 15, 9, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 52, 14, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 52, 10, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{
if macros::is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 26, 15, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 26, 8, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
}
}
}
}
wait(fighter.lua_state_agent, 1.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(0, 76);
if macros::is_excute(fighter) {
WorkModule::on_flag(fighter.module_accessor, *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_LOCK_ATTACK);
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 4.0, 50, 95, 40, 0, 11.0, 0.0, 8.0, 8.0, Some(0.0), Some(10.0), Some(8.0), 3.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
PostureModule::scale(fighter.module_accessor, 0);
0x16e550(1760657085, 1.4);
PostureModule::scale(fighter.module_accessor);
0x16e550(0, 0.5);
wait(fighter.lua_state_agent, 1.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
if macros::is_excute(fighter) {
WorkModule::on_flag(fighter.module_accessor, *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_BRANCH_HIT);
SlowModule::clear_whole(fighter.module_accessor, 0);
}
}