#[acmd_script( agent = "inkling", script = "game_attackdash", category = ACMD_GAME, low_priority )]
unsafe fn game_attackdash(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    WorkModule::is_flag(boma, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){
        if is_excute(fighter) {
            ArticleModule::generate_article(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false, -1);
        }
    }
    MotionModule::motion_kind(boma);
    MotionModule::frame(boma, 0x00000002b0);
    MotionModule::rate(boma, -1407754940);
    methodlib::L2CValue::as_hash()const(-1407754940, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false);
    ArticleModule::change_motion(boma);
    if is_excute(fighter) {
        ArticleModule::set_frame(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID);
        ArticleModule::set_rate(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID);
        ArticleModule::set_visibility_whole(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false);
        WorkModule::on_flag(boma, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID);
        StatusModule::status_kind(boma);
        methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *FIGHTER_STATUS_KIND_REBIRTH);
        WorkModule::on_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_FORCE_LOUPE);
    }
    get_value_float(0, *SO_VAR_FLOAT_LR);
    if(0x13d500(0, 0)){
        if is_excute(fighter) {
            methodlib::L2CValue::as_hash()const(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("attack_dash_l"));
            ArticleModule::change_motion(boma);
        }
        else{
        if is_excute(fighter) {
            methodlib::L2CValue::as_hash()const(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("attack_dash_r"));
            ArticleModule::change_motion(boma);
        }
    }
}
frame(lua_state, 1.0);
if is_excute(fighter) {
    VisibilityModule::set_whole(boma, true);
    ArticleModule::set_visibility_whole(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, true);
}
frame(lua_state, 6.0);
if is_excute(fighter) {
    ArticleModule::set_visibility_whole(boma, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false);
}
frame(lua_state, 8.0);
if is_excute(fighter) {
    ATTACK(fighter, 0, 0, Hash40::new("top"), 8.0, 60, 43, 0, 110, 4.0, 0.0, 7.0, 4.0, Some(0.0), Some(7.0), Some(6.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 1, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_ELBOW);
    ATK_SET_SHIELD_SETOFF_MUL(fighter, 0, 1.5);
}
wait(lua_state, 2.0);
if is_excute(fighter) {
    ATTACK(fighter, 0, 0, Hash40::new("top"), 6.0, 60, 43, 0, 100, 3.0, 0.0, 7.0, 4.0, Some(0.0), Some(7.0), Some(6.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 1, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_ELBOW);
    ATK_SET_SHIELD_SETOFF_MUL(fighter, 0, 1.5);
}
wait(lua_state, 4.0);
if is_excute(fighter) {
    AttackModule::clear_all(boma);
}
}