methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	methodlib::L2CValue::as_hash()const(hash40("haver"), ATTACK_DIRECTION_Z, ATTACK_DIRECTION_Y, ATTACK_DIRECTION_X)
	AttackModule::set_attack_reference_joint_id()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	ItemModule::set_have_item_visibility(false)
	0x13ae40()
	slope(MA_MSC_CMD_SLOPE_SLOPE, SLOPE_STATUS_LR)
	0x13ae40()
	0x13ae40()
	0x13ae40()
}
frame(Frame=2)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	VisibilityModule::set_int64(hash40("item"), hash40("item_axe"))
	0x13ae40()
	0x13ae40()
}
frame(Frame=4)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	methodlib::L2CValue::as_hash()const(hash40("rbkind_nohitl"), 0, false)
	ControlModule::set_rumble()
	0x13ae40()
	0x13ae40()
	0x13ae40()
}
frame(Frame=6)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	RUMBLE_HIT(hash40("rbkind_attackl"), 0)
	0x13ae40()
	0x13ae40()
}
frame(Frame=42)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	VisibilityModule::set_int64(hash40("item"), hash40("item_none"))
	0x13ae40()
	0x13ae40()
}
