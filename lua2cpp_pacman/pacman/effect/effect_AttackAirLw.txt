methodlib::L2CValue::operatorbool()const(is_excute)
if(0x11a050()){
	EFFECT_FOLLOW(hash40("sys_smash_flash"), hash40("top"), 0, -4, 3, 0, 0, 0, 0.85, true)
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	LAST_EFFECT_SET_RATE(1.5)
	0x11a050()
}
frame(Frame=5)
0x11a050()
0x11a050()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x11a050()){
	EFFECT_FOLLOW_FLIP_ALPHA(hash40("sys_attack_line"), hash40("sys_attack_line"), hash40("top"), 0, 11, -5, 60, 0, 0, 0.9, true, EF_FLIP_YZ, 0.5)
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	LAST_EFFECT_SET_RATE(1.6)
	0x11a050()
}
frame(Frame=6)
0x11a050()
0x11a050()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x11a050()){
	EFFECT_FLIP(hash40("sys_attack_impact"), hash40("sys_attack_impact"), hash40("top"), 0, -1, 2, 0, 0, 0, 1.15, 0, 0, 0, 0, 0, 0, true, EF_FLIP_YZ)
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
}
frame(Frame=12)
0x11a050()
0x11a050()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x11a050()){
	EFFECT_FOLLOW_FLIP_ALPHA(hash40("sys_attack_line"), hash40("sys_attack_line"), hash40("top"), 0, 11, 5, 100, 0, 0, 0.8, true, EF_FLIP_YZ, 0.5)
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	LAST_EFFECT_SET_RATE(1.6)
	0x11a050()
}
frame(Frame=13)
0x11a050()
0x11a050()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x11a050()){
	EFFECT_FLIP(hash40("sys_attack_impact"), hash40("sys_attack_impact"), hash40("top"), 0, -2, 2, 0, 0, 0, 1.15, 0, 0, 0, 0, 0, 0, true, EF_FLIP_YZ)
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
}
frame(Frame=19)
0x11a050()
0x11a050()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x11a050()){
	EFFECT_FOLLOW_FLIP_ALPHA(hash40("sys_attack_line"), hash40("sys_attack_line"), hash40("top"), 0, 12, -5, 60, 0, 0, 0.9, true, EF_FLIP_YZ, 0.5)
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	LAST_EFFECT_SET_RATE(1.6)
	0x11a050()
}
frame(Frame=20)
0x11a050()
0x11a050()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x11a050()){
	EFFECT_FLIP(hash40("sys_attack_impact"), hash40("sys_attack_impact"), hash40("top"), 0, -1, 2, 0, 0, 0, 1.15, 0, 0, 0, 0, 0, 0, true, EF_FLIP_YZ)
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
}
frame(Frame=26)
0x11a050()
0x11a050()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x11a050()){
	EFFECT_FOLLOW_FLIP_ALPHA(hash40("sys_attack_line"), hash40("sys_attack_line"), hash40("top"), 1, 13, 5, 100, 0, 0, 0.8, true, EF_FLIP_YZ, 0.5)
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	LAST_EFFECT_SET_RATE(1.6)
	0x11a050()
}
frame(Frame=27)
0x11a050()
0x11a050()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x11a050()){
	EFFECT_FLIP(hash40("sys_attack_impact"), hash40("sys_attack_impact"), hash40("top"), 1, -0.5, 2, 0, 0, 0, 1.5, 0, 0, 0, 0, 0, 0, true, EF_FLIP_YZ)
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
	0x11a050()
}
