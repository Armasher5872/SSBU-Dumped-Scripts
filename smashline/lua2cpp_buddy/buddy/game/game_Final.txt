#[acmd_script( agent = "buddy", script = "game_final", category = ACMD_GAME, low_priority )]
unsafe fn game_final(fighter: &mut L2CAgentBase) {
    if macros::is_excute(fighter) {
        macros::FT_SET_FINAL_SMASH_LIGHT(fighter, true);
        ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_BUDDY_GENERATE_ARTICLE_BIGBIRD, false, -1);
        ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_BUDDY_GENERATE_ARTICLE_BIGBIRDBASE, false, -1);
        macros::CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 7, 20, 0, 0, 0);
        camera(*MA_MSC_CMD_CAMERA_CAM_RECT, -5, -5, 15, -10);
        macros::SLOW_OPPONENT(fighter, 15, 30);
    }
    if !WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
        frame(fighter.lua_state_agent, 5.0);
        if macros::is_excute(fighter) {
            macros::FT_SET_FINAL_FEAR_FACE(fighter, 75);
            REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04final.nuanmb"), false, false);
            macros::FT_START_CUTIN(fighter);
            SlowModule::set_whole(fighter.module_accessor, 2, 0);
        }
        else{
        if macros::is_excute(fighter) {
            PostureModule::scale(fighter.module_accessor, 4, 0);
            0x18cc20(0, 2.1);
            CAM_ZOOM_IN_arg5(0, 0);
            macros::FT_START_CUTIN(fighter);
        }
    }
}
if !WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
    frame(fighter.lua_state_agent, 13.0);
    if macros::is_excute(fighter) {
        SlowModule::clear_whole(fighter.module_accessor);
        SlowModule::set_whole(fighter.module_accessor, 4, 0);
    }
}
frame(fighter.lua_state_agent, 18.0);
if macros::is_excute(fighter) {
    SlowModule::clear_whole(fighter.module_accessor);
}
else{
frame(fighter.lua_state_agent, 25.0);
if macros::is_excute(fighter) {
    macros::CAM_ZOOM_OUT(fighter);
}
}
frame(fighter.lua_state_agent, 30.0);
if macros::is_excute(fighter) {
macros::QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
}
frame(fighter.lua_state_agent, 31.0);
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 0, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 13);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 9);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 18);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
PostureModule::scale(fighter.module_accessor, 1, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 8);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 4);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 10);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 4.5);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 10);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 32.0);
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 0, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 13);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 9);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 30);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
PostureModule::scale(fighter.module_accessor, 1, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 8);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 4);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 10);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 10);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 10);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 33.0);
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 0, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 15);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 11);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 35);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
PostureModule::scale(fighter.module_accessor, 1, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 8);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 4);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 10);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 15);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 10);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 34.0);
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 0, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 15);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 11);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 35);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
PostureModule::scale(fighter.module_accessor, 1, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 8);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 4);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 10);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 20);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 10);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 35.0);
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 0, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 15);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 11);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 40);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 36.0);
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 0, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 15);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 11);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 45);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 37.0);
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 0, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 15);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 11);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 45);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(fighter.lua_state_agent, 38.0);
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 0, 0, Hash40::new("top"), 10.0, 70, 100, 100, 0);
0x18cc20(0, 15);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 11);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 0);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 55);
PostureModule::scale(fighter.module_accessor);
0x18cc20(0, 26);
macros::ATTACK(fighter, 0.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
wait(fighter.lua_state_agent, 2.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
macros::REMOVE_FINAL_SCREEN_EFFECT(fighter, 0);
}
frame(fighter.lua_state_agent, 120.0);
if macros::is_excute(fighter) {
macros::CAM_ZOOM_OUT(fighter);
}
}