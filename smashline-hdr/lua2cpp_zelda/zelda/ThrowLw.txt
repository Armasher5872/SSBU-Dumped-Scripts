unsafe extern "C" fn game_throwlw(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        FT_LEAVE_NEAR_OTTOTTO(agent, 1.5, 1.5);
        ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, 0, 2.0, 104, 85, 0, 75, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
        ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_CATCH, 0, 3.0, 361, 100, 0, 40, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
    }
    frame(lua_state, 25.0);
    for _ in 0..4 {
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.5, 40, 100, 25, 0, 7.2, 0.0, 2.0, 0.0, None, None, None, 0.5, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_MAGIC, *ATTACK_REGION_MAGIC);
        AttackModule::set_catch_only_all(boma, true, false);
    }
    wait(lua_state, 2.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    wait(lua_state, 4.0);
}
frame(lua_state, 50.0);
if is_excute(agent) {
    CHECK_FINISH_CAMERA(agent, 2, 0);
    lua_bind::FighterCutInManager::set_throw_finish_zoom_rate(singletons::FighterCutInManager(), 1.5);
    lua_bind::FighterCutInManager::set_throw_finish_offset(singletons::FighterCutInManager(), Vector3f{x: 0.0, y: 5.0, z: 0.0});
}
frame(lua_state, 51.0);
if is_excute(agent) {
    let target = WorkModule::get_int64(boma, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_OBJECT);
        let target_group = WorkModule::get_int64(boma, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_HIT_GROUP);
        let target_no = WorkModule::get_int64(boma, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_HIT_NO);
        ATK_HIT_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, Hash40::new("throw"), target, target_group, target_no);
}
FT_MOTION_RATE(agent, 0.8);
}

unsafe extern "C" fn effect_throwlw(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EFFECT_FOLLOW_FLIP(agent, Hash40::new("zelda_atk_flash_s"), Hash40::new("zelda_atk_flash_s"), Hash40::new("havel"), 0, 0, 0, 0, 0, 0, 1, true, *EF_FLIP_YZ);
    }
    frame(lua_state, 19.0);
    if is_excute(agent) {
        EFFECT_FLIP(agent, Hash40::new("zelda_throw_lw_fire"), Hash40::new("zelda_throw_lw_fire"), Hash40::new("havel"), 1, 0, 0, 0, 45, 15, 1, 0, 0, 0, 0, 0, 0, true, *EF_FLIP_YZ);
        LAST_EFFECT_SET_RATE(agent, 1.1);
        EFFECT_FLIP(agent, Hash40::new("zelda_throw_lw_flash"), Hash40::new("zelda_throw_lw_flash"), Hash40::new("havel"), 1, 0, 0, 0, 0, 0, 0.9, 4, 4, 1, 0, 0, 0, true, *EF_FLIP_YZ);
        LAST_EFFECT_SET_RATE(agent, 1.6);
    }
    frame(lua_state, 24.0);
    if is_excute(agent) {
        EFFECT_FLIP(agent, Hash40::new("sys_damage_fire"), Hash40::new("sys_damage_fire"), Hash40::new("top"), 0, 6.5, -3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, true, *EF_FLIP_YZ);
    }
    frame(lua_state, 25.0);
    if is_excute(agent) {
        EFFECT_FLIP(agent, Hash40::new("zelda_throw_lw_fire"), Hash40::new("zelda_throw_lw_fire"), Hash40::new("havel"), 1, -1, 1, 10, 45, 0, 0.8, 0, 0, 0, 0, 0, 0, true, *EF_FLIP_YZ);
        LAST_EFFECT_SET_RATE(agent, 1.2);
        EFFECT_FLIP(agent, Hash40::new("zelda_throw_lw_flash"), Hash40::new("zelda_throw_lw_flash"), Hash40::new("havel"), 1, 0, 0, 0, 0, 0, 0.9, 4, 4, 1, 0, 0, 0, true, *EF_FLIP_YZ);
        LAST_EFFECT_SET_RATE(agent, 1.6);
    }
    frame(lua_state, 29.0);
    if is_excute(agent) {
        EFFECT_FLIP(agent, Hash40::new("sys_damage_fire"), Hash40::new("sys_damage_fire"), Hash40::new("top"), 0, 6.5, -3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, true, *EF_FLIP_YZ);
    }
    frame(lua_state, 28.0);
    if is_excute(agent) {
        EFFECT_FLIP(agent, Hash40::new("zelda_throw_lw_fire"), Hash40::new("zelda_throw_lw_fire"), Hash40::new("havel"), 1, 0.5, 0, -10, 45, 0, 0.7, 0, 0, 0, 0, 0, 0, true, *EF_FLIP_YZ);
        LAST_EFFECT_SET_RATE(agent, 1.1);
        EFFECT_FLIP(agent, Hash40::new("zelda_throw_lw_flash"), Hash40::new("zelda_throw_lw_flash"), Hash40::new("havel"), 1, 0, 0, 0, 0, 0, 0.95, 4, 4, 1, 0, 0, 0, true, *EF_FLIP_YZ);
        LAST_EFFECT_SET_RATE(agent, 1.4);
    }
    frame(lua_state, 35.0);
    if is_excute(agent) {
        EFFECT_FLIP(agent, Hash40::new("sys_damage_fire"), Hash40::new("sys_damage_fire"), Hash40::new("top"), 0, 6.5, -3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, true, *EF_FLIP_YZ);
    }
    frame(lua_state, 35.0);
    if is_excute(agent) {
        EFFECT_FLIP(agent, Hash40::new("zelda_throw_lw_fire"), Hash40::new("zelda_throw_lw_fire"), Hash40::new("top"), -6, 16, 1, 90, 0, 80, 1.2, 0, 0, 0, 0, 0, 0, true, *EF_FLIP_YZ);
        LAST_EFFECT_SET_RATE(agent, 0.7);
    }
    frame(lua_state, 43.0);
    if is_excute(agent) {
        EFFECT_FLIP(agent, Hash40::new("zelda_throw_lw_flash"), Hash40::new("zelda_throw_lw_flash"), Hash40::new("havel"), 1, 0, 0, 0, 0, 0, 1.3, 0, 0, 0, 0, 0, 0, true, *EF_FLIP_YZ);
    }
    frame(lua_state, 50.0);
    if is_excute(agent) {
        EFFECT_FLIP(agent, Hash40::new("sys_damage_fire"), Hash40::new("sys_damage_fire"), Hash40::new("top"), -3, 6.5, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, true, *EF_FLIP_YZ);
        LANDING_EFFECT(agent, Hash40::new("sys_crown"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, false);
    }
    frame(lua_state, 69.0);
    if is_excute(agent) {
        FOOT_EFFECT(agent, Hash40::new("sys_down_smoke"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, false);
        LAST_EFFECT_SET_RATE(agent, 1.5);
    }
}

unsafe extern "C" fn sound_throwlw(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 2.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_common_throw_01"));
    }
    frame(lua_state, 12.0);
    if is_excute(agent) {
        PLAY_DOWN_SE(agent, Hash40::new("se_common_down_soil_s"));
    }
    frame(lua_state, 20.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_zelda_throw_l01"));
        PLAY_SEQUENCE(agent, Hash40::new("seq_zelda_rnd_attack"));
    }
    frame(lua_state, 23.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_zelda_throw_l01"));
    }
    frame(lua_state, 28.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_zelda_throw_l01"));
    }
    frame(lua_state, 35.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_zelda_throw_l01"));
    }
    frame(lua_state, 52.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_common_throw_03"));
    }
}

unsafe extern "C" fn expression_throwlw(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(lua_state, 2.0);
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_NONE, 3);
    }
    frame(lua_state, 25.0);
    if is_excute(agent) {
        RUMBLE_HIT(agent, Hash40::new("rbkind_attacks"), 7);
    }
    frame(lua_state, 51.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_L);
    }
    frame(lua_state, 52.0);
    if is_excute(agent) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_attackm"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 56.0);
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 6);
    }
}