#[acmd_script( agent = "tantan", script = "game_finalair", category = ACMD_GAME, low_priority )]
unsafe fn game_finalair(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 1.0);
    if is_excute(agent) {
        CHECK_VALID_FINAL_START_CAMERA(agent, 0, 7, 27, 0, 0, 0);
        SLOW_OPPONENT(agent, 15, 60);
    }
    if !WorkModule::is_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
        frame(lua_state, 5.0);
        if is_excute(agent) {
            FT_SET_FINAL_FEAR_FACE(agent, 50);
        }
    }
    if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if is_excute(agent) {
            REQ_FINAL_START_CAMERA(agent, Hash40::new("d04final02.nuanmb"), false);
        }
        else{
        if is_excute(agent) {
            PostureModule::scale(boma, 4, 0);
            0x3a02e0(-1808392141, 2.1);
            CAM_ZOOM_IN_arg5(0, 0);
        }
        else{
        if is_excute(agent) {
            REQ_FINAL_START_CAMERA(agent, Hash40::new("d04final.nuanmb"), false);
        }
        if is_excute(agent) {
            FT_START_CUTIN(agent);
        }
    }
}
}
frame(lua_state, 25.0);
if is_excute(agent) {
CAM_ZOOM_OUT(agent);
}
frame(lua_state, 58.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 7.0, 0.0, 7.0, 8.0, Some(0.0), Some(7.0), Some(22.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_TANTAN_FINAL, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(boma, true, false);
}
frame(lua_state, 59.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 7.0, 0.0, 7.0, 8.0, Some(0.0), Some(7.0), Some(30.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_TANTAN_FINAL, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(boma, true, false);
}
frame(lua_state, 60.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 7.0, 0.0, 7.0, 8.0, Some(0.0), Some(7.0), Some(38.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_TANTAN_FINAL, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(boma, true, false);
}
frame(lua_state, 61.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 7.0, 0.0, 7.0, 22.0, Some(0.0), Some(7.0), Some(46.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_TANTAN_FINAL, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(boma, true, false);
}
frame(lua_state, 62.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 7.0, 0.0, 7.0, 28.0, Some(0.0), Some(7.0), Some(54.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_TANTAN_FINAL, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(boma, true, false);
}
frame(lua_state, 63.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 7.0, 0.0, 7.0, 32.0, Some(0.0), Some(7.0), Some(59.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_TANTAN_FINAL, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(boma, true, false);
}
frame(lua_state, 64.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 7.0, 0.0, 7.0, 34.0, Some(0.0), Some(7.0), Some(65.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_TANTAN_FINAL, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(boma, true, false);
}
frame(lua_state, 65.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 7.0, 0.0, 7.0, 36.0, Some(0.0), Some(7.0), Some(69.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_TANTAN_FINAL, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(boma, true, false);
}
frame(lua_state, 66.0);
if is_excute(agent) {
ATTACK(agent, 0, 0, Hash40::new("top"), 10.0, 60, 70, 0, 70, 7.0, 0.0, 7.0, 38.0, Some(0.0), Some(7.0), Some(71.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_TANTAN_FINAL, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(boma, true, false);
}
frame(lua_state, 68.0);
if is_excute(agent) {
AttackModule::clear_all(boma);
}
}