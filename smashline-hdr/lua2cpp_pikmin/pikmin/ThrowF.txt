unsafe extern "C" fn game_throwf(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(*FIGHTER_PIKMIN_INSTANCE_WORK_INT_THROW_PIKMIN_VARIATION, *WEAPON_PIKMIN_PIKMIN_VARIATION_RED)){
        if is_excute(agent) {
            ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, 0, 5.6, 361, 60, 0, 65, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
        }
        else{
        if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(*FIGHTER_PIKMIN_INSTANCE_WORK_INT_THROW_PIKMIN_VARIATION, *WEAPON_PIKMIN_PIKMIN_VARIATION_YELLOW)){
            if is_excute(agent) {
                ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, 0, 7.0, 361, 60, 0, 65, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
            }
            else{
            if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(*FIGHTER_PIKMIN_INSTANCE_WORK_INT_THROW_PIKMIN_VARIATION, *WEAPON_PIKMIN_PIKMIN_VARIATION_BLUE)){
                if is_excute(agent) {
                    ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, 0, 11.9, 361, 60, 0, 65, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
                }
                else{
                if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(*FIGHTER_PIKMIN_INSTANCE_WORK_INT_THROW_PIKMIN_VARIATION, *WEAPON_PIKMIN_PIKMIN_VARIATION_WHITE)){
                    if is_excute(agent) {
                        ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, 0, 7.0, 361, 60, 0, 65, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_purple"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
                    }
                    else{
                    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(*FIGHTER_PIKMIN_INSTANCE_WORK_INT_THROW_PIKMIN_VARIATION, *WEAPON_PIKMIN_PIKMIN_VARIATION_VIOLET)){
                        if is_excute(agent) {
                            ATTACK_ABS(agent, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, 0, 7.0, 361, 60, 0, 65, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
                        }
                    }
                }
            }
        }
    }
}
}
}
}
frame(lua_state, 1.0);
if is_excute(agent) {
WHOLE_HIT(agent, *HIT_STATUS_INVINCIBLE);
}
frame(lua_state, 18.0);
if is_excute(agent) {
CHECK_FINISH_CAMERA(agent, 0, 0);
lua_bind::FighterCutInManager::set_throw_finish_zoom_rate(singletons::FighterCutInManager(), 1.3);
lua_bind::FighterCutInManager::set_throw_finish_offset(singletons::FighterCutInManager(), Vector3f{x: 12.0, y: 0.0, z: 0.0});
}
frame(lua_state, 19.0);
if is_excute(agent) {
WHOLE_HIT(agent, *HIT_STATUS_NORMAL);
}
}

unsafe extern "C" fn effect_throwf(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        LANDING_EFFECT(agent, Hash40::new("sys_landing_smoke"), Hash40::new("top"), 17, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0, false);
    }
    frame(lua_state, 5.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("sys_smash_flash_s"), Hash40::new("top"), 0, 14, 10, 0, 0, 0, 1.2, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 14.0);
    if is_excute(agent) {
        EFFECT_ALPHA(agent, Hash40::new("sys_attack_speedline"), Hash40::new("top"), 0, 22, 18, 70, 0, 0, 1.1, 0, 0, 0, 0, 0, 0, true, 0.45);
        EFFECT(agent, Hash40::new("pikmin_grab_dash"), Hash40::new("top"), 0, 14, 18, 70, 0, 0, 1.2, 0, 0, 0, 0, 0, 0, true);
    }
    frame(lua_state, 17.0);
    if is_excute(agent) {
        EFFECT(agent, Hash40::new("sys_crown"), Hash40::new("top"), 21, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0, false);
    }
    frame(lua_state, 20.0);
    if is_excute(agent) {
        EFFECT_OFF_KIND(agent, Hash40::new("pikmin_grab_dash"), false, true);
    }
}

unsafe extern "C" fn sound_throwf(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 2.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_common_throw_01"));
    }
    wait(lua_state, 13.0);
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_common_throw_02"));
    }
}

unsafe extern "C" fn expression_throwf(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    }
    frame(lua_state, 17.0);
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_M);
        ControlModule::set_rumble(boma, Hash40::new("rbkind_attackm"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
}