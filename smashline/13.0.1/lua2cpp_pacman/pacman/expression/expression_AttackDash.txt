if macros::is_excute(fighter) {
	slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 3);
}
frame(fighter.lua_state_agent, 3.0);
if macros::is_excute(fighter) {
	slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 4, true);
}
frame(fighter.lua_state_agent, 4.0);
if macros::is_excute(fighter) {
	ItemModule::set_have_item_visibility(fighter.module_accessor, false);
}
frame(fighter.lua_state_agent, 5.0);
if macros::is_excute(fighter) {
	ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	ItemModule::set_attach_item_visibility(fighter.module_accessor, false, *ATTACH_ITEM_GROUP_ALL);
	VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_none"));
	VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("pizza"), Hash40::new("pizza_normal"));
	macros::HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
	macros::HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
	macros::HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
	macros::HIT_NODE(fighter, Hash40::new("handr"), *HIT_STATUS_OFF);
	macros::HIT_NODE(fighter, Hash40::new("handl"), *HIT_STATUS_OFF);
	macros::HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
	macros::HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
	macros::HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
	macros::HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
	macros::HIT_NODE(fighter, Hash40::new("pizzapacman"), *HIT_STATUS_NORMAL);
}
if macros::is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("pizzapacman"), *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Z);
	AttackModule::set_attack_reference_joint_id(fighter.module_accessor, 0);
}
frame(fighter.lua_state_agent, 7.0);
if macros::is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 8, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 10.0);
if macros::is_excute(fighter) {
	macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_attacks"), 0);
}
frame(fighter.lua_state_agent, 16.0);
if macros::is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 8, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 25.0);
if macros::is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 8, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 34.0);
if macros::is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 8, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 49.0);
if macros::is_excute(fighter) {
	ItemModule::set_have_item_visibility(fighter.module_accessor, true);
	ItemModule::set_attach_item_visibility(fighter.module_accessor, true, *ATTACH_ITEM_GROUP_ALL);
	VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_normal"));
	VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("pizza"), Hash40::new("pizza_none"));
	macros::HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_NORMAL);
	macros::HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_NORMAL);
	macros::HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_NORMAL);
	macros::HIT_NODE(fighter, Hash40::new("handr"), *HIT_STATUS_NORMAL);
	macros::HIT_NODE(fighter, Hash40::new("handl"), *HIT_STATUS_NORMAL);
	macros::HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_NORMAL);
	macros::HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_NORMAL);
	macros::HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_NORMAL);
	macros::HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_NORMAL);
	macros::HIT_NODE(fighter, Hash40::new("pizzapacman"), *HIT_STATUS_OFF);
}
if macros::is_excute(fighter) {
	ItemModule::set_have_item_visibility(fighter.module_accessor, false);
}
frame(fighter.lua_state_agent, 50.0);
if macros::is_excute(fighter) {
	ItemModule::set_have_item_visibility(fighter.module_accessor, true);
	slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 6);
}
