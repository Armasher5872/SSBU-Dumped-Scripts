#[acmd_script( agent = "pfushigisou", script = "game_final", category = ACMD_GAME, low_priority )]
unsafe fn game_final(fighter: &mut L2CAgentBase) {
    if macros::is_excute(fighter) {
        macros::CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 1, 20, 0, 0, 0);
        macros::SLOW_OPPONENT(fighter, 5, 30);
        VisibilityModule::set_int64(fighter.module_accessor, hash40("weapon") as i64, hash40("weapon_normal") as i64);
    }
    if !WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
        frame(fighter.lua_state_agent, 10.0);
        if macros::is_excute(fighter) {
            macros::FT_SET_FINAL_FEAR_FACE(fighter, 60);
            REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04final.nuanmb"), false, false);
            FT_START_CUTIN_arg1(true);
        }
        else{
        if macros::is_excute(fighter) {
            PostureModule::scale(fighter.module_accessor, 4, 0);
            0x103920(1808763720, 2.1);
            CAM_ZOOM_IN_arg5(0, 0);
            FT_START_CUTIN_arg1(true);
        }
        frame(fighter.lua_state_agent, 25.0);
        if macros::is_excute(fighter) {
            macros::CAM_ZOOM_OUT(fighter);
        }
    }
}
frame(fighter.lua_state_agent, 30.0);
if macros::is_excute(fighter) {
    macros::ATTACK(fighter, 0, 1, Hash40::new("top"), 0.0, 40, 100, 100, 0, 20.0, 0.0, 10.0, 0.0, None, None, None, 0.9, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
}
frame(fighter.lua_state_agent, 60.0);
if macros::is_excute(fighter) {
    AttackModule::clear_all(fighter.module_accessor);
    camera!(fighter, *MA_MSC_CMD_CAMERA_CAM_RESET);
}
get_value_float(*SO_VAR_FLOAT_LR);
if(0x103920(464, 0)){
    if macros::is_excute(fighter) {
        camera!(fighter, *MA_MSC_CMD_CAMERA_CAM_OFFSET, -50, 0, 0);
        camera!(fighter, *MA_MSC_CMD_CAMERA_CAM_RECT, 60, -56, 18, -8);
    }
    else{
    if macros::is_excute(fighter) {
        camera!(fighter, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 50, 0, 0);
        camera!(fighter, *MA_MSC_CMD_CAMERA_CAM_RECT, 60, -56, 18, -8);
    }
}
}
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 0.2, 367, 100, 45, 5, 6.5, 0.0, 10.0, 200.0, Some(0.0), Some(10.0), Some(200.0), 0.9, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 5, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 0.2, 10, 100, 45, 5, 6.5, 0.0, 10.0, 15.0, Some(0.0), Some(10.0), Some(200.0), 0.9, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 5, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, true, -1, false);
AttackModule::set_final_finish_cut_in(fighter.module_accessor, 1, true, true, -1, false);
}
frame(fighter.lua_state_agent, 230.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 231.0);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 0, 0, Hash40::new("top"), 5.0, 361, 128, 0, 80, 9.0, 0.0, 10.0, 15.0, Some(0.0), Some(10.0), Some(200.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 5, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, true, -1, false);
}
frame(fighter.lua_state_agent, 240.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(fighter.lua_state_agent, 317.0);
if macros::is_excute(fighter) {
cancel(*MA_MSC_CMD_CANCEL_ENABLE_CANCEL);
}
}