#[acmd_script( agent = "gamewatch", script = "expression_attackhi4r" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackhi4r(fighter: &mut L2CAgentBase) {
    if macros::is_excute(fighter) {
        VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("hand"), Hash40::new("hand_hold_lr"));
        VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("head"), Hash40::new("head_diver"));
    }
    if macros::is_excute(fighter) {
        slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_TOP);
    }
    frame(fighter.lua_state_agent, 16.0);
    execute(16);
    WorkModule::is_flag(fighter.module_accessor, *FIGHTER_STATUS_ATTACK_FLAG_SMASH_SMASH_HOLD_TO_ATTACK);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        if macros::is_excute(fighter) {
            VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("hand"), Hash40::new("hand_hold_lr"));
            VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("head"), Hash40::new("head_diver"));
        }
        if macros::is_excute(fighter) {
            slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_TOP);
        }
    }
    frame(fighter.lua_state_agent, 19.0);
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
        ControlModule::set_rumble(fighter.module_accessor);
    }
    frame(fighter.lua_state_agent, 21.0);
    if macros::is_excute(fighter) {
        macros::RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
    }
}