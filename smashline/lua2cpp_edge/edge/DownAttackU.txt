unsafe extern "C" fn game_downattacku(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 19.0);
    if macros::is_excute(agent) {
        macros::ATTACK(agent, 0, 0, Hash40::new("top"), 7.0, 48, 48, 0, 80, 5.0, 0.0, 5.0, -12.5, Some(0.0), Some(5.0), Some(-5.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
    }
    wait(agent.lua_state_agent, 2.0);
    if macros::is_excute(agent) {
        AttackModule::clear_all(agent.module_accessor);
    }
    frame(agent.lua_state_agent, 24.0);
    if macros::is_excute(agent) {
        macros::ATTACK(agent, 0, 0, Hash40::new("top"), 7.0, 48, 48, 0, 80, 5.0, 0.0, 5.0, 12.0, Some(0.0), Some(5.0), Some(5.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
    }
    wait(agent.lua_state_agent, 2.0);
    if macros::is_excute(agent) {
        AttackModule::clear_all(agent.module_accessor);
    }
}

unsafe extern "C" fn effect_downattacku(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 14.0);
    if macros::is_excute(agent) {
        macros::LANDING_EFFECT(agent, Hash40::new("sys_whirlwind_r"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0, 0, 0, 0, false);
        macros::LAST_EFFECT_SET_ALPHA(agent, 0.6);
    }
    frame(agent.lua_state_agent, 18.0);
    if get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if macros::is_excute(agent) {
            macros::EFFECT_FOLLOW_COLOR(agent, Hash40::new("sys_attack_arc_d"), Hash40::new("top"), 0, 3.743, -5, 174.732, -22.712, 14.403, 1, true, 0.75, 0.5, 1.5);
            macros::LAST_EFFECT_SET_ALPHA(agent, 0.5);
            macros::LAST_EFFECT_SET_RATE(agent, 1.4);
        }
        else{
        if macros::is_excute(agent) {
            macros::EFFECT_FOLLOW_COLOR(agent, Hash40::new("sys_attack_arc_d"), Hash40::new("top"), 0, 3.743, -5, 179.821, 0.549, 12.435, 1, true, 0.75, 0.5, 1.5);
            macros::LAST_EFFECT_SET_ALPHA(agent, 0.5);
            macros::LAST_EFFECT_SET_RATE(agent, 1.4);
        }
    }
}
frame(agent.lua_state_agent, 23.0);
if get_value_float(agent.lua_state_agent, *SO_VAR_FLOAT_LR) < 0.0 {
    if macros::is_excute(agent) {
        macros::EFFECT_FOLLOW_COLOR(agent, Hash40::new("sys_attack_arc_d"), Hash40::new("top"), 0, 3.861, 5, 1, 24.489, 190.356, 1, true, 0.75, 0.5, 1.5);
        macros::LAST_EFFECT_SET_ALPHA(agent, 0.5);
        macros::LAST_EFFECT_SET_RATE(agent, 1.4);
    }
    else{
    if macros::is_excute(agent) {
        macros::EFFECT_FOLLOW_COLOR(agent, Hash40::new("sys_attack_arc_d"), Hash40::new("top"), 0, 3.861, 5, -2.314, 1.326, 190.91, 1, true, 0.75, 0.5, 1.5);
        macros::LAST_EFFECT_SET_ALPHA(agent, 0.5);
        macros::LAST_EFFECT_SET_RATE(agent, 1.4);
    }
}
}
}

unsafe extern "C" fn sound_downattacku(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 8.0);
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("se_edge_squat"));
    }
    frame(agent.lua_state_agent, 16.0);
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("se_edge_swing_s01"));
    }
    frame(agent.lua_state_agent, 21.0);
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("se_edge_swing_m01"));
    }
    frame(agent.lua_state_agent, 42.0);
    if macros::is_excute(agent) {
        macros::PLAY_SE(agent, Hash40::new("se_edge_rise"));
    }
}

unsafe extern "C" fn expression_downattacku(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 6, true);
    }
    frame(agent.lua_state_agent, 17.0);
    if macros::is_excute(agent) {
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_nohitl"), 4, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(agent.lua_state_agent, 22.0);
    if macros::is_excute(agent) {
        ControlModule::set_rumble(agent.module_accessor, Hash40::new("rbkind_nohitl"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(agent.lua_state_agent, 28.0);
    if macros::is_excute(agent) {
        slope!(agent, *MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 5);
    }
}