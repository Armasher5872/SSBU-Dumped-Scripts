#[acmd_script( agent = "sonic", script = "expression_cliffattack", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_cliffattack(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    frame(lua_state, 17.0);
    if is_excute(fighter) {
        ControlModule::set_rumble(boma, Hash40::new("rbkind_elecattacks"), 10, true, *BATTLE_OBJECT_ID_INVALID as u32);
    }
    frame(lua_state, 18.0);
    if is_excute(fighter) {
        ItemModule::set_have_item_visibility(boma, false);
        ItemModule::set_attach_item_visibility(boma, false);
    }
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, hash40("body") as i64, hash40("body_sphere") as i64);
        HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_NORMAL);
    }
    for _ in 0..5 {
    wait(lua_state, 1.0);
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, hash40("body") as i64, hash40("body_normal") as i64);
        HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_OFF);
    }
    if is_excute(fighter) {
        RUMBLE_HIT(fighter, Hash40::new("rbkind_attackm"), 0);
    }
    wait(lua_state, 1.0);
}
if is_excute(fighter) {
    VisibilityModule::set_int64(boma, hash40("body") as i64, hash40("body_sphere") as i64);
    HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_NORMAL);
}
wait(lua_state, 1.0);
if is_excute(fighter) {
    VisibilityModule::set_int64(boma, hash40("body") as i64, hash40("body_normal") as i64);
    HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_OFF);
}
wait(lua_state, 2.0);
if is_excute(fighter) {
    VisibilityModule::set_int64(boma, hash40("body") as i64, hash40("body_sphere") as i64);
    HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_NORMAL);
}
wait(lua_state, 1.0);
if is_excute(fighter) {
    VisibilityModule::set_int64(boma, hash40("body") as i64, hash40("body_normal") as i64);
    HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_OFF);
}
wait(lua_state, 2.0);
if is_excute(fighter) {
    VisibilityModule::set_int64(boma, hash40("body") as i64, hash40("body_sphere") as i64);
    HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_OFF);
    HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_NORMAL);
}
wait(lua_state, 1.0);
if is_excute(fighter) {
    VisibilityModule::set_int64(boma, hash40("body") as i64, hash40("body_normal") as i64);
    HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_NORMAL);
    HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_OFF);
}
wait(lua_state, 2.0);
frame(lua_state, 51.0);
if is_excute(fighter) {
    slope!(fighter, *MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
    ItemModule::set_attach_item_visibility(boma, true);
}
frame(lua_state, 52.0);
if is_excute(fighter) {
    ItemModule::set_have_item_visibility(boma, true);
}
}