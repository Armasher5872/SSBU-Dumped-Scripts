#[acmd_script( agent = "edge", script = "effect_final" , category = ACMD_EFFECT , low_priority)]
unsafe fn effect_final(fighter: &mut L2CAgentBase) {
    if macros::is_excute(fighter) {
        methodlib::L2CValue::as_hash()const(Hash40::new("bg_edge_final"), false);
        EffectModule::req_screen(fighter.module_accessor);
        macros::EFFECT_FOLLOW(fighter, Hash40::new("edge_final_swoad_flare"), Hash40::new("swordl2"), 0, 0, 0, 0, 180, -90, 1, true);
    }
    frame(fighter.lua_state_agent, 58.0);
    if macros::is_excute(fighter) {
        AFTER_IMAGE4_ON_arg29(Hash40::new("tex_edge_sword1"), Hash40::new("tex_edge_sword2"), 6, Hash40::new("swordl2"), -4, 0, -0.7, Hash40::new("swordl2"), 29.2, 0, 1.5, true, Hash40::new("null"), Hash40::new("swordl2"), 0, 0, 0, 0, 0, 0, 1, 0, *EFFECT_AXIS_X, 0, *TRAIL_BLEND_ALPHA, 101, *TRAIL_CULL_NONE, 1.4, 0.1);
        macros::EFFECT_FOLLOW(fighter, Hash40::new("edge_sword_flare"), Hash40::new("swordl2"), 0, 0, 0, 0, 180, -90, 1, true);
        macros::FOOT_EFFECT(fighter, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -2, 0, 0, 0, 0, 0, 0.7, 10, 0, 4, 0, 0, 0, false);
    }
    frame(fighter.lua_state_agent, 59.0);
    if macros::is_excute(fighter) {
        macros::EFFECT_FOLLOW(fighter, Hash40::new("edge_final_start"), Hash40::new("top"), 0, 13, 12, 0, 0, -30, 0.6, false);
        macros::LAST_EFFECT_SET_RATE(fighter, 1.4);
        macros::EFFECT(fighter, Hash40::new("edge_final_start2"), Hash40::new("top"), 0, 13, 12, 0, 0, 210, 0.6, 0, 0, 0, 0, 0, 0, true);
    }
    frame(fighter.lua_state_agent, 61.0);
    if macros::is_excute(fighter) {
        macros::EFFECT_OFF_KIND(fighter, Hash40::new("edge_sword_flare"), true, true);
        macros::EFFECT_FOLLOW(fighter, Hash40::new("edge_sword_light"), Hash40::new("swordl2"), 0, 0, 0, 0, 180, -90, 1, true);
        macros::AFTER_IMAGE_OFF(fighter, 3);
    }
    frame(fighter.lua_state_agent, 65.0);
    if macros::is_excute(fighter) {
        macros::EFFECT_OFF_KIND(fighter, Hash40::new("edge_final_start2"), false, true);
    }
}