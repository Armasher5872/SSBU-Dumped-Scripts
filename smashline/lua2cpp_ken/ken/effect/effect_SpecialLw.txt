#[acmd_script( agent = "ken", script = "effect_speciallw", category = ACMD_EFFECT, low_priority )]
unsafe fn effect_speciallw(agent: &mut L2CAgentBase) {
    if(0x16e550(*FIGHTER_RYU_STATUS_WORK_ID_SPECIAL_LW_INT_SAVING_LV, FIGHTER_RYU_SAVING_LV_1)){
        frame(agent.lua_state_agent, 5.0);
        if macros::is_excute(agent) {
            macros::LANDING_EFFECT_FLIP(agent, Hash40::new("sys_whirlwind_r"), Hash40::new("sys_whirlwind_l"), Hash40::new("top"), 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false, *EF_FLIP_NONE);
        }
    }
    frame(agent.lua_state_agent, 8.0);
    if get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if macros::is_excute(agent) {
            macros::EFFECT_FOLLOW(agent, Hash40::new("ken_savingattack_line_l"), Hash40::new("top"), 4, 10.5, 0, 0, 0, -5, 1, true);
        }
        else{
        if(0x16e550(*FIGHTER_RYU_STATUS_WORK_ID_SPECIAL_LW_INT_SAVING_LV, FIGHTER_RYU_SAVING_LV_2)){
            frame(agent.lua_state_agent, 5.0);
            if macros::is_excute(agent) {
                macros::LANDING_EFFECT_FLIP(agent, Hash40::new("sys_whirlwind_r"), Hash40::new("sys_whirlwind_l"), Hash40::new("top"), 2, 0, 0, 0, 0, 0, 1.1, 0, 0, 0, 0, 0, 0, false, *EF_FLIP_NONE);
            }
            frame(agent.lua_state_agent, 8.0);
            if get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
                if macros::is_excute(agent) {
                    macros::EFFECT_FOLLOW(agent, Hash40::new("ken_savingattack_line_l"), Hash40::new("top"), 4, 10.5, 0, 0, 0, -5, 1.05, true);
                }
                else{
                if macros::is_excute(agent) {
                    macros::FLASH(agent, 1, 1, 0.392, 0.784);
                }
                wait(agent.lua_state_agent, 3.0);
                if macros::is_excute(agent) {
                    macros::COL_NORMAL(agent);
                }
                wait(agent.lua_state_agent, 2.0);
                if macros::is_excute(agent) {
                    macros::FLASH(agent, 1, 1, 1, 0.667);
                    macros::LANDING_EFFECT_FLIP(agent, Hash40::new("sys_whirlwind_r"), Hash40::new("sys_whirlwind_l"), Hash40::new("top"), 2, 0, 0, 0, 0, 0, 1.1, 0, 0, 0, 0, 0, 0, false, *EF_FLIP_NONE);
                }
                wait(agent.lua_state_agent, 2.0);
                if macros::is_excute(agent) {
                    macros::COL_NORMAL(agent);
                }
                wait(agent.lua_state_agent, 1.0);
                if get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
                    if macros::is_excute(agent) {
                        macros::EFFECT_FOLLOW(agent, Hash40::new("ken_savingattack_line_l2"), Hash40::new("top"), 4, 10.5, 0, 0, 0, -5, 1.15, true);
                    }
                    else{
                    if macros::is_excute(agent) {
                        macros::EFFECT_FOLLOW(agent, Hash40::new("ken_savingattack_line_r"), Hash40::new("top"), -4, 10.5, 0, 0, 0, 5, 1, true);
                    }
                    else{
                    if macros::is_excute(agent) {
                        macros::EFFECT_FOLLOW(agent, Hash40::new("ken_savingattack_line_r"), Hash40::new("top"), -4, 10.5, 0, 0, 0, 5, 1.05, true);
                    }
                    else{
                    if macros::is_excute(agent) {
                        macros::EFFECT_FOLLOW(agent, Hash40::new("ken_savingattack_line_r2"), Hash40::new("top"), -4, 10.5, 0, 0, 0, 5, 1.15, true);
                    }
                    wait(agent.lua_state_agent, 1.0);
                    if macros::is_excute(agent) {
                        macros::FLASH(agent, 1, 1, 0.392, 0.588);
                    }
                    wait(agent.lua_state_agent, 2.0);
                    if macros::is_excute(agent) {
                        macros::COL_NORMAL(agent);
                    }
                }
            }
        }
    }
}
}
}
}
}
frame(agent.lua_state_agent, 24.0);
if macros::is_excute(agent) {
macros::LANDING_EFFECT(agent, Hash40::new("sys_landing_smoke_s"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, false);
}
}