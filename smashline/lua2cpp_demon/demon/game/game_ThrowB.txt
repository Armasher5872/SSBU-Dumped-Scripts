#[acmd_script( agent = "demon", script = "game_throwb", category = ACMD_GAME, low_priority)]
unsafe fn game_throwb(fighter: &mut L2CAgentBase) {
    is_vr_mode();
    if(0x3cfb70(false, false)){
        battle_object_module_accessor();
        methodlib::L2CValue::L2CValue(void*)();
    }
    else{
    methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const();
is_one_on_one_including_thrown();
if(0x3cfb70(false, true)){
    if macros::is_excute(fighter) {
        battle_object_module_accessor();
        methodlib::L2CValue::L2CValue(void*)();
    }
    else{
    methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
}
methodlib::L2CValue::as_pointer()const();
check_disabled_motion_camera_of_scale();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const();
check_disabled_motion_camera_of_stage();
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DEMON_INSTANCE_WORK_ID_FLAG_ENABLE_THROW_MOTION_CAMERA);
if(0x3cfb70(false, true)){
if macros::is_excute(fighter) {
    macros::CHECK_VALID_START_CAMERA(fighter, 0, 7, 0, 35, 0, 0, false);
}
}
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DEMON_INSTANCE_WORK_ID_FLAG_DISABLE_THROW_MOTION_CAMERA);
if(0x3cfb70(false, false)){
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
if(0x3cfb70(false, false)){
    if macros::is_excute(fighter) {
        macros::REQ_MOTION_CAMERA(fighter, Hash40::new("e01throwb.nuanmb"), false);
    }
}
}
if macros::is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 7, 0);
0x3cfb70(-1037516665, 1.5);
CAM_ZOOM_IN_arg5(0, 0);
}
frame(fighter.lua_state_agent, 27.0);
if macros::is_excute(fighter) {
macros::REVERSE_LR(fighter);
macros::ATTACK_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, 0, 0.0, 58, 340, 0, 34, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
macros::ATTACK_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_CATCH, 0, 3.0, 361, 100, 0, 40, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
}
frame(fighter.lua_state_agent, 46.0);
if macros::is_excute(fighter) {
macros::ATTACK(fighter, 1, 0, Hash40::new("top"), 14.0, 58, 55, 0, 60, 4.0, 0.0, 2.0, -12.0, Some(0.0), Some(2.0), Some(-22.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_DEMON_KICK, *ATTACK_REGION_BODY);
AttackModule::set_catch_only_all(fighter.module_accessor, true, false);
macros::CHECK_FINISH_CAMERA(fighter, 17, 0);
}
frame(fighter.lua_state_agent, 47.0);
if macros::is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
macros::ATK_HIT_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, Hash40::new("throw"), *FIGHTER_STATUS_THROW_WORK_INT_TARGET_OBJECT, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_HIT_GROUP, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_HIT_NO);
macros::CAM_ZOOM_OUT(fighter);
}
}