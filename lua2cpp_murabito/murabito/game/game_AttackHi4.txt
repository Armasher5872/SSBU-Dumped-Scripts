frame(Frame=4)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	ArticleModule::generate_article(FIGHTER_MURABITO_GENERATE_ARTICLE_FIREWORK, false)
	0x13ae40()
	0x13ae40()
}
frame(Frame=8)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	WorkModule::on_flag(Flag=FIGHTER_STATUS_ATTACK_FLAG_START_SMASH_HOLD)
	0x13ae40()
}
frame(Frame=12)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	ATTACK(ID=0, Part=0, Bone=hash40("top"), Damage=3.0, Angle=87, KBG=100, FKB=120, BKB=0, Size=4.0, X=0.0, Y=5.0, Z=0.5, X2=0.0, Y2=5.0, Z2=2.5, Hitlag=0.5, SDI=0.1, Clang_Rebound=ATTACK_SETOFF_KIND_ON, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=0, Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_G, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_normal"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_KICK, Type=ATTACK_REGION_OBJECT)
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	ATTACK(ID=1, Part=0, Bone=hash40("top"), Damage=3.0, Angle=115, KBG=100, FKB=120, BKB=0, Size=6.0, X=0.0, Y=5.0, Z=6.0, X2=LUA_VOID, Y2=LUA_VOID, Z2=LUA_VOID, Hitlag=0.5, SDI=0.1, Clang_Rebound=ATTACK_SETOFF_KIND_ON, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=0, Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_G, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_normal"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_KICK, Type=ATTACK_REGION_OBJECT)
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	AttackModule::set_no_damage_fly_smoke_all(true, false)
	0x13ae40()
	0x13ae40()
}
wait(Frames=2)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	ArticleModule::shoot(FIGHTER_MURABITO_GENERATE_ARTICLE_FIREWORK, ARTICLE_OPE_TARGET_ALL, false)
	0x13ae40()
	0x13ae40()
	0x13ae40()
	AttackModule::clear_all()
}
