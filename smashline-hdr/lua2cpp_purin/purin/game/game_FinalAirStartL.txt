#[acmd_script( agent = "purin", script = "game_finalairstartl", category = ACMD_GAME, low_priority )]
unsafe fn game_finalairstartl(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        WHOLE_HIT(agent, *HIT_STATUS_XLU);
        CHECK_VALID_FINAL_START_CAMERA(agent, 0, 7, 20, 0, 0, 0);
        SLOW_OPPONENT(agent, 7, 120);
    }
    if !WorkModule::is_flag(boma, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA) {
        if is_excute(agent) {
            FT_SET_FINAL_FEAR_FACE(agent, 60);
            REQ_FINAL_START_CAMERA(agent, Hash40::new("d04finalstartr.nuanmb"), false);
        }
        else{
        if is_excute(agent) {
            PostureModule::scale(boma, 5, 0);
            0xf85d0(-467097480, 2.1);
            CAM_ZOOM_IN_arg5(0, 0);
            FT_START_CUTIN(agent);
        }
    }
}
wait(lua_state, 30.0);
if is_excute(agent) {
    CAM_ZOOM_OUT(agent);
    WorkModule::on_flag(boma, *FIGHTER_PURIN_STATUS_FINAL_FLAG_COMMON);
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 3.0, 0.0, 0.0, 0.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
frame(lua_state, 50.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 3.5, 0.0, -1.0, -1.0, Some(0.0), Some(-1.0), Some(1.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
frame(lua_state, 57.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 4.4, 0.0, -1.0, 0.0, Some(0.0), Some(3.2), Some(0.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
frame(lua_state, 74.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 4.4, 0.0, 0.0, -1.0, Some(0.0), Some(0.0), Some(1.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
frame(lua_state, 92.0);
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("rot"), 0.0, 0, 100, 75, 0, 5.4, 0.0, 0.0, 0.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 2, false, false, true, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
    AttackModule::set_invalid_xlu(boma, 0, true);
}
}