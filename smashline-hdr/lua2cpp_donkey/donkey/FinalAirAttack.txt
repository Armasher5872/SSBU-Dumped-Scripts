unsafe extern "C" fn game_finalairattack(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        CAM_ZOOM_OUT(agent);
    }
    WorkModule::is_flag(boma, *FIGHTER_DONKEY_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        get_value_float(*SO_VAR_FLOAT_LR);
        0x120890(0, 0);
    }
    if is_excute(agent) {
        WHOLE_HIT(agent, *HIT_STATUS_XLU);
    }
    frame(lua_state, 6.0);
    for _ in 0..18 {
    if is_excute(agent) {
        ATTACK(agent, 0, 0, Hash40::new("top"), 1.2, 135, 100, 40, 0, 8.5, 0.0, 2.8, 47.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        ATTACK(agent, 1, 0, Hash40::new("top"), 1.2, 45, 100, 40, 0, 8.5, 0.0, 2.8, 30.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        ATTACK(agent, 2, 0, Hash40::new("top"), 1.2, 225, 100, 40, 0, 8.5, 0.0, 17.3, 47.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        ATTACK(agent, 3, 0, Hash40::new("top"), 1.2, 315, 100, 40, 0, 8.5, 0.0, 17.3, 30.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        ATTACK(agent, 4, 0, Hash40::new("top"), 1.2, 140, 80, 0, 40, 15.0, 0.0, 10.0, 8.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        AttackModule::set_no_dead_all(boma, true, false);
        AttackModule::set_no_uniq_effect_all(boma, true, false);
    }
    wait(lua_state, 2.0);
    if is_excute(agent) {
        AttackModule::clear_all(boma);
    }
    wait(lua_state, 2.0);
}
frame(lua_state, 79.0);
for _ in 0..13 {
if is_excute(agent) {
    ATTACK(agent, 0, 0, Hash40::new("top"), 1.1, 135, 100, 40, 0, 8.5, 0.0, 2.8, 47.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
    ATTACK(agent, 1, 0, Hash40::new("top"), 1.1, 45, 100, 40, 0, 8.5, 0.0, 2.8, 30.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
    ATTACK(agent, 2, 0, Hash40::new("top"), 1.1, 225, 100, 40, 0, 8.5, 0.0, 17.3, 47.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
    ATTACK(agent, 3, 0, Hash40::new("top"), 1.1, 315, 100, 40, 0, 8.5, 0.0, 17.3, 30.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
    ATTACK(agent, 4, 0, Hash40::new("top"), 1.1, 140, 80, 0, 40, 15.0, 0.0, 10.0, 8.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, f32::NAN, 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
    AttackModule::set_no_dead_all(boma, true, false);
    AttackModule::set_no_uniq_effect_all(boma, true, false);
}
wait(lua_state, 1.0);
if is_excute(agent) {
    AttackModule::clear_all(boma);
}
wait(lua_state, 3.0);
}
}

unsafe extern "C" fn effect_finalairattack(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        EffectModule::remove_screen(boma, Hash40::new("bg_donkey_final"), -1);
        FT_REMOVE_FINAL_AURA(agent, true);
    }
    if sv_animcmd::get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
        if is_excute(agent) {
            EffectModule::req_screen(boma, Hash40::new("bg_donkey_final2"), false, false, false);
        }
        else{
        if is_excute(agent) {
            EffectModule::req_screen(boma, Hash40::new("bg_donkey_final2b"), false, false, false);
        }
    }
}
if is_excute(agent) {
    CANCEL_FILL_SCREEN(agent, 1, 1);
}
frame(lua_state, 7.0);
if is_excute(agent) {
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 7, 40, 10, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 10.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 12, 40, 0, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 14.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 15, 40, -20, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 18.0);
if is_excute(agent) {
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 6, 40, 15, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 22.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 12, 35, 5, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 26.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 14, 40, -10, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
}
frame(lua_state, 30.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 15, 40, -15, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 34.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 17, 40, -20, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 38.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 7, 40, 10, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
}
frame(lua_state, 42.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 12, 40, 10, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 46.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 18, 40, -20, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 50.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 6, 40, 15, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
}
frame(lua_state, 54.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 11, 35, 5, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 58.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 12, 40, 5, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 62.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 18, 40, -20, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
}
frame(lua_state, 66.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 17, 40, -13, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 70.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 7, 40, 13, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 74.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 12, 40, 10, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
}
frame(lua_state, 79.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 18, 40, -20, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 83.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 5, 40, 15, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 87.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 7, 35, 15, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
}
frame(lua_state, 91.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 12, 40, 0, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 95.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 15, 40, -20, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 99.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 17, 40, -20, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
}
frame(lua_state, 103.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 7, 40, 20, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 107.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 7, 40, 10, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 111.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 18, 40, -25, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
}
frame(lua_state, 115.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 4, 40, 15, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 119.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 12, 35, 5, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
frame(lua_state, 123.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 10, 40, 5, 0, 0, 2, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
    LANDING_EFFECT(agent, Hash40::new("sys_atk_smoke"), Hash40::new("top"), -1, 0, 0, 0, 0, 0, 0.8, 3, 0, 1, 0, 0, 0, false);
    EFFECT(agent, Hash40::new("donkey_final_rashhit"), Hash40::new("top"), 0, 13, 40, 0, 0, 0, 1, 3, 6, 5, 0, 0, 0, true);
}
frame(lua_state, 127.0);
if is_excute(agent) {
    EFFECT_FLIP(agent, Hash40::new("donkey_final_rash"), Hash40::new("donkey_final_rash"), Hash40::new("top"), 0, 8, 40, 10, 0, 0, 1.6, 0, 2, 4, 0, 0, 0, true, *EF_FLIP_ZX);
}
}

unsafe extern "C" fn sound_finalairattack(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    frame(lua_state, 3.0);
    if is_excute(agent) {
        PLAY_STATUS(agent, Hash40::new("se_donkey_final02"));
        PLAY_STATUS(agent, Hash40::new("se_donkey_final04"));
    }
    frame(lua_state, 5.0);
    for _ in 0..31 {
    if is_excute(agent) {
        PLAY_SE(agent, Hash40::new("se_donkey_final_swing_s"));
    }
    wait(lua_state, 4.0);
}
}

unsafe extern "C" fn expression_finalairattack(agent: &mut L2CAgentBase) {
    let lua_state = agent.lua_state_agent;
    let boma = agent.boma();
    if is_excute(agent) {
        ItemModule::set_have_item_visibility(boma, false, 0);
    }
    frame(lua_state, 6.0);
    if is_excute(agent) {
        RUMBLE_HIT_STATUS(agent, Hash40::new("rbkind_spinattack"), 0);
    }
    for _ in 0..18 {
    if is_excute(agent) {
        QUAKE(agent, *CAMERA_QUAKE_KIND_S);
    }
    wait(lua_state, 4.0);
}
frame(lua_state, 79.0);
for _ in 0..13 {
if is_excute(agent) {
    QUAKE(agent, *CAMERA_QUAKE_KIND_S);
}
wait(lua_state, 4.0);
}
}