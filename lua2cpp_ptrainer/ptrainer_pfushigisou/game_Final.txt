frame(Frame=30)
0x43c10()
0x43c10()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x43c10()){
	ATTACK(ID=0, Part=0, Bone=hash40("top"), Damage=0.2, Angle=367, KBG=100, FKB=45, BKB=5, Size=6.5, X=0.0, Y=10.0, Z=200.0, X2=0.0, Y2=10.0, Z2=200.0, Hitlag=0.9, SDI=0.0, Clang_Rebound=ATTACK_SETOFF_KIND_OFF, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=hash40("no"), Trip=0.0, Rehit=5, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=true, Direct_Hitbox=false, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_normal"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_NONE, Type=ATTACK_REGION_NONE)
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	ATTACK(ID=1, Part=0, Bone=hash40("top"), Damage=0.2, Angle=10, KBG=100, FKB=45, BKB=5, Size=6.5, X=0.0, Y=10.0, Z=15.0, X2=0.0, Y2=10.0, Z2=200.0, Hitlag=0.9, SDI=0.0, Clang_Rebound=ATTACK_SETOFF_KIND_OFF, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=hash40("no"), Trip=0.0, Rehit=5, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=true, Direct_Hitbox=false, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_normal"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_NONE, Type=ATTACK_REGION_NONE)
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	AttackModule::set_final_finish_cut_in(0, true, true, -1, false)
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	AttackModule::set_final_finish_cut_in(1, true, true, -1, false)
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
}
frame(Frame=200)
0x43c10()
0x43c10()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x43c10()){
	AttackModule::clear_all()
}
frame(Frame=201)
0x43c10()
0x43c10()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x43c10()){
	ATTACK(ID=0, Part=0, Bone=hash40("top"), Damage=5.0, Angle=361, KBG=128, FKB=0, BKB=80, Size=9.0, X=0.0, Y=10.0, Z=15.0, X2=0.0, Y2=10.0, Z2=200.0, Hitlag=1.0, SDI=0.0, Clang_Rebound=ATTACK_SETOFF_KIND_OFF, FacingRestrict=ATTACK_LR_CHECK_F, SetWeight=false, ShieldDamage=hash40("no"), Trip=0.0, Rehit=5, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=true, Direct_Hitbox=false, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_normal"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_NONE, Type=ATTACK_REGION_NONE)
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	AttackModule::set_force_reaction(0, true, false)
	0x43c10()
	0x43c10()
	0x43c10()
	AttackModule::set_final_finish_cut_in(0, true, true, -1, false)
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
	0x43c10()
}
frame(Frame=210)
0x43c10()
0x43c10()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x43c10()){
	AttackModule::clear_all()
}
