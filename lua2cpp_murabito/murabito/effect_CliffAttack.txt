frame(Frame=11)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	EFFECT(hash40("sys_smash_flash"), hash40("toer"), 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, true)
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
}
frame(Frame=22)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	LANDING_EFFECT(hash40("sys_atk_smoke"), hash40("top"), 0, 0, -3, 0, 0, 0, 0.85, 0, 0, 0, 0, 0, 0, false)
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	EFFECT(hash40("sys_attack_speedline"), hash40("top"), 0, 4.5, -3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 360, true)
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	LAST_EFFECT_SET_COLOR(0.7, 1, 0.9)
	0x13ae40()
	0x13ae40()
	0x13ae40()
	LAST_EFFECT_SET_ALPHA(0.7)
	0x13ae40()
	EFFECT(hash40("sys_attack_line"), hash40("top"), 0, 4.5, -2, 0, 0, 0, 0.9, 0, 0, 0, 0, 0, 360, true)
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
}
frame(Frame=23)
0x13ae40()
0x13ae40()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x13ae40()){
	EFFECT(hash40("sys_attack_impact"), hash40("top"), 0, 4.5, 9, 0, 0, 0, 0.9, 0, 0, 0, 0, 0, 360, true)
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	0x13ae40()
	LAST_EFFECT_SET_ALPHA(0.7)
	0x13ae40()
}
