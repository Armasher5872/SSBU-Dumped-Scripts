#[acmd_script( agent = "donkey", script = "game_finalend_com", category = ACMD_GAME, low_priority )]
unsafe fn game_finalend_com(agent: &mut L2CAgentBase) {
    if macros::is_excute(agent) {
        macros::CAM_ZOOM_OUT(agent);
    }
    PostureModule::scale(agent.module_accessor);
    if(0x120890(298784397, 1.4)){
        frame(agent.lua_state_agent, 7.0);
        if macros::is_excute(agent) {
            macros::ATTACK(agent, 0, 0, Hash40::new("handl"), 14.0, 70, 96, 0, 90, 12.0, 2.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
            macros::ATTACK(agent, 1, 0, Hash40::new("arml"), 14.0, 70, 96, 0, 90, 11.0, -2.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
            macros::ATTACK(agent, 2, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 13.0, 0.0, 11.0, 5.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
            macros::ATTACK(agent, 3, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 15.0, 0.0, 11.0, 25.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
            AttackModule::set_force_reaction(agent.module_accessor, 0, true, false);
            AttackModule::set_force_reaction(agent.module_accessor, 1, true, false);
            AttackModule::set_force_reaction(agent.module_accessor, 2, true, false);
            AttackModule::set_force_reaction(agent.module_accessor, 3, true, false);
            WorkModule::on_flag(agent.module_accessor, *FIGHTER_DONKEY_STATUS_FINAL_FLAG_ATTACK_END_HIT);
            AttackModule::set_final_finish_cut_in(agent.module_accessor, 0, true, false, -1, false);
            AttackModule::set_final_finish_cut_in(agent.module_accessor, 1, true, false, -1, false);
            AttackModule::set_final_finish_cut_in(agent.module_accessor, 2, true, false, -1, false);
            AttackModule::set_final_finish_cut_in(agent.module_accessor, 3, true, false, -1, false);
        }
    }
    frame(agent.lua_state_agent, 9.0);
    methodlib::L2CValue::operatorbool()const(is_excute);
    PostureModule::scale(agent.module_accessor);
    if(0x120890(0, 0.5)){
        frame(agent.lua_state_agent, 6.0);
        if macros::is_excute(agent) {
            macros::ATTACK(agent, 0, 0, Hash40::new("top"), 0.0, 3, 100, 0, 0, 15.0, 0.0, 10.0, 9.0, Some(0.0), Some(10.0), Some(11.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
            AttackModule::set_vec_target_pos(agent.module_accessor, 0, Hash40::new("top"), &Vector2f{x: 50.0, y: 3.0}, 1, false);
            AttackModule::set_force_reaction(agent.module_accessor, 0, true, false);
            WorkModule::on_flag(agent.module_accessor, *FIGHTER_DONKEY_STATUS_FINAL_FLAG_ATTACK_END_HIT);
        }
    }
    frame(agent.lua_state_agent, 7.0);
    if macros::is_excute(agent) {
        macros::ATTACK(agent, 0, 0, Hash40::new("handl"), 14.0, 70, 96, 0, 90, 12.0, 2.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        macros::ATTACK(agent, 1, 0, Hash40::new("arml"), 14.0, 70, 96, 0, 90, 11.0, -2.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        macros::ATTACK(agent, 2, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 13.0, 0.0, 11.0, 5.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        macros::ATTACK(agent, 3, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 15.0, 0.0, 11.0, 25.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        AttackModule::set_force_reaction(agent.module_accessor, 0, true, false);
        AttackModule::set_force_reaction(agent.module_accessor, 1, true, false);
        AttackModule::set_force_reaction(agent.module_accessor, 2, true, false);
        AttackModule::set_force_reaction(agent.module_accessor, 3, true, false);
        AttackModule::set_final_finish_cut_in(agent.module_accessor, 0, true, false, -1, false);
        AttackModule::set_final_finish_cut_in(agent.module_accessor, 1, true, false, -1, false);
        AttackModule::set_final_finish_cut_in(agent.module_accessor, 2, true, false, -1, false);
        AttackModule::set_final_finish_cut_in(agent.module_accessor, 3, true, false, -1, false);
    }
    frame(agent.lua_state_agent, 9.0);
    if macros::is_excute(agent) {
    }
    else{
    frame(agent.lua_state_agent, 7.0);
    if macros::is_excute(agent) {
        macros::ATTACK(agent, 0, 0, Hash40::new("handl"), 14.0, 70, 96, 0, 90, 12.0, 2.0, 0.0, 0.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        macros::ATTACK(agent, 1, 0, Hash40::new("arml"), 14.0, 70, 96, 0, 90, 11.0, -2.0, 0.0, 0.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        macros::ATTACK(agent, 2, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 13.0, 0.0, 11.0, 5.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        macros::ATTACK(agent, 3, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 15.0, 0.0, 11.0, 25.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, f32::NAN, 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
        AttackModule::set_force_reaction(agent.module_accessor, 0, true, false);
        AttackModule::set_force_reaction(agent.module_accessor, 1, true, false);
        AttackModule::set_force_reaction(agent.module_accessor, 2, true, false);
        AttackModule::set_force_reaction(agent.module_accessor, 3, true, false);
        WorkModule::on_flag(agent.module_accessor, *FIGHTER_DONKEY_STATUS_FINAL_FLAG_ATTACK_END_HIT);
        AttackModule::set_final_finish_cut_in(agent.module_accessor, 0, true, false, -1, false);
        AttackModule::set_final_finish_cut_in(agent.module_accessor, 1, true, false, -1, false);
        AttackModule::set_final_finish_cut_in(agent.module_accessor, 2, true, false, -1, false);
        AttackModule::set_final_finish_cut_in(agent.module_accessor, 3, true, false, -1, false);
        macros::CHECK_VALID_FINAL_START_CAMERA(agent, 0, 7, 40, 0, 0, 0);
    }
}
WorkModule::is_flag(agent.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){
    WorkModule::is_flag(agent.module_accessor, *FIGHTER_DONKEY_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
    if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){
        if get_value_float(agent, *SO_VAR_FLOAT_LR) < 0.0 {
            if macros::is_excute(agent) {
                PostureModule::scale(agent.module_accessor, 1, 0);
                0x120890(0, 1.5);
                CAM_ZOOM_IN_arg5(0, 0);
                camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, -20, 5);
            }
            else{
            if macros::is_excute(agent) {
                PostureModule::scale(agent.module_accessor, 1, 0);
                0x120890(0, 1.5);
                CAM_ZOOM_IN_arg5(0, 0);
                camera!(agent, *MA_MSC_CMD_CAMERA_CAM_OFFSET, 20, 5);
            }
        }
    }
}
}
frame(agent.lua_state_agent, 9.0);
if macros::is_excute(agent) {
macros::CAM_ZOOM_OUT(agent);
AttackModule::clear_all(agent.module_accessor);
}
}