methodlib::L2CValue::operatorbool()const(is_excute)
if(0x111760()){
	VisibilityModule::set_whole(true)
	0x111760()
}
wait(Frames=2)
0x111760()
0x111760()
wait(Frames=2)
0x111760()
0x111760()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x111760()){
	ATTACK(ID=0, Part=0, Bone=hash40("top"), Damage=40.0, Angle=40, KBG=40, FKB=0, BKB=120, Size=19.0, X=0.0, Y=3.0, Z=0.0, X2=0.0, Y2=8.5, Z2=27.0, Hitlag=0.0, SDI=0.0, Clang_Rebound=ATTACK_SETOFF_KIND_OFF, FacingRestrict=ATTACK_LR_CHECK_POS, SetWeight=false, ShieldDamage=hash40("no"), Trip=0.0, Rehit=0, Reflectable=false, Absorbable=false, Flinchless=false, DisableHitlag=false, Direct_Hitbox=true, Ground_or_Air=COLLISION_SITUATION_MASK_GA, Hitbits=COLLISION_CATEGORY_MASK_ALL, CollisionPart=COLLISION_PART_MASK_ALL, FriendlyFire=false, Effect=hash40("collision_attr_normal"), SFXLevel=ATTACK_SOUND_LEVEL_L, SFXType=COLLISION_SOUND_ATTR_PUNCH, Type=ATTACK_REGION_PUNCH)
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	0x111760()
	AttackModule::set_force_reaction(0, true, false)
	0x111760()
	0x111760()
	0x111760()
	AttackModule::set_no_uniq_effect_all(true, false)
	0x111760()
	0x111760()
	AttackModule::set_no_squat_damage_reaction_mul(0, true, false)
	0x111760()
	0x111760()
	0x111760()
}
frame(Frame=10)
0x111760()
0x111760()
BattleObjectWorld__scale_z()
methodlib::L2CValue::operator<=(lib::L2CValueconst&)const(0, 1.0)
0x111760()
if(0x111760()){
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x111760()){
		SlowModule::set_whole(90, 0)
		0x111760()
		0x111760()
	}
}
get_value_float(SO_VAR_FLOAT_LR)
0x111760(0, 0)
0x111760()
0x111760()
if(0x111760()){
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x111760()){
		PostureModule::scale(1, 0)
		0x111760(-17935990, 1.5)
		0x111760()
		CAM_ZOOM_IN_arg5(-0.3, 0.5)
	}
	else{
		methodlib::L2CValue::operatorbool()const(is_excute)
		if(0x111760()){
			SlowModule::set_whole(90, 0)
			0x111760()
			0x111760()
		}
		get_value_float(SO_VAR_FLOAT_LR)
		0x111760(0, 0)
		0x111760()
		0x111760()
		if(0x111760()){
			methodlib::L2CValue::operatorbool()const(is_excute)
			if(0x111760()){
				PostureModule::scale(1, 0)
				0x111760(-17935990, 1.5)
				0x111760()
				CAM_ZOOM_IN_arg5(0, 0)
			}
			else{
				methodlib::L2CValue::operatorbool()const(is_excute)
				if(0x111760()){
					PostureModule::scale(1, 0)
					0x111760(-17935990, 1.5)
					0x111760()
					CAM_ZOOM_IN_arg5(-0.3, -0.5)
				}
				else{
					methodlib::L2CValue::operatorbool()const(is_excute)
					if(0x111760()){
						PostureModule::scale(1, 0)
						0x111760(-17935990, 1.5)
						0x111760()
						CAM_ZOOM_IN_arg5(0, 0)
						0x111760()
						0x111760()
						0x111760()
						0x111760()
						0x111760()
						0x111760()
					}
				}
			}
		}
	}
}
frame(Frame=10.6)
0x111760()
0x111760()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x111760()){
	CAM_ZOOM_OUT()
}
frame(Frame=10.9)
0x111760()
0x111760()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x111760()){
	SlowModule::clear_whole()
	AttackModule::clear_all()
}
