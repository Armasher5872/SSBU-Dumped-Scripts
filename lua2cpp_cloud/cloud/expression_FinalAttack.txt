methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	ItemModule::set_have_item_visibility(false)
	0x180150()
}
WorkModule::is_flag(FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT)
0x180150(false, true)
0x180150()
0x180150()
if(0x180150()){
	frame(Frame=7)
	0x180150()
	0x180150()
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x180150()){
		RUMBLE_HIT(hash40("rbkind_slashm"), 12)
		0x180150()
		0x180150()
	}
}
frame(Frame=10)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_XL)
	0x180150()
}
frame(Frame=19)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 12)
	0x180150()
	0x180150()
}
frame(Frame=32)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=49)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=50)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_L)
	0x180150()
}
frame(Frame=74)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 14)
	0x180150()
	0x180150()
}
frame(Frame=75)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_L)
	0x180150()
}
frame(Frame=88)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=105)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=110)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_L)
	0x180150()
}
frame(Frame=125)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=143)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=160)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_XL)
	0x180150()
}
frame(Frame=161)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=186)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 8)
	0x180150()
	0x180150()
}
frame(Frame=195)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashs"), 8)
	0x180150()
	0x180150()
}
frame(Frame=200)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_M)
	0x180150()
}
frame(Frame=203)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashs"), 0)
	0x180150()
	0x180150()
}
frame(Frame=214)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashs"), 0)
	0x180150()
	0x180150()
}
frame(Frame=228)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	methodlib::L2CValue::as_hash()const(hash40("rbkind_spinattack"), 0, true)
	ControlModule::set_rumble()
	0x180150()
	0x180150()
	0x180150()
}
frame(Frame=250)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_L)
	0x180150()
}
frame(Frame=262)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_L)
	0x180150()
}
frame(Frame=271)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	methodlib::L2CValue::as_hash()const(hash40("rbkind_erase"), 0, false)
	ControlModule::set_rumble()
	0x180150()
	0x180150()
	0x180150()
}
frame(Frame=274)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_L)
	0x180150()
}
frame(Frame=285)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashll"), 0)
}
else{
	frame(Frame=0)
	0x180150()
	0x180150()
	methodlib::L2CValue::operatorbool()const(is_excute)
	if(0x180150()){
		RUMBLE_HIT(hash40("rbkind_slashm"), 12)
		0x180150()
		0x180150()
	}
}
frame(Frame=10)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_L)
	0x180150()
}
frame(Frame=19)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 12)
	0x180150()
	0x180150()
}
frame(Frame=32)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=49)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=50)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_M)
	0x180150()
}
frame(Frame=74)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 14)
	0x180150()
	0x180150()
}
frame(Frame=75)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_M)
	0x180150()
}
frame(Frame=88)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=105)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=110)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_M)
	0x180150()
}
frame(Frame=125)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=143)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=160)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_L)
	0x180150()
}
frame(Frame=161)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 0)
	0x180150()
	0x180150()
}
frame(Frame=186)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashm"), 8)
	0x180150()
	0x180150()
}
frame(Frame=195)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashs"), 8)
	0x180150()
	0x180150()
}
frame(Frame=200)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_M)
	0x180150()
}
frame(Frame=203)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashs"), 10)
	0x180150()
	0x180150()
}
frame(Frame=214)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashs"), 0)
	0x180150()
	0x180150()
}
frame(Frame=228)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	methodlib::L2CValue::as_hash()const(hash40("rbkind_spinattack"), 0, true)
	ControlModule::set_rumble()
	0x180150()
	0x180150()
	0x180150()
}
frame(Frame=250)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_S)
	0x180150()
}
frame(Frame=262)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_S)
	0x180150()
}
frame(Frame=271)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	methodlib::L2CValue::as_hash()const(hash40("rbkind_erase"), 0, false)
	ControlModule::set_rumble()
	0x180150()
	0x180150()
	0x180150()
}
frame(Frame=274)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	QUAKE(CAMERA_QUAKE_KIND_S)
	0x180150()
}
frame(Frame=285)
0x180150()
0x180150()
methodlib::L2CValue::operatorbool()const(is_excute)
if(0x180150()){
	RUMBLE_HIT(hash40("rbkind_slashll"), 0)
	0x180150()
	0x180150()
}
