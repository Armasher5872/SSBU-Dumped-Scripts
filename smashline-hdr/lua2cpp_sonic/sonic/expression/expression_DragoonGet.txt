#[acmd_script( agent = "sonic", script = "expression_dragoonget", category = ACMD_EXPRESSION, low_priority )]
unsafe fn expression_dragoonget(fighter: &mut L2CAgentBase) {
    let lua_state = fighter.lua_state_agent;
    let boma = fighter.boma();
    frame(lua_state, 13.0);
    if is_excute(fighter) {
        ItemModule::set_attach_item_visibility(boma, false);
    }
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, Hash40::new("body"), Hash40::new("body_sphere"));
        HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_OFF);
        HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_NORMAL);
    }
    for _ in 0..10 {
    wait(0, 2);
    if is_excute(fighter) {
        VisibilityModule::set_int64(boma, Hash40::new("body"), Hash40::new("body_normal"));
        HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_NORMAL);
        HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_OFF);
    }
    wait(0, 2);
}
frame(lua_state, 52.0);
if is_excute(fighter) {
    ControlModule::set_rumble(boma, Hash40::new("rbkind_getbonus"), 0, false, *BATTLE_OBJECT_ID_INVALID as u32);
}
}